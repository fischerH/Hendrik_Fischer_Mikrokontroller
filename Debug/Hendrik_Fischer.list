
Hendrik_Fischer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003784  08003784  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003784  08003784  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800378c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003798  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003798  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be2c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7c  00000000  00000000  0002be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a3c  00000000  00000000  0002f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f130  00000000  00000000  00041d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006da70  00000000  00000000  00050ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000be964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036cc 	.word	0x080036cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080036cc 	.word	0x080036cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <InitialisiereGyro>:
#include <string.h>
#include <gyro.h>
#include <stdbool.h>


bool InitialisiereGyro(){
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[15];

	//konfiguriere Control Register 1

	buf[0] = CTRL_REG1;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2213      	movs	r2, #19
 80003fe:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00001111; //Unused	Reset 0/1	SelfTest 0/1	Output Data Rate 011 für 100 Hz	Active Mode gewählt mit 11
 8000400:	003b      	movs	r3, r7
 8000402:	220f      	movs	r2, #15
 8000404:	705a      	strb	r2, [r3, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 8000406:	250f      	movs	r5, #15
 8000408:	197c      	adds	r4, r7, r5
 800040a:	003a      	movs	r2, r7
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <InitialisiereGyro+0xb8>)
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2302      	movs	r3, #2
 8000416:	2142      	movs	r1, #66	; 0x42
 8000418:	f001 f8d0 	bl	80015bc <HAL_I2C_Master_Transmit>
 800041c:	0003      	movs	r3, r0
 800041e:	7023      	strb	r3, [r4, #0]

	HAL_Delay(80);
 8000420:	2050      	movs	r0, #80	; 0x50
 8000422:	f000 fda7 	bl	8000f74 <HAL_Delay>

	//lese Device Identifier

 	buf[0] = WHO_AM_I_Gyro_Reg;
 8000426:	003b      	movs	r3, r7
 8000428:	220c      	movs	r2, #12
 800042a:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, 1000);
 800042c:	197c      	adds	r4, r7, r5
 800042e:	003a      	movs	r2, r7
 8000430:	481e      	ldr	r0, [pc, #120]	; (80004ac <InitialisiereGyro+0xb8>)
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2301      	movs	r3, #1
 800043a:	2142      	movs	r1, #66	; 0x42
 800043c:	f001 f8be 	bl	80015bc <HAL_I2C_Master_Transmit>
 8000440:	0003      	movs	r3, r0
 8000442:	7023      	strb	r3, [r4, #0]
	HAL_Delay(80);
 8000444:	2050      	movs	r0, #80	; 0x50
 8000446:	f000 fd95 	bl	8000f74 <HAL_Delay>
	if ( ret == HAL_OK ) {
 800044a:	197b      	adds	r3, r7, r5
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d120      	bne.n	8000494 <InitialisiereGyro+0xa0>

		ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*empfange den Device Identifier*/
 8000452:	197c      	adds	r4, r7, r5
 8000454:	003a      	movs	r2, r7
 8000456:	4815      	ldr	r0, [pc, #84]	; (80004ac <InitialisiereGyro+0xb8>)
 8000458:	2301      	movs	r3, #1
 800045a:	425b      	negs	r3, r3
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2301      	movs	r3, #1
 8000460:	2142      	movs	r1, #66	; 0x42
 8000462:	f001 f9b3 	bl	80017cc <HAL_I2C_Master_Receive>
 8000466:	0003      	movs	r3, r0
 8000468:	7023      	strb	r3, [r4, #0]
		HAL_Delay(80);
 800046a:	2050      	movs	r0, #80	; 0x50
 800046c:	f000 fd82 	bl	8000f74 <HAL_Delay>
		if ( ret == HAL_OK && buf[0] == GyroDeviceID) {
 8000470:	197b      	adds	r3, r7, r5
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <InitialisiereGyro+0x90>
 8000478:	003b      	movs	r3, r7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2bd7      	cmp	r3, #215	; 0xd7
 800047e:	d101      	bne.n	8000484 <InitialisiereGyro+0x90>
			return true;
 8000480:	2301      	movs	r3, #1
 8000482:	e00e      	b.n	80004a2 <InitialisiereGyro+0xae>

		}else{
			strcpy((char*)buf, "INIT ERR Read");
 8000484:	003b      	movs	r3, r7
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <InitialisiereGyro+0xbc>)
 8000488:	ca13      	ldmia	r2!, {r0, r1, r4}
 800048a:	c313      	stmia	r3!, {r0, r1, r4}
 800048c:	8812      	ldrh	r2, [r2, #0]
 800048e:	801a      	strh	r2, [r3, #0]
			return false;
 8000490:	2300      	movs	r3, #0
 8000492:	e006      	b.n	80004a2 <InitialisiereGyro+0xae>
		}

	}else{
		strcpy((char*)buf, "INIT ERR Send");
 8000494:	003b      	movs	r3, r7
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <InitialisiereGyro+0xc0>)
 8000498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800049a:	c313      	stmia	r3!, {r0, r1, r4}
 800049c:	8812      	ldrh	r2, [r2, #0]
 800049e:	801a      	strh	r2, [r3, #0]
		return false;
 80004a0:	2300      	movs	r3, #0
	}

}
 80004a2:	0018      	movs	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b004      	add	sp, #16
 80004a8:	bdb0      	pop	{r4, r5, r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000028 	.word	0x20000028
 80004b0:	080036e4 	.word	0x080036e4
 80004b4:	080036f4 	.word	0x080036f4

080004b8 <gyroWerteAuslesen>:

void gyroWerteAuslesen (int16_t *x_axis, int16_t *y_axis, int16_t *z_axis){
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	b08b      	sub	sp, #44	; 0x2c
 80004bc:	af02      	add	r7, sp, #8
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;



	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = Gyro_Status_REG;
 80004c4:	2510      	movs	r5, #16
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]



	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80004cc:	261f      	movs	r6, #31
 80004ce:	19bc      	adds	r4, r7, r6
 80004d0:	197a      	adds	r2, r7, r5
 80004d2:	4831      	ldr	r0, [pc, #196]	; (8000598 <gyroWerteAuslesen+0xe0>)
 80004d4:	2301      	movs	r3, #1
 80004d6:	425b      	negs	r3, r3
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	2142      	movs	r1, #66	; 0x42
 80004de:	f001 f86d 	bl	80015bc <HAL_I2C_Master_Transmit>
 80004e2:	0003      	movs	r3, r0
 80004e4:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(80);
 80004e6:	2050      	movs	r0, #80	; 0x50
 80004e8:	f000 fd44 	bl	8000f74 <HAL_Delay>

	  if ( ret == HAL_OK ) {
 80004ec:	19bb      	adds	r3, r7, r6
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d148      	bne.n	8000586 <gyroWerteAuslesen+0xce>
		  //Burst-Read
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 80004f4:	19bc      	adds	r4, r7, r6
 80004f6:	197a      	adds	r2, r7, r5
 80004f8:	4827      	ldr	r0, [pc, #156]	; (8000598 <gyroWerteAuslesen+0xe0>)
 80004fa:	2301      	movs	r3, #1
 80004fc:	425b      	negs	r3, r3
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2307      	movs	r3, #7
 8000502:	2142      	movs	r1, #66	; 0x42
 8000504:	f001 f962 	bl	80017cc <HAL_I2C_Master_Receive>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
		  HAL_Delay(80);
 800050c:	2050      	movs	r0, #80	; 0x50
 800050e:	f000 fd31 	bl	8000f74 <HAL_Delay>
		if ( ret == HAL_OK ) {
 8000512:	19bb      	adds	r3, r7, r6
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d12b      	bne.n	8000572 <gyroWerteAuslesen+0xba>
			*x_axis = 0;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	801a      	strh	r2, [r3, #0]
			*x_axis = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 8000520:	197b      	adds	r3, r7, r5
 8000522:	785b      	ldrb	r3, [r3, #1]
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	b21a      	sxth	r2, r3
 8000528:	197b      	adds	r3, r7, r5
 800052a:	789b      	ldrb	r3, [r3, #2]
 800052c:	b21b      	sxth	r3, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	b21a      	sxth	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	801a      	strh	r2, [r3, #0]
			*y_axis = 0;
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
			*y_axis = (buf[3] << 8) | buf[4];
 800053c:	197b      	adds	r3, r7, r5
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	b21a      	sxth	r2, r3
 8000544:	0029      	movs	r1, r5
 8000546:	197b      	adds	r3, r7, r5
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21a      	sxth	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	801a      	strh	r2, [r3, #0]
			*z_axis = 0;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	801a      	strh	r2, [r3, #0]
			*z_axis = (buf[5] << 8) | buf[6];
 800055a:	187b      	adds	r3, r7, r1
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	b21a      	sxth	r2, r3
 8000562:	187b      	adds	r3, r7, r1
 8000564:	799b      	ldrb	r3, [r3, #6]
 8000566:	b21b      	sxth	r3, r3
 8000568:	4313      	orrs	r3, r2
 800056a:	b21a      	sxth	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 8000570:	e00e      	b.n	8000590 <gyroWerteAuslesen+0xd8>
			strcpy((char*)buf, "Error Read");
 8000572:	2310      	movs	r3, #16
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <gyroWerteAuslesen+0xe4>)
 8000578:	ca03      	ldmia	r2!, {r0, r1}
 800057a:	c303      	stmia	r3!, {r0, r1}
 800057c:	8811      	ldrh	r1, [r2, #0]
 800057e:	8019      	strh	r1, [r3, #0]
 8000580:	7892      	ldrb	r2, [r2, #2]
 8000582:	709a      	strb	r2, [r3, #2]
}
 8000584:	e004      	b.n	8000590 <gyroWerteAuslesen+0xd8>
		  strcpy((char*)buf, "Error Write");
 8000586:	2310      	movs	r3, #16
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <gyroWerteAuslesen+0xe8>)
 800058c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800058e:	c313      	stmia	r3!, {r0, r1, r4}
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b009      	add	sp, #36	; 0x24
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	08003704 	.word	0x08003704
 80005a0:	08003710 	.word	0x08003710

080005a4 <InitialisiereMagnetometer>:
#include <string.h>
#include <Magnetometer.h>
#include <stdbool.h>


int InitialisiereMagnetometer(){
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af02      	add	r7, sp, #8
	uint8_t buf[15];


	//Control Register 1
		//versetzt Sensor in Standby, da register bis auf Standy/Active Mode nur in Standby verändert werden kann
	buf[0] = FXOS8700CQ_CTRL_REG1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	222a      	movs	r2, #42	; 0x2a
 80005ae:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80005b6:	2516      	movs	r5, #22
 80005b8:	197c      	adds	r4, r7, r5
 80005ba:	1d3a      	adds	r2, r7, #4
 80005bc:	4833      	ldr	r0, [pc, #204]	; (800068c <InitialisiereMagnetometer+0xe8>)
 80005be:	2301      	movs	r3, #1
 80005c0:	425b      	negs	r3, r3
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2302      	movs	r3, #2
 80005c6:	213e      	movs	r1, #62	; 0x3e
 80005c8:	f000 fff8 	bl	80015bc <HAL_I2C_Master_Transmit>
 80005cc:	0003      	movs	r3, r0
 80005ce:	7023      	strb	r3, [r4, #0]

	HAL_Delay(80);
 80005d0:	2050      	movs	r0, #80	; 0x50
 80005d2:	f000 fccf 	bl	8000f74 <HAL_Delay>
		//aktiviere Sensor und konfiguriere Control Register 1
	//Bit 7-6: auto-wake sample frequency; irrelevant (wähle 00)	Bit 5-3: Output data rate selection; wähle 010 für 200Hz mag only mode
	//bzw. 100 Hz hybrid mode	Bit 2: Inoise; wähle 0 für Normal mode	Bit 1: Fast Read Mode; wähle 0 für Normal Mode	Bit 0: wähle 1
	//um Sensor aus Standby zu holen und zu aktivieren
	buf[1] = 0b00010001;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2211      	movs	r2, #17
 80005da:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80005dc:	197c      	adds	r4, r7, r5
 80005de:	1d3a      	adds	r2, r7, #4
 80005e0:	482a      	ldr	r0, [pc, #168]	; (800068c <InitialisiereMagnetometer+0xe8>)
 80005e2:	2301      	movs	r3, #1
 80005e4:	425b      	negs	r3, r3
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2302      	movs	r3, #2
 80005ea:	213e      	movs	r1, #62	; 0x3e
 80005ec:	f000 ffe6 	bl	80015bc <HAL_I2C_Master_Transmit>
 80005f0:	0003      	movs	r3, r0
 80005f2:	7023      	strb	r3, [r4, #0]


	uint8_t MagnetometerDeviceIdentifier;


	buf[0] = FXOS8700CQ_WHOAMI;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	220d      	movs	r2, #13
 80005f8:	701a      	strb	r2, [r3, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY);
 80005fa:	197c      	adds	r4, r7, r5
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <InitialisiereMagnetometer+0xe8>)
 8000600:	2301      	movs	r3, #1
 8000602:	425b      	negs	r3, r3
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	213e      	movs	r1, #62	; 0x3e
 800060a:	f000 ffd7 	bl	80015bc <HAL_I2C_Master_Transmit>
 800060e:	0003      	movs	r3, r0
 8000610:	7023      	strb	r3, [r4, #0]
		HAL_Delay(80);
 8000612:	2050      	movs	r0, #80	; 0x50
 8000614:	f000 fcae 	bl	8000f74 <HAL_Delay>
		if ( ret == HAL_OK ) {
 8000618:	197b      	adds	r3, r7, r5
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d123      	bne.n	8000668 <InitialisiereMagnetometer+0xc4>

			ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*empfange den Device Identifier*/
 8000620:	197c      	adds	r4, r7, r5
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	4819      	ldr	r0, [pc, #100]	; (800068c <InitialisiereMagnetometer+0xe8>)
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	213e      	movs	r1, #62	; 0x3e
 8000630:	f001 f8cc 	bl	80017cc <HAL_I2C_Master_Receive>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]
			HAL_Delay(80);
 8000638:	2050      	movs	r0, #80	; 0x50
 800063a:	f000 fc9b 	bl	8000f74 <HAL_Delay>
			if ( ret == HAL_OK ) {
 800063e:	197b      	adds	r3, r7, r5
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d105      	bne.n	8000652 <InitialisiereMagnetometer+0xae>
				MagnetometerDeviceIdentifier = buf[0];
 8000646:	2317      	movs	r3, #23
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e014      	b.n	800067c <InitialisiereMagnetometer+0xd8>
			}else{
				strcpy((char*)buf, "INIT ERR Read");
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <InitialisiereMagnetometer+0xec>)
 8000656:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000658:	c313      	stmia	r3!, {r0, r1, r4}
 800065a:	8812      	ldrh	r2, [r2, #0]
 800065c:	801a      	strh	r2, [r3, #0]
				MagnetometerDeviceIdentifier = 0xFF;
 800065e:	2317      	movs	r3, #23
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e009      	b.n	800067c <InitialisiereMagnetometer+0xd8>
			}

		}else{
			strcpy((char*)buf, "INIT ERR Send");
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <InitialisiereMagnetometer+0xf0>)
 800066c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800066e:	c313      	stmia	r3!, {r0, r1, r4}
 8000670:	8812      	ldrh	r2, [r2, #0]
 8000672:	801a      	strh	r2, [r3, #0]
			MagnetometerDeviceIdentifier = 0xFF;
 8000674:	2317      	movs	r3, #23
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	701a      	strb	r2, [r3, #0]
		}

return MagnetometerDeviceIdentifier;
 800067c:	2317      	movs	r3, #23
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	781b      	ldrb	r3, [r3, #0]
}
 8000682:	0018      	movs	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	b006      	add	sp, #24
 8000688:	bdb0      	pop	{r4, r5, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000028 	.word	0x20000028
 8000690:	0800371c 	.word	0x0800371c
 8000694:	0800372c 	.word	0x0800372c

08000698 <MagnetometerWerteAuslesen>:


void MagnetometerWerteAuslesen (int16_t *x_axis_Mag, int16_t *y_axis_Mag, int16_t *z_axis_Mag){
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	b08b      	sub	sp, #44	; 0x2c
 800069c:	af02      	add	r7, sp, #8
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]




	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = FXOS8700CQ_STATUS;
 80006a4:	2510      	movs	r5, #16
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;


	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80006ac:	261f      	movs	r6, #31
 80006ae:	19bc      	adds	r4, r7, r6
 80006b0:	197a      	adds	r2, r7, r5
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <MagnetometerWerteAuslesen+0xdc>)
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	213e      	movs	r1, #62	; 0x3e
 80006be:	f000 ff7d 	bl	80015bc <HAL_I2C_Master_Transmit>
 80006c2:	0003      	movs	r3, r0
 80006c4:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(50);
 80006c6:	2032      	movs	r0, #50	; 0x32
 80006c8:	f000 fc54 	bl	8000f74 <HAL_Delay>
	  if ( ret == HAL_OK ) {
 80006cc:	19bb      	adds	r3, r7, r6
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d145      	bne.n	8000760 <MagnetometerWerteAuslesen+0xc8>
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 80006d4:	19bc      	adds	r4, r7, r6
 80006d6:	197a      	adds	r2, r7, r5
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <MagnetometerWerteAuslesen+0xdc>)
 80006da:	2301      	movs	r3, #1
 80006dc:	425b      	negs	r3, r3
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2307      	movs	r3, #7
 80006e2:	213e      	movs	r1, #62	; 0x3e
 80006e4:	f001 f872 	bl	80017cc <HAL_I2C_Master_Receive>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
		if ( ret == HAL_OK ) {
 80006ec:	19bb      	adds	r3, r7, r6
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d12b      	bne.n	800074c <MagnetometerWerteAuslesen+0xb4>
			*x_axis_Mag = 0;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]
			*x_axis_Mag = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 80006fa:	197b      	adds	r3, r7, r5
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	197b      	adds	r3, r7, r5
 8000704:	789b      	ldrb	r3, [r3, #2]
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21a      	sxth	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = 0;
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = (buf[3] << 8) | buf[4];
 8000716:	197b      	adds	r3, r7, r5
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	0029      	movs	r1, r5
 8000720:	197b      	adds	r3, r7, r5
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	b21b      	sxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b21a      	sxth	r2, r3
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = 0;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = (buf[5] << 8) | buf[6];
 8000734:	187b      	adds	r3, r7, r1
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	799b      	ldrb	r3, [r3, #6]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21a      	sxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 800074a:	e00e      	b.n	800076a <MagnetometerWerteAuslesen+0xd2>
			strcpy((char*)buf, "Error Read");
 800074c:	2310      	movs	r3, #16
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <MagnetometerWerteAuslesen+0xe0>)
 8000752:	ca03      	ldmia	r2!, {r0, r1}
 8000754:	c303      	stmia	r3!, {r0, r1}
 8000756:	8811      	ldrh	r1, [r2, #0]
 8000758:	8019      	strh	r1, [r3, #0]
 800075a:	7892      	ldrb	r2, [r2, #2]
 800075c:	709a      	strb	r2, [r3, #2]
}
 800075e:	e004      	b.n	800076a <MagnetometerWerteAuslesen+0xd2>
		  strcpy((char*)buf, "Error Write");
 8000760:	2310      	movs	r3, #16
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <MagnetometerWerteAuslesen+0xe4>)
 8000766:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000768:	c313      	stmia	r3!, {r0, r1, r4}
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b009      	add	sp, #36	; 0x24
 8000770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000028 	.word	0x20000028
 8000778:	0800373c 	.word	0x0800373c
 800077c:	08003748 	.word	0x08003748

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b5b0      	push	{r4, r5, r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000786:	f000 fb91 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f8c7 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9f5 	bl	8000b7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000792:	f000 f925 	bl	80009e0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000796:	f000 f963 	bl	8000a60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800079a:	4b5c      	ldr	r3, [pc, #368]	; (800090c <main+0x18c>)
 800079c:	2108      	movs	r1, #8
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f97e 	bl	8002aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80007a4:	4b59      	ldr	r3, [pc, #356]	; (800090c <main+0x18c>)
 80007a6:	210c      	movs	r1, #12
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f979 	bl	8002aa0 <HAL_TIM_PWM_Start>
//Initialisiere die Sensoren

  bool Gyro_Init_Check;
  uint8_t MagnetometerDeviceIdentifier;

  Gyro_Init_Check = InitialisiereGyro();
 80007ae:	2515      	movs	r5, #21
 80007b0:	197c      	adds	r4, r7, r5
 80007b2:	f7ff fe1f 	bl	80003f4 <InitialisiereGyro>
 80007b6:	0003      	movs	r3, r0
 80007b8:	7023      	strb	r3, [r4, #0]


  MagnetometerDeviceIdentifier = InitialisiereMagnetometer();
 80007ba:	f7ff fef3 	bl	80005a4 <InitialisiereMagnetometer>
 80007be:	0002      	movs	r2, r0
 80007c0:	2314      	movs	r3, #20
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	701a      	strb	r2, [r3, #0]


  if (Gyro_Init_Check == true){
 80007c6:	197b      	adds	r3, r7, r5
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01c      	beq.n	8000808 <main+0x88>
	  //I2C-Kommunikation funktioniert
	  //blinke grüne LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 80007ce:	2317      	movs	r3, #23
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e012      	b.n	80007fe <main+0x7e>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,511);
 80007d8:	4b4c      	ldr	r3, [pc, #304]	; (800090c <main+0x18c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a4c      	ldr	r2, [pc, #304]	; (8000910 <main+0x190>)
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(1000);
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fbc5 	bl	8000f74 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <main+0x18c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
	  for (x = 0; x <= 3; ++x){
 80007f2:	2217      	movs	r2, #23
 80007f4:	18bb      	adds	r3, r7, r2
 80007f6:	18ba      	adds	r2, r7, r2
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	3201      	adds	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	2317      	movs	r3, #23
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d9e7      	bls.n	80007d8 <main+0x58>
		    }

  }

  if (MagnetometerDeviceIdentifier == FXOS8700CQ_WHOAMI_VAL){
 8000808:	2314      	movs	r3, #20
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2bc7      	cmp	r3, #199	; 0xc7
 8000810:	d11c      	bne.n	800084c <main+0xcc>
	  //I2C-Kommunikation funktioniert
	  //blinke blaue LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 8000812:	2316      	movs	r3, #22
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	e012      	b.n	8000842 <main+0xc2>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,511);
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <main+0x18c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a3b      	ldr	r2, [pc, #236]	; (8000910 <main+0x190>)
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(1000);
 8000824:	23fa      	movs	r3, #250	; 0xfa
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fba3 	bl	8000f74 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <main+0x18c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	63da      	str	r2, [r3, #60]	; 0x3c
	  for (x = 0; x <= 3; ++x){
 8000836:	2216      	movs	r2, #22
 8000838:	18bb      	adds	r3, r7, r2
 800083a:	18ba      	adds	r2, r7, r2
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	3201      	adds	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	2316      	movs	r3, #22
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d9e7      	bls.n	800081c <main+0x9c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 800084c:	1dba      	adds	r2, r7, #6
 800084e:	2308      	movs	r3, #8
 8000850:	18f9      	adds	r1, r7, r3
 8000852:	230a      	movs	r3, #10
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe2e 	bl	80004b8 <gyroWerteAuslesen>
	  HAL_Delay(10);
 800085c:	200a      	movs	r0, #10
 800085e:	f000 fb89 	bl	8000f74 <HAL_Delay>
	  MagnetometerWerteAuslesen(&x_axis_Mag, &y_axis_Mag, &z_axis_Mag);
 8000862:	003a      	movs	r2, r7
 8000864:	1cb9      	adds	r1, r7, #2
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff15 	bl	8000698 <MagnetometerWerteAuslesen>
	  HAL_Delay(10);
 800086e:	200a      	movs	r0, #10
 8000870:	f000 fb80 	bl	8000f74 <HAL_Delay>
	  HAL_Delay(5);
 8000874:	2005      	movs	r0, #5
 8000876:	f000 fb7d 	bl	8000f74 <HAL_Delay>

	  if (z_axis >= 0){
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	2200      	movs	r2, #0
 800087e:	5e9b      	ldrsh	r3, [r3, r2]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db21      	blt.n	80008c8 <main+0x148>
		  // z-Achse wird GEGEN Uhrzeigersinn gedreht
		  int16_t z_axis_Max = 0x7FFF; //maximaler Wert eines 16-bit signed int
 8000884:	210e      	movs	r1, #14
 8000886:	187b      	adds	r3, r7, r1
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <main+0x194>)
 800088a:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Max; //511 ist in der Konfiguration von Tim3 die Zahl, bis zu der gezählt wird.
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	2200      	movs	r2, #0
 8000890:	5e9b      	ldrsh	r3, [r3, r2]
 8000892:	001a      	movs	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	025b      	lsls	r3, r3, #9
 8000898:	1a9a      	subs	r2, r3, r2
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2100      	movs	r1, #0
 800089e:	5e5b      	ldrsh	r3, [r3, r1]
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f7ff fcba 	bl	800021c <__divsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	001a      	movs	r2, r3
 80008ac:	210c      	movs	r1, #12
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	801a      	strh	r2, [r3, #0]

		  //setzt Pulsweite für grüne LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,z);
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <main+0x18c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	187a      	adds	r2, r7, r1
 80008b8:	2100      	movs	r1, #0
 80008ba:	5e52      	ldrsh	r2, [r2, r1]
 80008bc:	641a      	str	r2, [r3, #64]	; 0x40
		  //setzt Pulsweite für blaue LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <main+0x18c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2200      	movs	r2, #0
 80008c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c6:	e7c1      	b.n	800084c <main+0xcc>

	  }else{
		  // z-Achse wird IM Uhrzeigersinn gedreht
		  int16_t z_axis_Min = -0x8000;	//minimaler Wert eines 16-bit signed int
 80008c8:	2112      	movs	r1, #18
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <main+0x198>)
 80008ce:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Min;
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	2200      	movs	r2, #0
 80008d4:	5e9b      	ldrsh	r3, [r3, r2]
 80008d6:	001a      	movs	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	025b      	lsls	r3, r3, #9
 80008dc:	1a9a      	subs	r2, r3, r2
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2100      	movs	r1, #0
 80008e2:	5e5b      	ldrsh	r3, [r3, r1]
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f7ff fc98 	bl	800021c <__divsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	2110      	movs	r1, #16
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	801a      	strh	r2, [r3, #0]
		  //setzt Pulsweite für blaue LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,z);
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <main+0x18c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	2100      	movs	r1, #0
 80008fe:	5e52      	ldrsh	r2, [r2, r1]
 8000900:	63da      	str	r2, [r3, #60]	; 0x3c
		  //setzt Pulsweite für grüne LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8000902:	4b02      	ldr	r3, [pc, #8]	; (800090c <main+0x18c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 800090a:	e79f      	b.n	800084c <main+0xcc>
 800090c:	20000074 	.word	0x20000074
 8000910:	000001ff 	.word	0x000001ff
 8000914:	00007fff 	.word	0x00007fff
 8000918:	ffff8000 	.word	0xffff8000

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b097      	sub	sp, #92	; 0x5c
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	2428      	movs	r4, #40	; 0x28
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2330      	movs	r3, #48	; 0x30
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f002 fec5 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	2318      	movs	r3, #24
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	2310      	movs	r3, #16
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f002 febd 	bl	80036bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 feb6 	bl	80036bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2210      	movs	r2, #16
 8000962:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	22a0      	movs	r2, #160	; 0xa0
 8000974:	0392      	lsls	r2, r2, #14
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	187b      	adds	r3, r7, r1
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fabb 	bl	8001efc <HAL_RCC_OscConfig>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098a:	f000 f955 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	2118      	movs	r1, #24
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2207      	movs	r2, #7
 8000994:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2101      	movs	r1, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fdbf 	bl	8002530 <HAL_RCC_ClockConfig>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009b6:	f000 f93f 	bl	8000c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2220      	movs	r2, #32
 80009be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 fee3 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009d2:	f000 f931 	bl	8000c38 <Error_Handler>
  }
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b017      	add	sp, #92	; 0x5c
 80009dc:	bd90      	pop	{r4, r7, pc}
	...

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fd37 	bl	8001490 <HAL_I2C_Init>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 f907 	bl	8000c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 f9cc 	bl	8001dcc <HAL_I2CEx_ConfigAnalogFilter>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 f8fe 	bl	8000c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 fa0f 	bl	8001e64 <HAL_I2CEx_ConfigDigitalFilter>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 f8f5 	bl	8000c38 <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000028 	.word	0x20000028
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	0000020b 	.word	0x0000020b

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	2328      	movs	r3, #40	; 0x28
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f002 fe23 	bl	80036bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a76:	2320      	movs	r3, #32
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f002 fe1b 	bl	80036bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	231c      	movs	r3, #28
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 fe14 	bl	80036bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <MX_TIM3_Init+0x114>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000aa8:	4a33      	ldr	r2, [pc, #204]	; (8000b78 <MX_TIM3_Init+0x118>)
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 ff48 	bl	8002950 <HAL_TIM_Base_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ac4:	f000 f8b8 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	2128      	movs	r1, #40	; 0x28
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0152      	lsls	r2, r2, #5
 8000ad0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 f95f 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ae2:	f000 f8a9 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 ff81 	bl	80029f0 <HAL_TIM_PWM_Init>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000af2:	f000 f8a1 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2120      	movs	r1, #32
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b04:	187a      	adds	r2, r7, r1
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fd54 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b14:	f000 f890 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2260      	movs	r2, #96	; 0x60
 8000b1c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2232      	movs	r2, #50	; 0x32
 8000b22:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000b34:	2208      	movs	r2, #8
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 f86a 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b40:	f000 f87a 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	22fa      	movs	r2, #250	; 0xfa
 8000b48:	0052      	lsls	r2, r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4c:	1d39      	adds	r1, r7, #4
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000b50:	220c      	movs	r2, #12
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f85c 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000b5c:	f000 f86c 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <MX_TIM3_Init+0x110>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f8fe 	bl	8000d64 <HAL_TIM_MspPostInit>

}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b00e      	add	sp, #56	; 0x38
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000074 	.word	0x20000074
 8000b74:	40000400 	.word	0x40000400
 8000b78:	000001ff 	.word	0x000001ff

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	240c      	movs	r4, #12
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	0018      	movs	r0, r3
 8000b88:	2314      	movs	r3, #20
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f002 fd95 	bl	80036bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000ba2:	695a      	ldr	r2, [r3, #20]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0309      	lsls	r1, r1, #12
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	031b      	lsls	r3, r3, #12
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	02c9      	lsls	r1, r1, #11
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_GPIO_Init+0xa4>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	02db      	lsls	r3, r3, #11
 8000be0:	4013      	ands	r3, r2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2288      	movs	r2, #136	; 0x88
 8000bf0:	0352      	lsls	r2, r2, #13
 8000bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	193a      	adds	r2, r7, r4
 8000bfc:	2390      	movs	r3, #144	; 0x90
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fab8 	bl	8001178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f000 fa81 	bl	8001114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c12:	2005      	movs	r0, #5
 8000c14:	f000 fa93 	bl	800113e <HAL_NVIC_EnableIRQ>

}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b009      	add	sp, #36	; 0x24
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* Interrupt Funktionen */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
    {
   // HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_Channel_3);
    //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // Toggle The Output (LED) Pin
    }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	699a      	ldr	r2, [r3, #24]
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_MspInit+0x44>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	619a      	str	r2, [r3, #24]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x44>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x44>)
 8000c64:	69da      	ldr	r2, [r3, #28]
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x44>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	0549      	lsls	r1, r1, #21
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	61da      	str	r2, [r3, #28]
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_MspInit+0x44>)
 8000c72:	69da      	ldr	r2, [r3, #28]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	055b      	lsls	r3, r3, #21
 8000c78:	4013      	ands	r3, r2
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2414      	movs	r4, #20
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f002 fd0c 	bl	80036bc <memset>
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <HAL_I2C_MspInit+0x90>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d131      	bne.n	8000d12 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	02db      	lsls	r3, r3, #11
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cca:	0021      	movs	r1, r4
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	22c0      	movs	r2, #192	; 0xc0
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2212      	movs	r2, #18
 8000cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_I2C_MspInit+0x98>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f000 fa41 	bl	8001178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0389      	lsls	r1, r1, #14
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_I2C_MspInit+0x94>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	039b      	lsls	r3, r3, #14
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b00b      	add	sp, #44	; 0x2c
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_Base_MspInit+0x34>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10b      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d40:	2102      	movs	r1, #2
 8000d42:	430a      	orrs	r2, r1
 8000d44:	61da      	str	r2, [r3, #28]
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	240c      	movs	r4, #12
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f002 fca0 	bl	80036bc <memset>
  if(htim->Instance==TIM3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HAL_TIM_MspPostInit+0xa0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d13a      	bne.n	8000dfc <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_TIM_MspPostInit+0xa4>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_TIM_MspPostInit+0xa4>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0309      	lsls	r1, r1, #12
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_TIM_MspPostInit+0xa4>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	031b      	lsls	r3, r3, #12
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_Blue_LED_Pin;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2202      	movs	r2, #2
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH3_Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_TIM_MspPostInit+0xa8>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f000 f9d5 	bl	8001178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH4_Green_LED_Pin;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH4_Green_LED_GPIO_Port, &GPIO_InitStruct);
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_TIM_MspPostInit+0xa8>)
 8000df4:	0019      	movs	r1, r3
 8000df6:	0010      	movs	r0, r2
 8000df8:	f000 f9be 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b009      	add	sp, #36	; 0x24
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	40000400 	.word	0x40000400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f882 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fb08 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e82:	f7ff ffe4 	bl	8000e4e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e86:	f002 fbf5 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fc79 	bl	8000780 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e9c:	0800378c 	.word	0x0800378c
  ldr r2, =_sbss
 8000ea0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ea4:	200000c0 	.word	0x200000c0

08000ea8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_COMP_IRQHandler>
	...

08000eac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_Init+0x24>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_Init+0x24>)
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f809 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff febf 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_InitTick+0x5c>)
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_InitTick+0x60>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	23fa      	movs	r3, #250	; 0xfa
 8000ee8:	0098      	lsls	r0, r3, #2
 8000eea:	f7ff f90d 	bl	8000108 <__udivsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	0020      	movs	r0, r4
 8000ef4:	f7ff f908 	bl	8000108 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f92f 	bl	800115e <HAL_SYSTICK_Config>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e00f      	b.n	8000f28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d80b      	bhi.n	8000f26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2301      	movs	r3, #1
 8000f12:	425b      	negs	r3, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 f8fc 	bl	8001114 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_InitTick+0x64>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	18d2      	adds	r2, r2, r3
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200000bc 	.word	0x200000bc

08000f60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	200000bc 	.word	0x200000bc

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001a      	movs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	189b      	adds	r3, r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fce:	d809      	bhi.n	8000fe4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	231f      	movs	r3, #31
 8000fd8:	401a      	ands	r2, r3
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_EnableIRQ+0x30>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4091      	lsls	r1, r2
 8000fe0:	000a      	movs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
  }
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b7f      	cmp	r3, #127	; 0x7f
 8001004:	d828      	bhi.n	8001058 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <__NVIC_SetPriority+0xd4>)
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	33c0      	adds	r3, #192	; 0xc0
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	589b      	ldr	r3, [r3, r2]
 8001016:	1dfa      	adds	r2, r7, #7
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	0011      	movs	r1, r2
 800101c:	2203      	movs	r2, #3
 800101e:	400a      	ands	r2, r1
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	21ff      	movs	r1, #255	; 0xff
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	43d2      	mvns	r2, r2
 800102a:	401a      	ands	r2, r3
 800102c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	019b      	lsls	r3, r3, #6
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	401a      	ands	r2, r3
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	2303      	movs	r3, #3
 800103e:	4003      	ands	r3, r0
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001044:	481f      	ldr	r0, [pc, #124]	; (80010c4 <__NVIC_SetPriority+0xd4>)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b25b      	sxtb	r3, r3
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	430a      	orrs	r2, r1
 8001050:	33c0      	adds	r3, #192	; 0xc0
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001056:	e031      	b.n	80010bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <__NVIC_SetPriority+0xd8>)
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	0019      	movs	r1, r3
 8001060:	230f      	movs	r3, #15
 8001062:	400b      	ands	r3, r1
 8001064:	3b08      	subs	r3, #8
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3306      	adds	r3, #6
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	1dfa      	adds	r2, r7, #7
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	0011      	movs	r1, r2
 8001078:	2203      	movs	r2, #3
 800107a:	400a      	ands	r2, r1
 800107c:	00d2      	lsls	r2, r2, #3
 800107e:	21ff      	movs	r1, #255	; 0xff
 8001080:	4091      	lsls	r1, r2
 8001082:	000a      	movs	r2, r1
 8001084:	43d2      	mvns	r2, r2
 8001086:	401a      	ands	r2, r3
 8001088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	019b      	lsls	r3, r3, #6
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	401a      	ands	r2, r3
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	0018      	movs	r0, r3
 8001098:	2303      	movs	r3, #3
 800109a:	4003      	ands	r3, r0
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <__NVIC_SetPriority+0xd8>)
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	001c      	movs	r4, r3
 80010a8:	230f      	movs	r3, #15
 80010aa:	4023      	ands	r3, r4
 80010ac:	3b08      	subs	r3, #8
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	430a      	orrs	r2, r1
 80010b2:	3306      	adds	r3, #6
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	18c3      	adds	r3, r0, r3
 80010b8:	3304      	adds	r3, #4
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	045b      	lsls	r3, r3, #17
 80010dc:	429a      	cmp	r2, r3
 80010de:	d301      	bcc.n	80010e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e0:	2301      	movs	r3, #1
 80010e2:	e010      	b.n	8001106 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <SysTick_Config+0x44>)
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	3a01      	subs	r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ec:	2301      	movs	r3, #1
 80010ee:	425b      	negs	r3, r3
 80010f0:	2103      	movs	r1, #3
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff ff7c 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x44>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x44>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	210f      	movs	r1, #15
 8001120:	187b      	adds	r3, r7, r1
 8001122:	1c02      	adds	r2, r0, #0
 8001124:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	187b      	adds	r3, r7, r1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b25b      	sxtb	r3, r3
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	0002      	movs	r2, r0
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b25b      	sxtb	r3, r3
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ff33 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ffaf 	bl	80010cc <SysTick_Config>
 800116e:	0003      	movs	r3, r0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	e14f      	b.n	8001428 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2101      	movs	r1, #1
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4091      	lsls	r1, r2
 8001192:	000a      	movs	r2, r1
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d100      	bne.n	80011a0 <HAL_GPIO_Init+0x28>
 800119e:	e140      	b.n	8001422 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d005      	beq.n	80011b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d130      	bne.n	800121a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	43da      	mvns	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	409a      	lsls	r2, r3
 80011da:	0013      	movs	r3, r2
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	2201      	movs	r2, #1
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	4013      	ands	r3, r2
 8001222:	2b03      	cmp	r3, #3
 8001224:	d017      	beq.n	8001256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	4013      	ands	r3, r2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d123      	bne.n	80012aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	58d3      	ldr	r3, [r2, r3]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2207      	movs	r2, #7
 8001274:	4013      	ands	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2107      	movs	r1, #7
 800128e:	400b      	ands	r3, r1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	6939      	ldr	r1, [r7, #16]
 80012a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	401a      	ands	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	23c0      	movs	r3, #192	; 0xc0
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d100      	bne.n	80012ec <HAL_GPIO_Init+0x174>
 80012ea:	e09a      	b.n	8001422 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x2c8>)
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_GPIO_Init+0x2c8>)
 80012f2:	2101      	movs	r1, #1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x2c8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	589b      	ldr	r3, [r3, r2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	2390      	movs	r3, #144	; 0x90
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	429a      	cmp	r2, r3
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x1e2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a44      	ldr	r2, [pc, #272]	; (8001448 <HAL_GPIO_Init+0x2d0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x1de>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_GPIO_Init+0x2d4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x1da>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a42      	ldr	r2, [pc, #264]	; (8001450 <HAL_GPIO_Init+0x2d8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x1d6>
 800134a:	2303      	movs	r3, #3
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x1e4>
 800134e:	2305      	movs	r3, #5
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x1e4>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x1e4>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x1e4>
 800135a:	2300      	movs	r3, #0
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	2103      	movs	r1, #3
 8001360:	400a      	ands	r2, r1
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	; (8001444 <HAL_GPIO_Init+0x2cc>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	4013      	ands	r3, r2
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	035b      	lsls	r3, r3, #13
 80013e6:	4013      	ands	r3, r2
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	4013      	ands	r3, r2
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_GPIO_Init+0x2dc>)
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	40da      	lsrs	r2, r3
 8001430:	1e13      	subs	r3, r2, #0
 8001432:	d000      	beq.n	8001436 <HAL_GPIO_Init+0x2be>
 8001434:	e6a8      	b.n	8001188 <HAL_GPIO_Init+0x10>
  } 
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b006      	add	sp, #24
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	48000400 	.word	0x48000400
 800144c:	48000800 	.word	0x48000800
 8001450:	48000c00 	.word	0x48000c00
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	0002      	movs	r2, r0
 8001460:	1dbb      	adds	r3, r7, #6
 8001462:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	1dba      	adds	r2, r7, #6
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	4013      	ands	r3, r2
 800146e:	d008      	beq.n	8001482 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001472:	1dba      	adds	r2, r7, #6
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fbd1 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e082      	b.n	80015a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2241      	movs	r2, #65	; 0x41
 80014a6:	5c9b      	ldrb	r3, [r3, r2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fbe7 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2241      	movs	r2, #65	; 0x41
 80014c2:	2124      	movs	r1, #36	; 0x24
 80014c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	438a      	bics	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <HAL_I2C_Init+0x120>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4931      	ldr	r1, [pc, #196]	; (80015b4 <HAL_I2C_Init+0x124>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0209      	lsls	r1, r1, #8
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e007      	b.n	800151e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2184      	movs	r1, #132	; 0x84
 8001518:	0209      	lsls	r1, r1, #8
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d104      	bne.n	8001530 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	491f      	ldr	r1, [pc, #124]	; (80015b8 <HAL_I2C_Init+0x128>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	491a      	ldr	r1, [pc, #104]	; (80015b4 <HAL_I2C_Init+0x124>)
 800154c:	400a      	ands	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	431a      	orrs	r2, r3
 800155a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69d9      	ldr	r1, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2241      	movs	r2, #65	; 0x41
 8001594:	2120      	movs	r1, #32
 8001596:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2242      	movs	r2, #66	; 0x42
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	f0ffffff 	.word	0xf0ffffff
 80015b4:	ffff7fff 	.word	0xffff7fff
 80015b8:	02008000 	.word	0x02008000

080015bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	0008      	movs	r0, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	0019      	movs	r1, r3
 80015ca:	230a      	movs	r3, #10
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	1c02      	adds	r2, r0, #0
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	2308      	movs	r3, #8
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	1c0a      	adds	r2, r1, #0
 80015d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2241      	movs	r2, #65	; 0x41
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d000      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x2c>
 80015e6:	e0e7      	b.n	80017b8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_Master_Transmit+0x3a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e0e1      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015fe:	f7ff fcaf 	bl	8000f60 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	0219      	lsls	r1, r3, #8
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2319      	movs	r3, #25
 8001612:	2201      	movs	r2, #1
 8001614:	f000 fa04 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0cc      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2241      	movs	r2, #65	; 0x41
 8001624:	2121      	movs	r1, #33	; 0x21
 8001626:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2242      	movs	r2, #66	; 0x42
 800162c:	2110      	movs	r1, #16
 800162e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2208      	movs	r2, #8
 8001640:	18ba      	adds	r2, r7, r2
 8001642:	8812      	ldrh	r2, [r2, #0]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d911      	bls.n	800167a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	b2da      	uxtb	r2, r3
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	045c      	lsls	r4, r3, #17
 8001666:	230a      	movs	r3, #10
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	8819      	ldrh	r1, [r3, #0]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_I2C_Master_Transmit+0x208>)
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	0023      	movs	r3, r4
 8001674:	f000 fb74 	bl	8001d60 <I2C_TransferConfig>
 8001678:	e075      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049c      	lsls	r4, r3, #18
 800168e:	230a      	movs	r3, #10
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	8819      	ldrh	r1, [r3, #0]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_I2C_Master_Transmit+0x208>)
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	0023      	movs	r3, r4
 800169c:	f000 fb60 	bl	8001d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016a0:	e061      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 f9f8 	bl	8001a9e <I2C_WaitOnTXISFlagUntilTimeout>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e081      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	3b01      	subs	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03a      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d136      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	0013      	movs	r3, r2
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	f000 f98b 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e053      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2bff      	cmp	r3, #255	; 0xff
 800171a:	d911      	bls.n	8001740 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2da      	uxtb	r2, r3
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	045c      	lsls	r4, r3, #17
 800172c:	230a      	movs	r3, #10
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	8819      	ldrh	r1, [r3, #0]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	0023      	movs	r3, r4
 800173a:	f000 fb11 	bl	8001d60 <I2C_TransferConfig>
 800173e:	e012      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	049c      	lsls	r4, r3, #18
 8001754:	230a      	movs	r3, #10
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	8819      	ldrh	r1, [r3, #0]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	0023      	movs	r3, r4
 8001762:	f000 fafd 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d198      	bne.n	80016a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f9d0 	bl	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e01a      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	490c      	ldr	r1, [pc, #48]	; (80017c8 <HAL_I2C_Master_Transmit+0x20c>)
 8001798:	400a      	ands	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2241      	movs	r2, #65	; 0x41
 80017a0:	2120      	movs	r1, #32
 80017a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2242      	movs	r2, #66	; 0x42
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
  }
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b007      	add	sp, #28
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	80002000 	.word	0x80002000
 80017c8:	fe00e800 	.word	0xfe00e800

080017cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	0008      	movs	r0, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	0019      	movs	r1, r3
 80017da:	230a      	movs	r3, #10
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	1c02      	adds	r2, r0, #0
 80017e0:	801a      	strh	r2, [r3, #0]
 80017e2:	2308      	movs	r3, #8
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	1c0a      	adds	r2, r1, #0
 80017e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2241      	movs	r2, #65	; 0x41
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d000      	beq.n	80017f8 <HAL_I2C_Master_Receive+0x2c>
 80017f6:	e0e8      	b.n	80019ca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Master_Receive+0x3a>
 8001802:	2302      	movs	r3, #2
 8001804:	e0e2      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800180e:	f7ff fba7 	bl	8000f60 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	0219      	lsls	r1, r3, #8
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	f000 f8fc 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cd      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2241      	movs	r2, #65	; 0x41
 8001834:	2122      	movs	r1, #34	; 0x22
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2242      	movs	r2, #66	; 0x42
 800183c:	2110      	movs	r1, #16
 800183e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2208      	movs	r2, #8
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d911      	bls.n	800188a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	22ff      	movs	r2, #255	; 0xff
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	045c      	lsls	r4, r3, #17
 8001876:	230a      	movs	r3, #10
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	8819      	ldrh	r1, [r3, #0]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_I2C_Master_Receive+0x208>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	0023      	movs	r3, r4
 8001884:	f000 fa6c 	bl	8001d60 <I2C_TransferConfig>
 8001888:	e076      	b.n	8001978 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049c      	lsls	r4, r3, #18
 800189e:	230a      	movs	r3, #10
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	8819      	ldrh	r1, [r3, #0]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <HAL_I2C_Master_Receive+0x208>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	0023      	movs	r3, r4
 80018ac:	f000 fa58 	bl	8001d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018b0:	e062      	b.n	8001978 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f96b 	bl	8001b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e082      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03a      	beq.n	8001978 <HAL_I2C_Master_Receive+0x1ac>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d136      	bne.n	8001978 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	0013      	movs	r3, r2
 8001914:	2200      	movs	r2, #0
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	f000 f882 	bl	8001a20 <I2C_WaitOnFlagUntilTimeout>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e053      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d911      	bls.n	8001952 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	22ff      	movs	r2, #255	; 0xff
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	045c      	lsls	r4, r3, #17
 800193e:	230a      	movs	r3, #10
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	8819      	ldrh	r1, [r3, #0]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	2300      	movs	r3, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	0023      	movs	r3, r4
 800194c:	f000 fa08 	bl	8001d60 <I2C_TransferConfig>
 8001950:	e012      	b.n	8001978 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	b2da      	uxtb	r2, r3
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	049c      	lsls	r4, r3, #18
 8001966:	230a      	movs	r3, #10
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	8819      	ldrh	r1, [r3, #0]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	0023      	movs	r3, r4
 8001974:	f000 f9f4 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d197      	bne.n	80018b2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 f8c7 	bl	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e01a      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2220      	movs	r2, #32
 800199c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	490b      	ldr	r1, [pc, #44]	; (80019d8 <HAL_I2C_Master_Receive+0x20c>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2241      	movs	r2, #65	; 0x41
 80019b2:	2120      	movs	r1, #32
 80019b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2242      	movs	r2, #66	; 0x42
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2100      	movs	r1, #0
 80019c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b007      	add	sp, #28
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	80002400 	.word	0x80002400
 80019d8:	fe00e800 	.word	0xfe00e800

080019dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	619a      	str	r2, [r3, #24]
  }
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a30:	e021      	b.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	d01e      	beq.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7ff fa92 	bl	8000f60 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d113      	bne.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	2220      	movs	r2, #32
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2241      	movs	r2, #65	; 0x41
 8001a5e:	2120      	movs	r1, #32
 8001a60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2242      	movs	r2, #66	; 0x42
 8001a66:	2100      	movs	r1, #0
 8001a68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	2100      	movs	r1, #0
 8001a70:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	425a      	negs	r2, r3
 8001a86:	4153      	adcs	r3, r2
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d0ce      	beq.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aaa:	e02b      	b.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 f8da 	bl	8001c6c <I2C_IsAcknowledgeFailed>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e029      	b.n	8001b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	d01e      	beq.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff fa4b 	bl	8000f60 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d113      	bne.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2241      	movs	r2, #65	; 0x41
 8001aec:	2120      	movs	r1, #32
 8001aee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2242      	movs	r2, #66	; 0x42
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2240      	movs	r2, #64	; 0x40
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e007      	b.n	8001b14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d1cc      	bne.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b28:	e028      	b.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 f89b 	bl	8001c6c <I2C_IsAcknowledgeFailed>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e026      	b.n	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff fa0f 	bl	8000f60 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d113      	bne.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	2220      	movs	r2, #32
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2241      	movs	r2, #65	; 0x41
 8001b64:	2120      	movs	r1, #32
 8001b66:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2242      	movs	r2, #66	; 0x42
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2240      	movs	r2, #64	; 0x40
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e007      	b.n	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d1cf      	bne.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ba0:	e055      	b.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f85f 	bl	8001c6c <I2C_IsAcknowledgeFailed>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e053      	b.n	8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d129      	bne.n	8001c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d105      	bne.n	8001bde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e03f      	b.n	8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2220      	movs	r2, #32
 8001be4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	491d      	ldr	r1, [pc, #116]	; (8001c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	2120      	movs	r1, #32
 8001c02:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2242      	movs	r2, #66	; 0x42
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e022      	b.n	8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c18:	f7ff f9a2 	bl	8000f60 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d302      	bcc.n	8001c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	2220      	movs	r2, #32
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2241      	movs	r2, #65	; 0x41
 8001c3e:	2120      	movs	r1, #32
 8001c40:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2240      	movs	r2, #64	; 0x40
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e007      	b.n	8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2204      	movs	r2, #4
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d1a2      	bne.n	8001ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	fe00e800 	.word	0xfe00e800

08001c6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2210      	movs	r2, #16
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d164      	bne.n	8001d50 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	049b      	lsls	r3, r3, #18
 8001c90:	401a      	ands	r2, r3
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	049b      	lsls	r3, r3, #18
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d02b      	beq.n	8001cf2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	01c9      	lsls	r1, r1, #7
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	e021      	b.n	8001cf2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	d01e      	beq.n	8001cf2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb4:	f7ff f954 	bl	8000f60 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d302      	bcc.n	8001cca <I2C_IsAcknowledgeFailed+0x5e>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d113      	bne.n	8001cf2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	2220      	movs	r2, #32
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2241      	movs	r2, #65	; 0x41
 8001cda:	2120      	movs	r1, #32
 8001cdc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2242      	movs	r2, #66	; 0x42
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e02f      	b.n	8001d52 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d1d6      	bne.n	8001cae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fe62 	bl	80019dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	490e      	ldr	r1, [pc, #56]	; (8001d5c <I2C_IsAcknowledgeFailed+0xf0>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2241      	movs	r2, #65	; 0x41
 8001d38:	2120      	movs	r1, #32
 8001d3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2242      	movs	r2, #66	; 0x42
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	fe00e800 	.word	0xfe00e800

08001d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	0008      	movs	r0, r1
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	240a      	movs	r4, #10
 8001d70:	193b      	adds	r3, r7, r4
 8001d72:	1c02      	adds	r2, r0, #0
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	2009      	movs	r0, #9
 8001d78:	183b      	adds	r3, r7, r0
 8001d7a:	1c0a      	adds	r2, r1, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	6a3a      	ldr	r2, [r7, #32]
 8001d86:	0d51      	lsrs	r1, r2, #21
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	00d2      	lsls	r2, r2, #3
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <I2C_TransferConfig+0x68>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	43d2      	mvns	r2, r2
 8001d94:	401a      	ands	r2, r3
 8001d96:	0011      	movs	r1, r2
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	059b      	lsls	r3, r3, #22
 8001d9e:	0d9a      	lsrs	r2, r3, #22
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	0418      	lsls	r0, r3, #16
 8001da6:	23ff      	movs	r3, #255	; 0xff
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	4003      	ands	r3, r0
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b005      	add	sp, #20
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	03ff63ff 	.word	0x03ff63ff

08001dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2241      	movs	r2, #65	; 0x41
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d138      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	5c9b      	ldrb	r3, [r3, r2]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e032      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	2101      	movs	r1, #1
 8001df6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2241      	movs	r2, #65	; 0x41
 8001dfc:	2124      	movs	r1, #36	; 0x24
 8001dfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4911      	ldr	r1, [pc, #68]	; (8001e60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	; 0x41
 8001e44:	2120      	movs	r1, #32
 8001e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	ffffefff 	.word	0xffffefff

08001e64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2241      	movs	r2, #65	; 0x41
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d139      	bne.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2240      	movs	r2, #64	; 0x40
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e033      	b.n	8001ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2241      	movs	r2, #65	; 0x41
 8001e94:	2124      	movs	r1, #36	; 0x24
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2241      	movs	r2, #65	; 0x41
 8001ede:	2120      	movs	r1, #32
 8001ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
  }
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	fffff0ff 	.word	0xfffff0ff

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e301      	b.n	8002512 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x1e>
 8001f18:	e08d      	b.n	8002036 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f1a:	4bc3      	ldr	r3, [pc, #780]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00e      	beq.n	8001f44 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f26:	4bc0      	ldr	r3, [pc, #768]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x64>
 8001f32:	4bbd      	ldr	r3, [pc, #756]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4bb8      	ldr	r3, [pc, #736]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x56>
 8001f50:	e070      	b.n	8002034 <HAL_RCC_OscConfig+0x138>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d000      	beq.n	8001f5c <HAL_RCC_OscConfig+0x60>
 8001f5a:	e06b      	b.n	8002034 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2d8      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x7c>
 8001f68:	4baf      	ldr	r3, [pc, #700]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4bae      	ldr	r3, [pc, #696]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0249      	lsls	r1, r1, #9
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e02f      	b.n	8001fd8 <HAL_RCC_OscConfig+0xdc>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x9e>
 8001f80:	4ba9      	ldr	r3, [pc, #676]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4ba8      	ldr	r3, [pc, #672]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	49a9      	ldr	r1, [pc, #676]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4ba6      	ldr	r3, [pc, #664]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4ba5      	ldr	r3, [pc, #660]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	49a7      	ldr	r1, [pc, #668]	; (8002230 <HAL_RCC_OscConfig+0x334>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e01e      	b.n	8001fd8 <HAL_RCC_OscConfig+0xdc>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xc4>
 8001fa2:	4ba1      	ldr	r3, [pc, #644]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	02c9      	lsls	r1, r1, #11
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b9c      	ldr	r3, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0249      	lsls	r1, r1, #9
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xdc>
 8001fc0:	4b99      	ldr	r3, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b98      	ldr	r3, [pc, #608]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	4999      	ldr	r1, [pc, #612]	; (800222c <HAL_RCC_OscConfig+0x330>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4b96      	ldr	r3, [pc, #600]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b95      	ldr	r3, [pc, #596]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	4997      	ldr	r1, [pc, #604]	; (8002230 <HAL_RCC_OscConfig+0x334>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d014      	beq.n	800200a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ffbe 	bl	8000f60 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fea:	f7fe ffb9 	bl	8000f60 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	; 0x64
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e28a      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0xee>
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe ffa9 	bl	8000f60 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe ffa4 	bl	8000f60 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e275      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b80      	ldr	r3, [pc, #512]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	4013      	ands	r3, r2
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x118>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x146>
 8002040:	e069      	b.n	8002116 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002042:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	220c      	movs	r2, #12
 8002048:	4013      	ands	r3, r2
 800204a:	d00b      	beq.n	8002064 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	220c      	movs	r2, #12
 8002052:	4013      	ands	r3, r2
 8002054:	2b08      	cmp	r3, #8
 8002056:	d11c      	bne.n	8002092 <HAL_RCC_OscConfig+0x196>
 8002058:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	4013      	ands	r3, r2
 8002062:	d116      	bne.n	8002092 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002064:	4b70      	ldr	r3, [pc, #448]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2202      	movs	r2, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e24b      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b6b      	ldr	r3, [pc, #428]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	22f8      	movs	r2, #248	; 0xf8
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	00da      	lsls	r2, r3, #3
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002090:	e041      	b.n	8002116 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe ff5b 	bl	8000f60 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe ff56 	bl	8000f60 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e227      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0f1      	beq.n	80020b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22f8      	movs	r2, #248	; 0xf8
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00da      	lsls	r2, r3, #3
 80020dc:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e018      	b.n	8002116 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	438a      	bics	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff36 	bl	8000f60 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7fe ff31 	bl	8000f60 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e202      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d1f1      	bne.n	80020fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2208      	movs	r2, #8
 800211c:	4013      	ands	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d019      	beq.n	800215c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800212a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800212e:	2101      	movs	r1, #1
 8002130:	430a      	orrs	r2, r1
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7fe ff14 	bl	8000f60 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213e:	f7fe ff0f 	bl	8000f60 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1e0      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d0f1      	beq.n	800213e <HAL_RCC_OscConfig+0x242>
 800215a:	e018      	b.n	800218e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800215e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe fefa 	bl	8000f60 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe fef5 	bl	8000f60 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1c6      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d1f1      	bne.n	8002172 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <HAL_RCC_OscConfig+0x29e>
 8002198:	e0b4      	b.n	8002304 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219a:	201f      	movs	r0, #31
 800219c:	183b      	adds	r3, r7, r0
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	4013      	ands	r3, r2
 80021ac:	d110      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0549      	lsls	r1, r1, #21
 80021b8:	430a      	orrs	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d11a      	bne.n	8002212 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe feb9 	bl	8000f60 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe feb4 	bl	8000f60 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e185      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x338>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10e      	bne.n	8002238 <HAL_RCC_OscConfig+0x33c>
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_OscConfig+0x32c>)
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	621a      	str	r2, [r3, #32]
 8002226:	e035      	b.n	8002294 <HAL_RCC_OscConfig+0x398>
 8002228:	40021000 	.word	0x40021000
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	40007000 	.word	0x40007000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x35e>
 8002240:	4bb6      	ldr	r3, [pc, #728]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	4bb5      	ldr	r3, [pc, #724]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002246:	2101      	movs	r1, #1
 8002248:	438a      	bics	r2, r1
 800224a:	621a      	str	r2, [r3, #32]
 800224c:	4bb3      	ldr	r3, [pc, #716]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	4bb2      	ldr	r3, [pc, #712]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002252:	2104      	movs	r1, #4
 8002254:	438a      	bics	r2, r1
 8002256:	621a      	str	r2, [r3, #32]
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x398>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x380>
 8002262:	4bae      	ldr	r3, [pc, #696]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4bad      	ldr	r3, [pc, #692]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002268:	2104      	movs	r1, #4
 800226a:	430a      	orrs	r2, r1
 800226c:	621a      	str	r2, [r3, #32]
 800226e:	4bab      	ldr	r3, [pc, #684]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4baa      	ldr	r3, [pc, #680]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002274:	2101      	movs	r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	621a      	str	r2, [r3, #32]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x398>
 800227c:	4ba7      	ldr	r3, [pc, #668]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	4ba6      	ldr	r3, [pc, #664]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002282:	2101      	movs	r1, #1
 8002284:	438a      	bics	r2, r1
 8002286:	621a      	str	r2, [r3, #32]
 8002288:	4ba4      	ldr	r3, [pc, #656]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	4ba3      	ldr	r3, [pc, #652]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800228e:	2104      	movs	r1, #4
 8002290:	438a      	bics	r2, r1
 8002292:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d014      	beq.n	80022c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fe60 	bl	8000f60 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e009      	b.n	80022ba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fe5b 	bl	8000f60 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	4a9b      	ldr	r2, [pc, #620]	; (8002520 <HAL_RCC_OscConfig+0x624>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e12b      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	4b98      	ldr	r3, [pc, #608]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2202      	movs	r2, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3aa>
 80022c4:	e013      	b.n	80022ee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe4b 	bl	8000f60 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	e009      	b.n	80022e4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe fe46 	bl	8000f60 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	4a91      	ldr	r2, [pc, #580]	; (8002520 <HAL_RCC_OscConfig+0x624>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e116      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	4b8d      	ldr	r3, [pc, #564]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	4b87      	ldr	r3, [pc, #540]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80022fe:	4989      	ldr	r1, [pc, #548]	; (8002524 <HAL_RCC_OscConfig+0x628>)
 8002300:	400a      	ands	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	4013      	ands	r3, r2
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12a      	bne.n	800236c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231a:	4b80      	ldr	r3, [pc, #512]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800231c:	2104      	movs	r1, #4
 800231e:	430a      	orrs	r2, r1
 8002320:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002322:	4b7e      	ldr	r3, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002326:	4b7d      	ldr	r3, [pc, #500]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002328:	2101      	movs	r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fe17 	bl	8000f60 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002338:	f7fe fe12 	bl	8000f60 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0e3      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800234a:	4b74      	ldr	r3, [pc, #464]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d0f1      	beq.n	8002338 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	22f8      	movs	r2, #248	; 0xf8
 800235a:	4393      	bics	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	00da      	lsls	r2, r3, #3
 8002364:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002366:	430a      	orrs	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
 800236a:	e034      	b.n	80023d6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	3305      	adds	r3, #5
 8002372:	d111      	bne.n	8002398 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002374:	4b69      	ldr	r3, [pc, #420]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800237a:	2104      	movs	r1, #4
 800237c:	438a      	bics	r2, r1
 800237e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	22f8      	movs	r2, #248	; 0xf8
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	00da      	lsls	r2, r3, #3
 8002390:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
 8002396:	e01e      	b.n	80023d6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002398:	4b60      	ldr	r3, [pc, #384]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800239a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239c:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800239e:	2104      	movs	r1, #4
 80023a0:	430a      	orrs	r2, r1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a8:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe fdd6 	bl	8000f60 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ba:	f7fe fdd1 	bl	8000f60 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0a2      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f1      	bne.n	80023ba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4e4>
 80023de:	e097      	b.n	8002510 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	220c      	movs	r2, #12
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x4f2>
 80023ec:	e06b      	b.n	80024c6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d14c      	bne.n	8002490 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80023fc:	494a      	ldr	r1, [pc, #296]	; (8002528 <HAL_RCC_OscConfig+0x62c>)
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fdad 	bl	8000f60 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fda8 	bl	8000f60 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e079      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	049b      	lsls	r3, r3, #18
 8002426:	4013      	ands	r3, r2
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	220f      	movs	r2, #15
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800243a:	430a      	orrs	r2, r1
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_RCC_OscConfig+0x630>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	431a      	orrs	r2, r3
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_RCC_OscConfig+0x620>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0449      	lsls	r1, r1, #17
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fd7b 	bl	8000f60 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fd76 	bl	8000f60 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e047      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	049b      	lsls	r3, r3, #18
 800248a:	4013      	ands	r3, r2
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x574>
 800248e:	e03f      	b.n	8002510 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_OscConfig+0x620>)
 8002496:	4924      	ldr	r1, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x62c>)
 8002498:	400a      	ands	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fd60 	bl	8000f60 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a6:	f7fe fd5b 	bl	8000f60 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e02c      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	049b      	lsls	r3, r3, #18
 80024c0:	4013      	ands	r3, r2
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5aa>
 80024c4:	e024      	b.n	8002510 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01f      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x620>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10e      	bne.n	800250c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	220f      	movs	r2, #15
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	23f0      	movs	r3, #240	; 0xf0
 8002500:	039b      	lsls	r3, r3, #14
 8002502:	401a      	ands	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b008      	add	sp, #32
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000
 8002520:	00001388 	.word	0x00001388
 8002524:	efffffff 	.word	0xefffffff
 8002528:	feffffff 	.word	0xfeffffff
 800252c:	ffc2ffff 	.word	0xffc2ffff

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b3      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d911      	bls.n	8002576 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	4393      	bics	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e09a      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d015      	beq.n	80025ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2204      	movs	r2, #4
 8002586:	4013      	ands	r3, r2
 8002588:	d006      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002590:	21e0      	movs	r1, #224	; 0xe0
 8002592:	00c9      	lsls	r1, r1, #3
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	22f0      	movs	r2, #240	; 0xf0
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d040      	beq.n	8002638 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	4013      	ands	r3, r2
 80025c8:	d114      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06e      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	049b      	lsls	r3, r3, #18
 80025de:	4013      	ands	r3, r2
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e062      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e05b      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe fcaa 	bl	8000f60 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002610:	e009      	b.n	8002626 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7fe fca5 	bl	8000f60 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_RCC_ClockConfig+0x18c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e042      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	220c      	movs	r2, #12
 800262c:	401a      	ands	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1ec      	bne.n	8002612 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d211      	bcs.n	800266a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	4393      	bics	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x184>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e020      	b.n	80026ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_RCC_ClockConfig+0x190>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002688:	f000 f820 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268c:	0001      	movs	r1, r0
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x188>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	220f      	movs	r2, #15
 8002696:	4013      	ands	r3, r2
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x194>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	000a      	movs	r2, r1
 800269e:	40da      	lsrs	r2, r3
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x198>)
 80026a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fc15 	bl	8000ed4 <HAL_InitTick>
  
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	00001388 	.word	0x00001388
 80026c0:	fffff8ff 	.word	0xfffff8ff
 80026c4:	08003774 	.word	0x08003774
 80026c8:	20000000 	.word	0x20000000

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b08f      	sub	sp, #60	; 0x3c
 80026d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026d2:	2314      	movs	r3, #20
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026da:	c313      	stmia	r3!, {r0, r1, r4}
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4a29      	ldr	r2, [pc, #164]	; (8002788 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026e6:	c313      	stmia	r3!, {r0, r1, r4}
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f4:	2300      	movs	r3, #0
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	220c      	movs	r2, #12
 800270a:	4013      	ands	r3, r2
 800270c:	2b04      	cmp	r3, #4
 800270e:	d002      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x4a>
 8002710:	2b08      	cmp	r3, #8
 8002712:	d003      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x50>
 8002714:	e02d      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800271a:	e02d      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	220f      	movs	r2, #15
 8002722:	4013      	ands	r3, r2
 8002724:	2214      	movs	r2, #20
 8002726:	18ba      	adds	r2, r7, r2
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCC_GetSysClockFreq+0xc0>)
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	220f      	movs	r2, #15
 8002732:	4013      	ands	r3, r2
 8002734:	1d3a      	adds	r2, r7, #4
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800273a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	025b      	lsls	r3, r3, #9
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002746:	4812      	ldr	r0, [pc, #72]	; (8002790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002748:	f7fd fcde 	bl	8000108 <__udivsi3>
 800274c:	0003      	movs	r3, r0
 800274e:	001a      	movs	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	4353      	muls	r3, r2
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
 8002756:	e009      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275a:	000a      	movs	r2, r1
 800275c:	0152      	lsls	r2, r2, #5
 800275e:	1a52      	subs	r2, r2, r1
 8002760:	0193      	lsls	r3, r2, #6
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	185b      	adds	r3, r3, r1
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002770:	e002      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002776:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b00f      	add	sp, #60	; 0x3c
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	08003754 	.word	0x08003754
 8002788:	08003764 	.word	0x08003764
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027b0:	e08e      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2017      	movs	r0, #23
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	055b      	lsls	r3, r3, #21
 80027c2:	4013      	ands	r3, r2
 80027c4:	d110      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e2:	183b      	adds	r3, r7, r0
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d11a      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	0049      	lsls	r1, r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fbad 	bl	8000f60 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fba8 	bl	8000f60 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e087      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d034      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	23c0      	movs	r3, #192	; 0xc0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4013      	ands	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d02c      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	0249      	lsls	r1, r1, #9
 8002860:	430a      	orrs	r2, r1
 8002862:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800286a:	4936      	ldr	r1, [pc, #216]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800286c:	400a      	ands	r2, r1
 800286e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fb6f 	bl	8000f60 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e009      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fb6a 	bl	8000f60 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e048      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028b6:	430a      	orrs	r2, r1
 80028b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ba:	2317      	movs	r3, #23
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ca:	4920      	ldr	r1, [pc, #128]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	2203      	movs	r2, #3
 80028e0:	4393      	bics	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2210      	movs	r2, #16
 80028fe:	4393      	bics	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002908:	430a      	orrs	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4013      	ands	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4393      	bics	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002928:	430a      	orrs	r2, r1
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b006      	add	sp, #24
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
 8002940:	fffffcff 	.word	0xfffffcff
 8002944:	fffeffff 	.word	0xfffeffff
 8002948:	00001388 	.word	0x00001388
 800294c:	efffffff 	.word	0xefffffff

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e042      	b.n	80029e8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	223d      	movs	r2, #61	; 0x3d
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	223c      	movs	r2, #60	; 0x3c
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f7fe f9d5 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223d      	movs	r2, #61	; 0x3d
 8002982:	2102      	movs	r1, #2
 8002984:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	0019      	movs	r1, r3
 8002990:	0010      	movs	r0, r2
 8002992:	f000 fad7 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2246      	movs	r2, #70	; 0x46
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	223e      	movs	r2, #62	; 0x3e
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	223f      	movs	r2, #63	; 0x3f
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2241      	movs	r2, #65	; 0x41
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2242      	movs	r2, #66	; 0x42
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2243      	movs	r2, #67	; 0x43
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2244      	movs	r2, #68	; 0x44
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2245      	movs	r2, #69	; 0x45
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	; 0x3d
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e042      	b.n	8002a88 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	223d      	movs	r2, #61	; 0x3d
 8002a06:	5c9b      	ldrb	r3, [r3, r2]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223c      	movs	r2, #60	; 0x3c
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 f839 	bl	8002a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223d      	movs	r2, #61	; 0x3d
 8002a22:	2102      	movs	r1, #2
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	0019      	movs	r1, r3
 8002a30:	0010      	movs	r0, r2
 8002a32:	f000 fa87 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2246      	movs	r2, #70	; 0x46
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223e      	movs	r2, #62	; 0x3e
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2240      	movs	r2, #64	; 0x40
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2241      	movs	r2, #65	; 0x41
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2242      	movs	r2, #66	; 0x42
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2243      	movs	r2, #67	; 0x43
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2244      	movs	r2, #68	; 0x44
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2245      	movs	r2, #69	; 0x45
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223d      	movs	r2, #61	; 0x3d
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0x22>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223e      	movs	r2, #62	; 0x3e
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	4193      	sbcs	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e01f      	b.n	8002b02 <HAL_TIM_PWM_Start+0x62>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d108      	bne.n	8002ada <HAL_TIM_PWM_Start+0x3a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	4193      	sbcs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e013      	b.n	8002b02 <HAL_TIM_PWM_Start+0x62>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d108      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x52>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	4193      	sbcs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e007      	b.n	8002b02 <HAL_TIM_PWM_Start+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2241      	movs	r2, #65	; 0x41
 8002af6:	5c9b      	ldrb	r3, [r3, r2]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	4193      	sbcs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e074      	b.n	8002bf4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x7a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	223e      	movs	r2, #62	; 0x3e
 8002b14:	2102      	movs	r1, #2
 8002b16:	5499      	strb	r1, [r3, r2]
 8002b18:	e013      	b.n	8002b42 <HAL_TIM_PWM_Start+0xa2>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x8a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	2102      	movs	r1, #2
 8002b26:	5499      	strb	r1, [r3, r2]
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Start+0xa2>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x9a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	2102      	movs	r1, #2
 8002b36:	5499      	strb	r1, [r3, r2]
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_PWM_Start+0xa2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2241      	movs	r2, #65	; 0x41
 8002b3e:	2102      	movs	r1, #2
 8002b40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fd10 	bl	8003570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_TIM_PWM_Start+0x15c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00e      	beq.n	8002b78 <HAL_TIM_PWM_Start+0xd8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <HAL_TIM_PWM_Start+0x160>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_TIM_PWM_Start+0xd8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_TIM_PWM_Start+0x164>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_PWM_Start+0xd8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_TIM_PWM_Start+0x168>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_PWM_Start+0xdc>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_TIM_PWM_Start+0xde>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0209      	lsls	r1, r1, #8
 8002b90:	430a      	orrs	r2, r1
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <HAL_TIM_PWM_Start+0x15c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00f      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x11e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d009      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x11e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_TIM_PWM_Start+0x16c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x11e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <HAL_TIM_PWM_Start+0x160>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b06      	cmp	r3, #6
 8002bce:	d010      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	e007      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b004      	add	sp, #16
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	40000400 	.word	0x40000400

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	223c      	movs	r2, #60	; 0x3c
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0ad      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d100      	bne.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c40:	e076      	b.n	8002d30 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c48:	e095      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d04e      	beq.n	8002cee <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d900      	bls.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c56:	e08e      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d021      	beq.n	8002ca8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c64:	e087      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	0011      	movs	r1, r2
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f9e8 	bl	8003044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2108      	movs	r1, #8
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2104      	movs	r1, #4
 8002c90:	438a      	bics	r2, r1
 8002c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	619a      	str	r2, [r3, #24]
      break;
 8002ca6:	e06b      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fa4f 	bl	8003154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0109      	lsls	r1, r1, #4
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4931      	ldr	r1, [pc, #196]	; (8002d98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	021a      	lsls	r2, r3, #8
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	619a      	str	r2, [r3, #24]
      break;
 8002cec:	e048      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	0011      	movs	r1, r2
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 fab0 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2108      	movs	r1, #8
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2104      	movs	r1, #4
 8002d18:	438a      	bics	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69d9      	ldr	r1, [r3, #28]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
      break;
 8002d2e:	e027      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	0011      	movs	r1, r2
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 fb15 	bl	8003368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	0109      	lsls	r1, r1, #4
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	490f      	ldr	r1, [pc, #60]	; (8002d98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69d9      	ldr	r1, [r3, #28]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	61da      	str	r2, [r3, #28]
      break;
 8002d74:	e004      	b.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d76:	2317      	movs	r3, #23
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	223c      	movs	r2, #60	; 0x3c
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

  return status;
 8002d88:	2317      	movs	r3, #23
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	fffffbff 	.word	0xfffffbff

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223c      	movs	r2, #60	; 0x3c
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_ConfigClockSource+0x20>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0bc      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x19a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223c      	movs	r2, #60	; 0x3c
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	223d      	movs	r2, #61	; 0x3d
 8002dc8:	2102      	movs	r1, #2
 8002dca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2277      	movs	r2, #119	; 0x77
 8002dd8:	4393      	bics	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	0192      	lsls	r2, r2, #6
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xde>
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	0192      	lsls	r2, r2, #6
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d900      	bls.n	8002e02 <HAL_TIM_ConfigClockSource+0x66>
 8002e00:	e088      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	0152      	lsls	r2, r2, #5
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d100      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x70>
 8002e0a:	e088      	b.n	8002f1e <HAL_TIM_ConfigClockSource+0x182>
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	0152      	lsls	r2, r2, #5
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d900      	bls.n	8002e16 <HAL_TIM_ConfigClockSource+0x7a>
 8002e14:	e07e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b70      	cmp	r3, #112	; 0x70
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0xb0>
 8002e1a:	d900      	bls.n	8002e1e <HAL_TIM_ConfigClockSource+0x82>
 8002e1c:	e07a      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e1e:	2b60      	cmp	r3, #96	; 0x60
 8002e20:	d04f      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x126>
 8002e22:	d900      	bls.n	8002e26 <HAL_TIM_ConfigClockSource+0x8a>
 8002e24:	e076      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e26:	2b50      	cmp	r3, #80	; 0x50
 8002e28:	d03b      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x106>
 8002e2a:	d900      	bls.n	8002e2e <HAL_TIM_ConfigClockSource+0x92>
 8002e2c:	e072      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d057      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x146>
 8002e32:	d900      	bls.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
 8002e34:	e06e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e36:	2b30      	cmp	r3, #48	; 0x30
 8002e38:	d063      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e40:	d868      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d05d      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d05b      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e4a:	e063      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6899      	ldr	r1, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f000 fb68 	bl	8003530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2277      	movs	r2, #119	; 0x77
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]
      break;
 8002e78:	e052      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f000 fb51 	bl	8003530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	01c9      	lsls	r1, r1, #7
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	001a      	movs	r2, r3
 8002eb0:	f000 fac4 	bl	800343c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fb1e 	bl	80034fc <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	001a      	movs	r2, r3
 8002ed0:	f000 fae2 	bl	8003498 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fb0e 	bl	80034fc <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	f000 faa4 	bl	800343c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 fafe 	bl	80034fc <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f000 faf5 	bl	80034fc <TIM_ITRx_SetConfig>
      break;
 8002f12:	e005      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f1e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	223d      	movs	r2, #61	; 0x3d
 8002f24:	2101      	movs	r1, #1
 8002f26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	223c      	movs	r2, #60	; 0x3c
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f30:	230f      	movs	r3, #15
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	ffff00ff 	.word	0xffff00ff

08002f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <TIM_Base_SetConfig+0xe4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d008      	beq.n	8002f6e <TIM_Base_SetConfig+0x2a>
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	05db      	lsls	r3, r3, #23
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0x2a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a30      	ldr	r2, [pc, #192]	; (800302c <TIM_Base_SetConfig+0xe8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2270      	movs	r2, #112	; 0x70
 8002f72:	4393      	bics	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0xe4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d018      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <TIM_Base_SetConfig+0xe8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <TIM_Base_SetConfig+0xec>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <TIM_Base_SetConfig+0xf0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <TIM_Base_SetConfig+0xf4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x76>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_Base_SetConfig+0xf8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xfc>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0xce>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <TIM_Base_SetConfig+0xf0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0xce>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0xf4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0xce>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <TIM_Base_SetConfig+0xf8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d103      	bne.n	800301a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	615a      	str	r2, [r3, #20]
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40002000 	.word	0x40002000
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	fffffcff 	.word	0xfffffcff

08003044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	2201      	movs	r2, #1
 8003054:	4393      	bics	r3, r2
 8003056:	001a      	movs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2270      	movs	r2, #112	; 0x70
 8003072:	4393      	bics	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2203      	movs	r2, #3
 800307a:	4393      	bics	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2202      	movs	r2, #2
 800308c:	4393      	bics	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a27      	ldr	r2, [pc, #156]	; (800313c <TIM_OC1_SetConfig+0xf8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_OC1_SetConfig+0x76>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <TIM_OC1_SetConfig+0xfc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_OC1_SetConfig+0x76>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <TIM_OC1_SetConfig+0x100>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_OC1_SetConfig+0x76>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <TIM_OC1_SetConfig+0x104>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10c      	bne.n	80030d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2208      	movs	r2, #8
 80030be:	4393      	bics	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2204      	movs	r2, #4
 80030d0:	4393      	bics	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <TIM_OC1_SetConfig+0xf8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_OC1_SetConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <TIM_OC1_SetConfig+0xfc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC1_SetConfig+0xb0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <TIM_OC1_SetConfig+0x100>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC1_SetConfig+0xb0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <TIM_OC1_SetConfig+0x104>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <TIM_OC1_SetConfig+0x108>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <TIM_OC1_SetConfig+0x10c>)
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b006      	add	sp, #24
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400
 8003148:	40014800 	.word	0x40014800
 800314c:	fffffeff 	.word	0xfffffeff
 8003150:	fffffdff 	.word	0xfffffdff

08003154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2210      	movs	r2, #16
 8003164:	4393      	bics	r3, r2
 8003166:	001a      	movs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a2e      	ldr	r2, [pc, #184]	; (800323c <TIM_OC2_SetConfig+0xe8>)
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <TIM_OC2_SetConfig+0xec>)
 800318a:	4013      	ands	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2220      	movs	r2, #32
 800319e:	4393      	bics	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <TIM_OC2_SetConfig+0xf0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10d      	bne.n	80031d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	4393      	bics	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	4393      	bics	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <TIM_OC2_SetConfig+0xf0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <TIM_OC2_SetConfig+0x9e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <TIM_OC2_SetConfig+0xf4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_OC2_SetConfig+0x9e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a19      	ldr	r2, [pc, #100]	; (800324c <TIM_OC2_SetConfig+0xf8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC2_SetConfig+0x9e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <TIM_OC2_SetConfig+0xfc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <TIM_OC2_SetConfig+0x100>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <TIM_OC2_SetConfig+0x104>)
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}
 800323c:	ffff8fff 	.word	0xffff8fff
 8003240:	fffffcff 	.word	0xfffffcff
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800
 8003254:	fffffbff 	.word	0xfffffbff
 8003258:	fffff7ff 	.word	0xfffff7ff

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <TIM_OC3_SetConfig+0xe4>)
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2270      	movs	r2, #112	; 0x70
 8003288:	4393      	bics	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2203      	movs	r2, #3
 8003290:	4393      	bics	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <TIM_OC3_SetConfig+0xe8>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a24      	ldr	r2, [pc, #144]	; (8003348 <TIM_OC3_SetConfig+0xec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10d      	bne.n	80032d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <TIM_OC3_SetConfig+0xf0>)
 80032be:	4013      	ands	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <TIM_OC3_SetConfig+0xf4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <TIM_OC3_SetConfig+0xec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_OC3_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <TIM_OC3_SetConfig+0xf8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <TIM_OC3_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <TIM_OC3_SetConfig+0xfc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_OC3_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <TIM_OC3_SetConfig+0x100>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <TIM_OC3_SetConfig+0x104>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <TIM_OC3_SetConfig+0x108>)
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	fffffeff 	.word	0xfffffeff
 8003344:	fffffdff 	.word	0xfffffdff
 8003348:	40012c00 	.word	0x40012c00
 800334c:	fffff7ff 	.word	0xfffff7ff
 8003350:	fffffbff 	.word	0xfffffbff
 8003354:	40014000 	.word	0x40014000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	ffffefff 	.word	0xffffefff
 8003364:	ffffdfff 	.word	0xffffdfff

08003368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <TIM_OC4_SetConfig+0xb0>)
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <TIM_OC4_SetConfig+0xb4>)
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <TIM_OC4_SetConfig+0xb8>)
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <TIM_OC4_SetConfig+0xbc>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <TIM_OC4_SetConfig+0xc0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_OC4_SetConfig+0x78>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <TIM_OC4_SetConfig+0xc4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_OC4_SetConfig+0x78>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <TIM_OC4_SetConfig+0xc8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC4_SetConfig+0x78>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a16      	ldr	r2, [pc, #88]	; (8003434 <TIM_OC4_SetConfig+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d109      	bne.n	80033f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <TIM_OC4_SetConfig+0xd0>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b006      	add	sp, #24
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	ffffefff 	.word	0xffffefff
 800341c:	ffff8fff 	.word	0xffff8fff
 8003420:	fffffcff 	.word	0xfffffcff
 8003424:	ffffdfff 	.word	0xffffdfff
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800
 8003438:	ffffbfff 	.word	0xffffbfff

0800343c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2201      	movs	r2, #1
 8003454:	4393      	bics	r3, r2
 8003456:	001a      	movs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	22f0      	movs	r2, #240	; 0xf0
 8003466:	4393      	bics	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	220a      	movs	r2, #10
 8003478:	4393      	bics	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}

08003498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	2210      	movs	r2, #16
 80034aa:	4393      	bics	r3, r2
 80034ac:	001a      	movs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <TIM_TI2_ConfigInputStage+0x60>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	031b      	lsls	r3, r3, #12
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	22a0      	movs	r2, #160	; 0xa0
 80034d4:	4393      	bics	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b006      	add	sp, #24
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	ffff0fff 	.word	0xffff0fff

080034fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2270      	movs	r2, #112	; 0x70
 8003510:	4393      	bics	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	2207      	movs	r2, #7
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	609a      	str	r2, [r3, #8]
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <TIM_ETR_SetConfig+0x3c>)
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	021a      	lsls	r2, r3, #8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	431a      	orrs	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4313      	orrs	r3, r2
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b006      	add	sp, #24
 800356a:	bd80      	pop	{r7, pc}
 800356c:	ffff00ff 	.word	0xffff00ff

08003570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	221f      	movs	r2, #31
 8003580:	4013      	ands	r3, r2
 8003582:	2201      	movs	r2, #1
 8003584:	409a      	lsls	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	43d2      	mvns	r2, r2
 8003592:	401a      	ands	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	211f      	movs	r1, #31
 80035a0:	400b      	ands	r3, r1
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4099      	lsls	r1, r3
 80035a6:	000b      	movs	r3, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b006      	add	sp, #24
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	223c      	movs	r2, #60	; 0x3c
 80035c6:	5c9b      	ldrb	r3, [r3, r2]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e047      	b.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	223c      	movs	r2, #60	; 0x3c
 80035d4:	2101      	movs	r1, #1
 80035d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	223d      	movs	r2, #61	; 0x3d
 80035dc:	2102      	movs	r1, #2
 80035de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2270      	movs	r2, #112	; 0x70
 80035f4:	4393      	bics	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a16      	ldr	r2, [pc, #88]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	05db      	lsls	r3, r3, #23
 800361c:	429a      	cmp	r2, r3
 800361e:	d009      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a11      	ldr	r2, [pc, #68]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d10c      	bne.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	4393      	bics	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4313      	orrs	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	223d      	movs	r2, #61	; 0x3d
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	223c      	movs	r2, #60	; 0x3c
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40000400 	.word	0x40000400
 8003670:	40014000 	.word	0x40014000

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	2600      	movs	r6, #0
 8003678:	4d0c      	ldr	r5, [pc, #48]	; (80036ac <__libc_init_array+0x38>)
 800367a:	4c0d      	ldr	r4, [pc, #52]	; (80036b0 <__libc_init_array+0x3c>)
 800367c:	1b64      	subs	r4, r4, r5
 800367e:	10a4      	asrs	r4, r4, #2
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	2600      	movs	r6, #0
 8003686:	f000 f821 	bl	80036cc <_init>
 800368a:	4d0a      	ldr	r5, [pc, #40]	; (80036b4 <__libc_init_array+0x40>)
 800368c:	4c0a      	ldr	r4, [pc, #40]	; (80036b8 <__libc_init_array+0x44>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	00b3      	lsls	r3, r6, #2
 800369a:	58eb      	ldr	r3, [r5, r3]
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	00b3      	lsls	r3, r6, #2
 80036a4:	58eb      	ldr	r3, [r5, r3]
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	08003784 	.word	0x08003784
 80036b0:	08003784 	.word	0x08003784
 80036b4:	08003784 	.word	0x08003784
 80036b8:	08003788 	.word	0x08003788

080036bc <memset>:
 80036bc:	0003      	movs	r3, r0
 80036be:	1882      	adds	r2, r0, r2
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	7019      	strb	r1, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
