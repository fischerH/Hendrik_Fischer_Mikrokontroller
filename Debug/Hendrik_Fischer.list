
Hendrik_Fischer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006260  08006260  00016260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080063c8  080063c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063c8  080063c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  080063e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080063e0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c741  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e72  00000000  00000000  0002c779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c59  00000000  00000000  0002fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f335  00000000  00000000  000429e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e3f3  00000000  00000000  00051d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb8  00000000  00000000  000c015c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006248 	.word	0x08006248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006248 	.word	0x08006248

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff0d 	bl	8001224 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe5d 	bl	80010d4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 feff 	bl	8001224 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fef5 	bl	8001224 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe85 	bl	8001158 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe7b 	bl	8001158 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464f      	mov	r7, r9
 8000474:	4646      	mov	r6, r8
 8000476:	46d6      	mov	lr, sl
 8000478:	000d      	movs	r5, r1
 800047a:	0004      	movs	r4, r0
 800047c:	b5c0      	push	{r6, r7, lr}
 800047e:	001f      	movs	r7, r3
 8000480:	0011      	movs	r1, r2
 8000482:	0328      	lsls	r0, r5, #12
 8000484:	0f62      	lsrs	r2, r4, #29
 8000486:	0a40      	lsrs	r0, r0, #9
 8000488:	4310      	orrs	r0, r2
 800048a:	007a      	lsls	r2, r7, #1
 800048c:	0d52      	lsrs	r2, r2, #21
 800048e:	00e3      	lsls	r3, r4, #3
 8000490:	033c      	lsls	r4, r7, #12
 8000492:	4691      	mov	r9, r2
 8000494:	0a64      	lsrs	r4, r4, #9
 8000496:	0ffa      	lsrs	r2, r7, #31
 8000498:	0f4f      	lsrs	r7, r1, #29
 800049a:	006e      	lsls	r6, r5, #1
 800049c:	4327      	orrs	r7, r4
 800049e:	4692      	mov	sl, r2
 80004a0:	46b8      	mov	r8, r7
 80004a2:	0d76      	lsrs	r6, r6, #21
 80004a4:	0fed      	lsrs	r5, r5, #31
 80004a6:	00c9      	lsls	r1, r1, #3
 80004a8:	4295      	cmp	r5, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dadd+0x3e>
 80004ac:	e099      	b.n	80005e2 <__aeabi_dadd+0x172>
 80004ae:	464c      	mov	r4, r9
 80004b0:	1b34      	subs	r4, r6, r4
 80004b2:	46a4      	mov	ip, r4
 80004b4:	2c00      	cmp	r4, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_dadd+0x4a>
 80004b8:	e07c      	b.n	80005b4 <__aeabi_dadd+0x144>
 80004ba:	464a      	mov	r2, r9
 80004bc:	2a00      	cmp	r2, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x52>
 80004c0:	e0b8      	b.n	8000634 <__aeabi_dadd+0x1c4>
 80004c2:	4ac5      	ldr	r2, [pc, #788]	; (80007d8 <__aeabi_dadd+0x368>)
 80004c4:	4296      	cmp	r6, r2
 80004c6:	d100      	bne.n	80004ca <__aeabi_dadd+0x5a>
 80004c8:	e11c      	b.n	8000704 <__aeabi_dadd+0x294>
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	003c      	movs	r4, r7
 80004ce:	0412      	lsls	r2, r2, #16
 80004d0:	4314      	orrs	r4, r2
 80004d2:	46a0      	mov	r8, r4
 80004d4:	4662      	mov	r2, ip
 80004d6:	2a38      	cmp	r2, #56	; 0x38
 80004d8:	dd00      	ble.n	80004dc <__aeabi_dadd+0x6c>
 80004da:	e161      	b.n	80007a0 <__aeabi_dadd+0x330>
 80004dc:	2a1f      	cmp	r2, #31
 80004de:	dd00      	ble.n	80004e2 <__aeabi_dadd+0x72>
 80004e0:	e1cc      	b.n	800087c <__aeabi_dadd+0x40c>
 80004e2:	4664      	mov	r4, ip
 80004e4:	2220      	movs	r2, #32
 80004e6:	1b12      	subs	r2, r2, r4
 80004e8:	4644      	mov	r4, r8
 80004ea:	4094      	lsls	r4, r2
 80004ec:	000f      	movs	r7, r1
 80004ee:	46a1      	mov	r9, r4
 80004f0:	4664      	mov	r4, ip
 80004f2:	4091      	lsls	r1, r2
 80004f4:	40e7      	lsrs	r7, r4
 80004f6:	464c      	mov	r4, r9
 80004f8:	1e4a      	subs	r2, r1, #1
 80004fa:	4191      	sbcs	r1, r2
 80004fc:	433c      	orrs	r4, r7
 80004fe:	4642      	mov	r2, r8
 8000500:	4321      	orrs	r1, r4
 8000502:	4664      	mov	r4, ip
 8000504:	40e2      	lsrs	r2, r4
 8000506:	1a80      	subs	r0, r0, r2
 8000508:	1a5c      	subs	r4, r3, r1
 800050a:	42a3      	cmp	r3, r4
 800050c:	419b      	sbcs	r3, r3
 800050e:	425f      	negs	r7, r3
 8000510:	1bc7      	subs	r7, r0, r7
 8000512:	023b      	lsls	r3, r7, #8
 8000514:	d400      	bmi.n	8000518 <__aeabi_dadd+0xa8>
 8000516:	e0d0      	b.n	80006ba <__aeabi_dadd+0x24a>
 8000518:	027f      	lsls	r7, r7, #9
 800051a:	0a7f      	lsrs	r7, r7, #9
 800051c:	2f00      	cmp	r7, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_dadd+0xb2>
 8000520:	e0ff      	b.n	8000722 <__aeabi_dadd+0x2b2>
 8000522:	0038      	movs	r0, r7
 8000524:	f001 fd46 	bl	8001fb4 <__clzsi2>
 8000528:	0001      	movs	r1, r0
 800052a:	3908      	subs	r1, #8
 800052c:	2320      	movs	r3, #32
 800052e:	0022      	movs	r2, r4
 8000530:	1a5b      	subs	r3, r3, r1
 8000532:	408f      	lsls	r7, r1
 8000534:	40da      	lsrs	r2, r3
 8000536:	408c      	lsls	r4, r1
 8000538:	4317      	orrs	r7, r2
 800053a:	42b1      	cmp	r1, r6
 800053c:	da00      	bge.n	8000540 <__aeabi_dadd+0xd0>
 800053e:	e0ff      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000540:	1b89      	subs	r1, r1, r6
 8000542:	1c4b      	adds	r3, r1, #1
 8000544:	2b1f      	cmp	r3, #31
 8000546:	dd00      	ble.n	800054a <__aeabi_dadd+0xda>
 8000548:	e0a8      	b.n	800069c <__aeabi_dadd+0x22c>
 800054a:	2220      	movs	r2, #32
 800054c:	0039      	movs	r1, r7
 800054e:	1ad2      	subs	r2, r2, r3
 8000550:	0020      	movs	r0, r4
 8000552:	4094      	lsls	r4, r2
 8000554:	4091      	lsls	r1, r2
 8000556:	40d8      	lsrs	r0, r3
 8000558:	1e62      	subs	r2, r4, #1
 800055a:	4194      	sbcs	r4, r2
 800055c:	40df      	lsrs	r7, r3
 800055e:	2600      	movs	r6, #0
 8000560:	4301      	orrs	r1, r0
 8000562:	430c      	orrs	r4, r1
 8000564:	0763      	lsls	r3, r4, #29
 8000566:	d009      	beq.n	800057c <__aeabi_dadd+0x10c>
 8000568:	230f      	movs	r3, #15
 800056a:	4023      	ands	r3, r4
 800056c:	2b04      	cmp	r3, #4
 800056e:	d005      	beq.n	800057c <__aeabi_dadd+0x10c>
 8000570:	1d23      	adds	r3, r4, #4
 8000572:	42a3      	cmp	r3, r4
 8000574:	41a4      	sbcs	r4, r4
 8000576:	4264      	negs	r4, r4
 8000578:	193f      	adds	r7, r7, r4
 800057a:	001c      	movs	r4, r3
 800057c:	023b      	lsls	r3, r7, #8
 800057e:	d400      	bmi.n	8000582 <__aeabi_dadd+0x112>
 8000580:	e09e      	b.n	80006c0 <__aeabi_dadd+0x250>
 8000582:	4b95      	ldr	r3, [pc, #596]	; (80007d8 <__aeabi_dadd+0x368>)
 8000584:	3601      	adds	r6, #1
 8000586:	429e      	cmp	r6, r3
 8000588:	d100      	bne.n	800058c <__aeabi_dadd+0x11c>
 800058a:	e0b7      	b.n	80006fc <__aeabi_dadd+0x28c>
 800058c:	4a93      	ldr	r2, [pc, #588]	; (80007dc <__aeabi_dadd+0x36c>)
 800058e:	08e4      	lsrs	r4, r4, #3
 8000590:	4017      	ands	r7, r2
 8000592:	077b      	lsls	r3, r7, #29
 8000594:	0571      	lsls	r1, r6, #21
 8000596:	027f      	lsls	r7, r7, #9
 8000598:	4323      	orrs	r3, r4
 800059a:	0b3f      	lsrs	r7, r7, #12
 800059c:	0d4a      	lsrs	r2, r1, #21
 800059e:	0512      	lsls	r2, r2, #20
 80005a0:	433a      	orrs	r2, r7
 80005a2:	07ed      	lsls	r5, r5, #31
 80005a4:	432a      	orrs	r2, r5
 80005a6:	0018      	movs	r0, r3
 80005a8:	0011      	movs	r1, r2
 80005aa:	bce0      	pop	{r5, r6, r7}
 80005ac:	46ba      	mov	sl, r7
 80005ae:	46b1      	mov	r9, r6
 80005b0:	46a8      	mov	r8, r5
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d04b      	beq.n	8000650 <__aeabi_dadd+0x1e0>
 80005b8:	464c      	mov	r4, r9
 80005ba:	1ba4      	subs	r4, r4, r6
 80005bc:	46a4      	mov	ip, r4
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d000      	beq.n	80005c4 <__aeabi_dadd+0x154>
 80005c2:	e123      	b.n	800080c <__aeabi_dadd+0x39c>
 80005c4:	0004      	movs	r4, r0
 80005c6:	431c      	orrs	r4, r3
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x15c>
 80005ca:	e1af      	b.n	800092c <__aeabi_dadd+0x4bc>
 80005cc:	4662      	mov	r2, ip
 80005ce:	1e54      	subs	r4, r2, #1
 80005d0:	2a01      	cmp	r2, #1
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x166>
 80005d4:	e215      	b.n	8000a02 <__aeabi_dadd+0x592>
 80005d6:	4d80      	ldr	r5, [pc, #512]	; (80007d8 <__aeabi_dadd+0x368>)
 80005d8:	45ac      	cmp	ip, r5
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x16e>
 80005dc:	e1c8      	b.n	8000970 <__aeabi_dadd+0x500>
 80005de:	46a4      	mov	ip, r4
 80005e0:	e11b      	b.n	800081a <__aeabi_dadd+0x3aa>
 80005e2:	464a      	mov	r2, r9
 80005e4:	1ab2      	subs	r2, r6, r2
 80005e6:	4694      	mov	ip, r2
 80005e8:	2a00      	cmp	r2, #0
 80005ea:	dc00      	bgt.n	80005ee <__aeabi_dadd+0x17e>
 80005ec:	e0ac      	b.n	8000748 <__aeabi_dadd+0x2d8>
 80005ee:	464a      	mov	r2, r9
 80005f0:	2a00      	cmp	r2, #0
 80005f2:	d043      	beq.n	800067c <__aeabi_dadd+0x20c>
 80005f4:	4a78      	ldr	r2, [pc, #480]	; (80007d8 <__aeabi_dadd+0x368>)
 80005f6:	4296      	cmp	r6, r2
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x18c>
 80005fa:	e1af      	b.n	800095c <__aeabi_dadd+0x4ec>
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	003c      	movs	r4, r7
 8000600:	0412      	lsls	r2, r2, #16
 8000602:	4314      	orrs	r4, r2
 8000604:	46a0      	mov	r8, r4
 8000606:	4662      	mov	r2, ip
 8000608:	2a38      	cmp	r2, #56	; 0x38
 800060a:	dc67      	bgt.n	80006dc <__aeabi_dadd+0x26c>
 800060c:	2a1f      	cmp	r2, #31
 800060e:	dc00      	bgt.n	8000612 <__aeabi_dadd+0x1a2>
 8000610:	e15f      	b.n	80008d2 <__aeabi_dadd+0x462>
 8000612:	4647      	mov	r7, r8
 8000614:	3a20      	subs	r2, #32
 8000616:	40d7      	lsrs	r7, r2
 8000618:	4662      	mov	r2, ip
 800061a:	2a20      	cmp	r2, #32
 800061c:	d005      	beq.n	800062a <__aeabi_dadd+0x1ba>
 800061e:	4664      	mov	r4, ip
 8000620:	2240      	movs	r2, #64	; 0x40
 8000622:	1b12      	subs	r2, r2, r4
 8000624:	4644      	mov	r4, r8
 8000626:	4094      	lsls	r4, r2
 8000628:	4321      	orrs	r1, r4
 800062a:	1e4a      	subs	r2, r1, #1
 800062c:	4191      	sbcs	r1, r2
 800062e:	000c      	movs	r4, r1
 8000630:	433c      	orrs	r4, r7
 8000632:	e057      	b.n	80006e4 <__aeabi_dadd+0x274>
 8000634:	003a      	movs	r2, r7
 8000636:	430a      	orrs	r2, r1
 8000638:	d100      	bne.n	800063c <__aeabi_dadd+0x1cc>
 800063a:	e105      	b.n	8000848 <__aeabi_dadd+0x3d8>
 800063c:	0022      	movs	r2, r4
 800063e:	3a01      	subs	r2, #1
 8000640:	2c01      	cmp	r4, #1
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x1d6>
 8000644:	e182      	b.n	800094c <__aeabi_dadd+0x4dc>
 8000646:	4c64      	ldr	r4, [pc, #400]	; (80007d8 <__aeabi_dadd+0x368>)
 8000648:	45a4      	cmp	ip, r4
 800064a:	d05b      	beq.n	8000704 <__aeabi_dadd+0x294>
 800064c:	4694      	mov	ip, r2
 800064e:	e741      	b.n	80004d4 <__aeabi_dadd+0x64>
 8000650:	4c63      	ldr	r4, [pc, #396]	; (80007e0 <__aeabi_dadd+0x370>)
 8000652:	1c77      	adds	r7, r6, #1
 8000654:	4227      	tst	r7, r4
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x1ea>
 8000658:	e0c4      	b.n	80007e4 <__aeabi_dadd+0x374>
 800065a:	0004      	movs	r4, r0
 800065c:	431c      	orrs	r4, r3
 800065e:	2e00      	cmp	r6, #0
 8000660:	d000      	beq.n	8000664 <__aeabi_dadd+0x1f4>
 8000662:	e169      	b.n	8000938 <__aeabi_dadd+0x4c8>
 8000664:	2c00      	cmp	r4, #0
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1fa>
 8000668:	e1bf      	b.n	80009ea <__aeabi_dadd+0x57a>
 800066a:	4644      	mov	r4, r8
 800066c:	430c      	orrs	r4, r1
 800066e:	d000      	beq.n	8000672 <__aeabi_dadd+0x202>
 8000670:	e1d0      	b.n	8000a14 <__aeabi_dadd+0x5a4>
 8000672:	0742      	lsls	r2, r0, #29
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	4313      	orrs	r3, r2
 8000678:	08c0      	lsrs	r0, r0, #3
 800067a:	e029      	b.n	80006d0 <__aeabi_dadd+0x260>
 800067c:	003a      	movs	r2, r7
 800067e:	430a      	orrs	r2, r1
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x214>
 8000682:	e170      	b.n	8000966 <__aeabi_dadd+0x4f6>
 8000684:	4662      	mov	r2, ip
 8000686:	4664      	mov	r4, ip
 8000688:	3a01      	subs	r2, #1
 800068a:	2c01      	cmp	r4, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x220>
 800068e:	e0e0      	b.n	8000852 <__aeabi_dadd+0x3e2>
 8000690:	4c51      	ldr	r4, [pc, #324]	; (80007d8 <__aeabi_dadd+0x368>)
 8000692:	45a4      	cmp	ip, r4
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x228>
 8000696:	e161      	b.n	800095c <__aeabi_dadd+0x4ec>
 8000698:	4694      	mov	ip, r2
 800069a:	e7b4      	b.n	8000606 <__aeabi_dadd+0x196>
 800069c:	003a      	movs	r2, r7
 800069e:	391f      	subs	r1, #31
 80006a0:	40ca      	lsrs	r2, r1
 80006a2:	0011      	movs	r1, r2
 80006a4:	2b20      	cmp	r3, #32
 80006a6:	d003      	beq.n	80006b0 <__aeabi_dadd+0x240>
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	409f      	lsls	r7, r3
 80006ae:	433c      	orrs	r4, r7
 80006b0:	1e63      	subs	r3, r4, #1
 80006b2:	419c      	sbcs	r4, r3
 80006b4:	2700      	movs	r7, #0
 80006b6:	2600      	movs	r6, #0
 80006b8:	430c      	orrs	r4, r1
 80006ba:	0763      	lsls	r3, r4, #29
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dadd+0x250>
 80006be:	e753      	b.n	8000568 <__aeabi_dadd+0xf8>
 80006c0:	46b4      	mov	ip, r6
 80006c2:	08e4      	lsrs	r4, r4, #3
 80006c4:	077b      	lsls	r3, r7, #29
 80006c6:	4323      	orrs	r3, r4
 80006c8:	08f8      	lsrs	r0, r7, #3
 80006ca:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <__aeabi_dadd+0x368>)
 80006cc:	4594      	cmp	ip, r2
 80006ce:	d01d      	beq.n	800070c <__aeabi_dadd+0x29c>
 80006d0:	4662      	mov	r2, ip
 80006d2:	0307      	lsls	r7, r0, #12
 80006d4:	0552      	lsls	r2, r2, #21
 80006d6:	0b3f      	lsrs	r7, r7, #12
 80006d8:	0d52      	lsrs	r2, r2, #21
 80006da:	e760      	b.n	800059e <__aeabi_dadd+0x12e>
 80006dc:	4644      	mov	r4, r8
 80006de:	430c      	orrs	r4, r1
 80006e0:	1e62      	subs	r2, r4, #1
 80006e2:	4194      	sbcs	r4, r2
 80006e4:	18e4      	adds	r4, r4, r3
 80006e6:	429c      	cmp	r4, r3
 80006e8:	419b      	sbcs	r3, r3
 80006ea:	425f      	negs	r7, r3
 80006ec:	183f      	adds	r7, r7, r0
 80006ee:	023b      	lsls	r3, r7, #8
 80006f0:	d5e3      	bpl.n	80006ba <__aeabi_dadd+0x24a>
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <__aeabi_dadd+0x368>)
 80006f4:	3601      	adds	r6, #1
 80006f6:	429e      	cmp	r6, r3
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x28c>
 80006fa:	e0b5      	b.n	8000868 <__aeabi_dadd+0x3f8>
 80006fc:	0032      	movs	r2, r6
 80006fe:	2700      	movs	r7, #0
 8000700:	2300      	movs	r3, #0
 8000702:	e74c      	b.n	800059e <__aeabi_dadd+0x12e>
 8000704:	0742      	lsls	r2, r0, #29
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	4313      	orrs	r3, r2
 800070a:	08c0      	lsrs	r0, r0, #3
 800070c:	001a      	movs	r2, r3
 800070e:	4302      	orrs	r2, r0
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x2a4>
 8000712:	e1e1      	b.n	8000ad8 <__aeabi_dadd+0x668>
 8000714:	2780      	movs	r7, #128	; 0x80
 8000716:	033f      	lsls	r7, r7, #12
 8000718:	4307      	orrs	r7, r0
 800071a:	033f      	lsls	r7, r7, #12
 800071c:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <__aeabi_dadd+0x368>)
 800071e:	0b3f      	lsrs	r7, r7, #12
 8000720:	e73d      	b.n	800059e <__aeabi_dadd+0x12e>
 8000722:	0020      	movs	r0, r4
 8000724:	f001 fc46 	bl	8001fb4 <__clzsi2>
 8000728:	0001      	movs	r1, r0
 800072a:	3118      	adds	r1, #24
 800072c:	291f      	cmp	r1, #31
 800072e:	dc00      	bgt.n	8000732 <__aeabi_dadd+0x2c2>
 8000730:	e6fc      	b.n	800052c <__aeabi_dadd+0xbc>
 8000732:	3808      	subs	r0, #8
 8000734:	4084      	lsls	r4, r0
 8000736:	0027      	movs	r7, r4
 8000738:	2400      	movs	r4, #0
 800073a:	42b1      	cmp	r1, r6
 800073c:	db00      	blt.n	8000740 <__aeabi_dadd+0x2d0>
 800073e:	e6ff      	b.n	8000540 <__aeabi_dadd+0xd0>
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <__aeabi_dadd+0x36c>)
 8000742:	1a76      	subs	r6, r6, r1
 8000744:	4017      	ands	r7, r2
 8000746:	e70d      	b.n	8000564 <__aeabi_dadd+0xf4>
 8000748:	2a00      	cmp	r2, #0
 800074a:	d02f      	beq.n	80007ac <__aeabi_dadd+0x33c>
 800074c:	464a      	mov	r2, r9
 800074e:	1b92      	subs	r2, r2, r6
 8000750:	4694      	mov	ip, r2
 8000752:	2e00      	cmp	r6, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2e8>
 8000756:	e0ad      	b.n	80008b4 <__aeabi_dadd+0x444>
 8000758:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <__aeabi_dadd+0x368>)
 800075a:	4591      	cmp	r9, r2
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x2f0>
 800075e:	e10f      	b.n	8000980 <__aeabi_dadd+0x510>
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0412      	lsls	r2, r2, #16
 8000764:	4310      	orrs	r0, r2
 8000766:	4662      	mov	r2, ip
 8000768:	2a38      	cmp	r2, #56	; 0x38
 800076a:	dd00      	ble.n	800076e <__aeabi_dadd+0x2fe>
 800076c:	e10f      	b.n	800098e <__aeabi_dadd+0x51e>
 800076e:	2a1f      	cmp	r2, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x304>
 8000772:	e180      	b.n	8000a76 <__aeabi_dadd+0x606>
 8000774:	4664      	mov	r4, ip
 8000776:	2220      	movs	r2, #32
 8000778:	001e      	movs	r6, r3
 800077a:	1b12      	subs	r2, r2, r4
 800077c:	4667      	mov	r7, ip
 800077e:	0004      	movs	r4, r0
 8000780:	4093      	lsls	r3, r2
 8000782:	4094      	lsls	r4, r2
 8000784:	40fe      	lsrs	r6, r7
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	4193      	sbcs	r3, r2
 800078a:	40f8      	lsrs	r0, r7
 800078c:	4334      	orrs	r4, r6
 800078e:	431c      	orrs	r4, r3
 8000790:	4480      	add	r8, r0
 8000792:	1864      	adds	r4, r4, r1
 8000794:	428c      	cmp	r4, r1
 8000796:	41bf      	sbcs	r7, r7
 8000798:	427f      	negs	r7, r7
 800079a:	464e      	mov	r6, r9
 800079c:	4447      	add	r7, r8
 800079e:	e7a6      	b.n	80006ee <__aeabi_dadd+0x27e>
 80007a0:	4642      	mov	r2, r8
 80007a2:	430a      	orrs	r2, r1
 80007a4:	0011      	movs	r1, r2
 80007a6:	1e4a      	subs	r2, r1, #1
 80007a8:	4191      	sbcs	r1, r2
 80007aa:	e6ad      	b.n	8000508 <__aeabi_dadd+0x98>
 80007ac:	4c0c      	ldr	r4, [pc, #48]	; (80007e0 <__aeabi_dadd+0x370>)
 80007ae:	1c72      	adds	r2, r6, #1
 80007b0:	4222      	tst	r2, r4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_dadd+0x346>
 80007b4:	e0a1      	b.n	80008fa <__aeabi_dadd+0x48a>
 80007b6:	0002      	movs	r2, r0
 80007b8:	431a      	orrs	r2, r3
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_dadd+0x350>
 80007be:	e0fa      	b.n	80009b6 <__aeabi_dadd+0x546>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x356>
 80007c4:	e145      	b.n	8000a52 <__aeabi_dadd+0x5e2>
 80007c6:	003a      	movs	r2, r7
 80007c8:	430a      	orrs	r2, r1
 80007ca:	d000      	beq.n	80007ce <__aeabi_dadd+0x35e>
 80007cc:	e146      	b.n	8000a5c <__aeabi_dadd+0x5ec>
 80007ce:	0742      	lsls	r2, r0, #29
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	08c0      	lsrs	r0, r0, #3
 80007d6:	e77b      	b.n	80006d0 <__aeabi_dadd+0x260>
 80007d8:	000007ff 	.word	0x000007ff
 80007dc:	ff7fffff 	.word	0xff7fffff
 80007e0:	000007fe 	.word	0x000007fe
 80007e4:	4647      	mov	r7, r8
 80007e6:	1a5c      	subs	r4, r3, r1
 80007e8:	1bc2      	subs	r2, r0, r7
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	41bf      	sbcs	r7, r7
 80007ee:	427f      	negs	r7, r7
 80007f0:	46b9      	mov	r9, r7
 80007f2:	0017      	movs	r7, r2
 80007f4:	464a      	mov	r2, r9
 80007f6:	1abf      	subs	r7, r7, r2
 80007f8:	023a      	lsls	r2, r7, #8
 80007fa:	d500      	bpl.n	80007fe <__aeabi_dadd+0x38e>
 80007fc:	e08d      	b.n	800091a <__aeabi_dadd+0x4aa>
 80007fe:	0023      	movs	r3, r4
 8000800:	433b      	orrs	r3, r7
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x396>
 8000804:	e68a      	b.n	800051c <__aeabi_dadd+0xac>
 8000806:	2000      	movs	r0, #0
 8000808:	2500      	movs	r5, #0
 800080a:	e761      	b.n	80006d0 <__aeabi_dadd+0x260>
 800080c:	4cb4      	ldr	r4, [pc, #720]	; (8000ae0 <__aeabi_dadd+0x670>)
 800080e:	45a1      	cmp	r9, r4
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x3a4>
 8000812:	e0ad      	b.n	8000970 <__aeabi_dadd+0x500>
 8000814:	2480      	movs	r4, #128	; 0x80
 8000816:	0424      	lsls	r4, r4, #16
 8000818:	4320      	orrs	r0, r4
 800081a:	4664      	mov	r4, ip
 800081c:	2c38      	cmp	r4, #56	; 0x38
 800081e:	dc3d      	bgt.n	800089c <__aeabi_dadd+0x42c>
 8000820:	4662      	mov	r2, ip
 8000822:	2c1f      	cmp	r4, #31
 8000824:	dd00      	ble.n	8000828 <__aeabi_dadd+0x3b8>
 8000826:	e0b7      	b.n	8000998 <__aeabi_dadd+0x528>
 8000828:	2520      	movs	r5, #32
 800082a:	001e      	movs	r6, r3
 800082c:	1b2d      	subs	r5, r5, r4
 800082e:	0004      	movs	r4, r0
 8000830:	40ab      	lsls	r3, r5
 8000832:	40ac      	lsls	r4, r5
 8000834:	40d6      	lsrs	r6, r2
 8000836:	40d0      	lsrs	r0, r2
 8000838:	4642      	mov	r2, r8
 800083a:	1e5d      	subs	r5, r3, #1
 800083c:	41ab      	sbcs	r3, r5
 800083e:	4334      	orrs	r4, r6
 8000840:	1a12      	subs	r2, r2, r0
 8000842:	4690      	mov	r8, r2
 8000844:	4323      	orrs	r3, r4
 8000846:	e02c      	b.n	80008a2 <__aeabi_dadd+0x432>
 8000848:	0742      	lsls	r2, r0, #29
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	4313      	orrs	r3, r2
 800084e:	08c0      	lsrs	r0, r0, #3
 8000850:	e73b      	b.n	80006ca <__aeabi_dadd+0x25a>
 8000852:	185c      	adds	r4, r3, r1
 8000854:	429c      	cmp	r4, r3
 8000856:	419b      	sbcs	r3, r3
 8000858:	4440      	add	r0, r8
 800085a:	425b      	negs	r3, r3
 800085c:	18c7      	adds	r7, r0, r3
 800085e:	2601      	movs	r6, #1
 8000860:	023b      	lsls	r3, r7, #8
 8000862:	d400      	bmi.n	8000866 <__aeabi_dadd+0x3f6>
 8000864:	e729      	b.n	80006ba <__aeabi_dadd+0x24a>
 8000866:	2602      	movs	r6, #2
 8000868:	4a9e      	ldr	r2, [pc, #632]	; (8000ae4 <__aeabi_dadd+0x674>)
 800086a:	0863      	lsrs	r3, r4, #1
 800086c:	4017      	ands	r7, r2
 800086e:	2201      	movs	r2, #1
 8000870:	4014      	ands	r4, r2
 8000872:	431c      	orrs	r4, r3
 8000874:	07fb      	lsls	r3, r7, #31
 8000876:	431c      	orrs	r4, r3
 8000878:	087f      	lsrs	r7, r7, #1
 800087a:	e673      	b.n	8000564 <__aeabi_dadd+0xf4>
 800087c:	4644      	mov	r4, r8
 800087e:	3a20      	subs	r2, #32
 8000880:	40d4      	lsrs	r4, r2
 8000882:	4662      	mov	r2, ip
 8000884:	2a20      	cmp	r2, #32
 8000886:	d005      	beq.n	8000894 <__aeabi_dadd+0x424>
 8000888:	4667      	mov	r7, ip
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	1bd2      	subs	r2, r2, r7
 800088e:	4647      	mov	r7, r8
 8000890:	4097      	lsls	r7, r2
 8000892:	4339      	orrs	r1, r7
 8000894:	1e4a      	subs	r2, r1, #1
 8000896:	4191      	sbcs	r1, r2
 8000898:	4321      	orrs	r1, r4
 800089a:	e635      	b.n	8000508 <__aeabi_dadd+0x98>
 800089c:	4303      	orrs	r3, r0
 800089e:	1e58      	subs	r0, r3, #1
 80008a0:	4183      	sbcs	r3, r0
 80008a2:	1acc      	subs	r4, r1, r3
 80008a4:	42a1      	cmp	r1, r4
 80008a6:	41bf      	sbcs	r7, r7
 80008a8:	4643      	mov	r3, r8
 80008aa:	427f      	negs	r7, r7
 80008ac:	4655      	mov	r5, sl
 80008ae:	464e      	mov	r6, r9
 80008b0:	1bdf      	subs	r7, r3, r7
 80008b2:	e62e      	b.n	8000512 <__aeabi_dadd+0xa2>
 80008b4:	0002      	movs	r2, r0
 80008b6:	431a      	orrs	r2, r3
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x44c>
 80008ba:	e0bd      	b.n	8000a38 <__aeabi_dadd+0x5c8>
 80008bc:	4662      	mov	r2, ip
 80008be:	4664      	mov	r4, ip
 80008c0:	3a01      	subs	r2, #1
 80008c2:	2c01      	cmp	r4, #1
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dadd+0x458>
 80008c6:	e0e5      	b.n	8000a94 <__aeabi_dadd+0x624>
 80008c8:	4c85      	ldr	r4, [pc, #532]	; (8000ae0 <__aeabi_dadd+0x670>)
 80008ca:	45a4      	cmp	ip, r4
 80008cc:	d058      	beq.n	8000980 <__aeabi_dadd+0x510>
 80008ce:	4694      	mov	ip, r2
 80008d0:	e749      	b.n	8000766 <__aeabi_dadd+0x2f6>
 80008d2:	4664      	mov	r4, ip
 80008d4:	2220      	movs	r2, #32
 80008d6:	1b12      	subs	r2, r2, r4
 80008d8:	4644      	mov	r4, r8
 80008da:	4094      	lsls	r4, r2
 80008dc:	000f      	movs	r7, r1
 80008de:	46a1      	mov	r9, r4
 80008e0:	4664      	mov	r4, ip
 80008e2:	4091      	lsls	r1, r2
 80008e4:	40e7      	lsrs	r7, r4
 80008e6:	464c      	mov	r4, r9
 80008e8:	1e4a      	subs	r2, r1, #1
 80008ea:	4191      	sbcs	r1, r2
 80008ec:	433c      	orrs	r4, r7
 80008ee:	4642      	mov	r2, r8
 80008f0:	430c      	orrs	r4, r1
 80008f2:	4661      	mov	r1, ip
 80008f4:	40ca      	lsrs	r2, r1
 80008f6:	1880      	adds	r0, r0, r2
 80008f8:	e6f4      	b.n	80006e4 <__aeabi_dadd+0x274>
 80008fa:	4c79      	ldr	r4, [pc, #484]	; (8000ae0 <__aeabi_dadd+0x670>)
 80008fc:	42a2      	cmp	r2, r4
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x492>
 8000900:	e6fd      	b.n	80006fe <__aeabi_dadd+0x28e>
 8000902:	1859      	adds	r1, r3, r1
 8000904:	4299      	cmp	r1, r3
 8000906:	419b      	sbcs	r3, r3
 8000908:	4440      	add	r0, r8
 800090a:	425f      	negs	r7, r3
 800090c:	19c7      	adds	r7, r0, r7
 800090e:	07fc      	lsls	r4, r7, #31
 8000910:	0849      	lsrs	r1, r1, #1
 8000912:	0016      	movs	r6, r2
 8000914:	430c      	orrs	r4, r1
 8000916:	087f      	lsrs	r7, r7, #1
 8000918:	e6cf      	b.n	80006ba <__aeabi_dadd+0x24a>
 800091a:	1acc      	subs	r4, r1, r3
 800091c:	42a1      	cmp	r1, r4
 800091e:	41bf      	sbcs	r7, r7
 8000920:	4643      	mov	r3, r8
 8000922:	427f      	negs	r7, r7
 8000924:	1a18      	subs	r0, r3, r0
 8000926:	4655      	mov	r5, sl
 8000928:	1bc7      	subs	r7, r0, r7
 800092a:	e5f7      	b.n	800051c <__aeabi_dadd+0xac>
 800092c:	08c9      	lsrs	r1, r1, #3
 800092e:	077b      	lsls	r3, r7, #29
 8000930:	4655      	mov	r5, sl
 8000932:	430b      	orrs	r3, r1
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	e6c8      	b.n	80006ca <__aeabi_dadd+0x25a>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d000      	beq.n	800093e <__aeabi_dadd+0x4ce>
 800093c:	e081      	b.n	8000a42 <__aeabi_dadd+0x5d2>
 800093e:	4643      	mov	r3, r8
 8000940:	430b      	orrs	r3, r1
 8000942:	d115      	bne.n	8000970 <__aeabi_dadd+0x500>
 8000944:	2080      	movs	r0, #128	; 0x80
 8000946:	2500      	movs	r5, #0
 8000948:	0300      	lsls	r0, r0, #12
 800094a:	e6e3      	b.n	8000714 <__aeabi_dadd+0x2a4>
 800094c:	1a5c      	subs	r4, r3, r1
 800094e:	42a3      	cmp	r3, r4
 8000950:	419b      	sbcs	r3, r3
 8000952:	1bc7      	subs	r7, r0, r7
 8000954:	425b      	negs	r3, r3
 8000956:	2601      	movs	r6, #1
 8000958:	1aff      	subs	r7, r7, r3
 800095a:	e5da      	b.n	8000512 <__aeabi_dadd+0xa2>
 800095c:	0742      	lsls	r2, r0, #29
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	4313      	orrs	r3, r2
 8000962:	08c0      	lsrs	r0, r0, #3
 8000964:	e6d2      	b.n	800070c <__aeabi_dadd+0x29c>
 8000966:	0742      	lsls	r2, r0, #29
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	4313      	orrs	r3, r2
 800096c:	08c0      	lsrs	r0, r0, #3
 800096e:	e6ac      	b.n	80006ca <__aeabi_dadd+0x25a>
 8000970:	4643      	mov	r3, r8
 8000972:	4642      	mov	r2, r8
 8000974:	08c9      	lsrs	r1, r1, #3
 8000976:	075b      	lsls	r3, r3, #29
 8000978:	4655      	mov	r5, sl
 800097a:	430b      	orrs	r3, r1
 800097c:	08d0      	lsrs	r0, r2, #3
 800097e:	e6c5      	b.n	800070c <__aeabi_dadd+0x29c>
 8000980:	4643      	mov	r3, r8
 8000982:	4642      	mov	r2, r8
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	08c9      	lsrs	r1, r1, #3
 8000988:	430b      	orrs	r3, r1
 800098a:	08d0      	lsrs	r0, r2, #3
 800098c:	e6be      	b.n	800070c <__aeabi_dadd+0x29c>
 800098e:	4303      	orrs	r3, r0
 8000990:	001c      	movs	r4, r3
 8000992:	1e63      	subs	r3, r4, #1
 8000994:	419c      	sbcs	r4, r3
 8000996:	e6fc      	b.n	8000792 <__aeabi_dadd+0x322>
 8000998:	0002      	movs	r2, r0
 800099a:	3c20      	subs	r4, #32
 800099c:	40e2      	lsrs	r2, r4
 800099e:	0014      	movs	r4, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	2a20      	cmp	r2, #32
 80009a4:	d003      	beq.n	80009ae <__aeabi_dadd+0x53e>
 80009a6:	2540      	movs	r5, #64	; 0x40
 80009a8:	1aad      	subs	r5, r5, r2
 80009aa:	40a8      	lsls	r0, r5
 80009ac:	4303      	orrs	r3, r0
 80009ae:	1e58      	subs	r0, r3, #1
 80009b0:	4183      	sbcs	r3, r0
 80009b2:	4323      	orrs	r3, r4
 80009b4:	e775      	b.n	80008a2 <__aeabi_dadd+0x432>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d0e2      	beq.n	8000980 <__aeabi_dadd+0x510>
 80009ba:	003a      	movs	r2, r7
 80009bc:	430a      	orrs	r2, r1
 80009be:	d0cd      	beq.n	800095c <__aeabi_dadd+0x4ec>
 80009c0:	0742      	lsls	r2, r0, #29
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	08c0      	lsrs	r0, r0, #3
 80009ca:	0312      	lsls	r2, r2, #12
 80009cc:	4210      	tst	r0, r2
 80009ce:	d006      	beq.n	80009de <__aeabi_dadd+0x56e>
 80009d0:	08fc      	lsrs	r4, r7, #3
 80009d2:	4214      	tst	r4, r2
 80009d4:	d103      	bne.n	80009de <__aeabi_dadd+0x56e>
 80009d6:	0020      	movs	r0, r4
 80009d8:	08cb      	lsrs	r3, r1, #3
 80009da:	077a      	lsls	r2, r7, #29
 80009dc:	4313      	orrs	r3, r2
 80009de:	0f5a      	lsrs	r2, r3, #29
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	0752      	lsls	r2, r2, #29
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	e690      	b.n	800070c <__aeabi_dadd+0x29c>
 80009ea:	4643      	mov	r3, r8
 80009ec:	430b      	orrs	r3, r1
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x582>
 80009f0:	e709      	b.n	8000806 <__aeabi_dadd+0x396>
 80009f2:	4643      	mov	r3, r8
 80009f4:	4642      	mov	r2, r8
 80009f6:	08c9      	lsrs	r1, r1, #3
 80009f8:	075b      	lsls	r3, r3, #29
 80009fa:	4655      	mov	r5, sl
 80009fc:	430b      	orrs	r3, r1
 80009fe:	08d0      	lsrs	r0, r2, #3
 8000a00:	e666      	b.n	80006d0 <__aeabi_dadd+0x260>
 8000a02:	1acc      	subs	r4, r1, r3
 8000a04:	42a1      	cmp	r1, r4
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	1a3f      	subs	r7, r7, r0
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	4655      	mov	r5, sl
 8000a0e:	2601      	movs	r6, #1
 8000a10:	1a7f      	subs	r7, r7, r1
 8000a12:	e57e      	b.n	8000512 <__aeabi_dadd+0xa2>
 8000a14:	4642      	mov	r2, r8
 8000a16:	1a5c      	subs	r4, r3, r1
 8000a18:	1a87      	subs	r7, r0, r2
 8000a1a:	42a3      	cmp	r3, r4
 8000a1c:	4192      	sbcs	r2, r2
 8000a1e:	4252      	negs	r2, r2
 8000a20:	1abf      	subs	r7, r7, r2
 8000a22:	023a      	lsls	r2, r7, #8
 8000a24:	d53d      	bpl.n	8000aa2 <__aeabi_dadd+0x632>
 8000a26:	1acc      	subs	r4, r1, r3
 8000a28:	42a1      	cmp	r1, r4
 8000a2a:	4189      	sbcs	r1, r1
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	4249      	negs	r1, r1
 8000a30:	1a1f      	subs	r7, r3, r0
 8000a32:	4655      	mov	r5, sl
 8000a34:	1a7f      	subs	r7, r7, r1
 8000a36:	e595      	b.n	8000564 <__aeabi_dadd+0xf4>
 8000a38:	077b      	lsls	r3, r7, #29
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	08f8      	lsrs	r0, r7, #3
 8000a40:	e643      	b.n	80006ca <__aeabi_dadd+0x25a>
 8000a42:	4644      	mov	r4, r8
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	430c      	orrs	r4, r1
 8000a48:	d130      	bne.n	8000aac <__aeabi_dadd+0x63c>
 8000a4a:	0742      	lsls	r2, r0, #29
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	08c0      	lsrs	r0, r0, #3
 8000a50:	e65c      	b.n	800070c <__aeabi_dadd+0x29c>
 8000a52:	077b      	lsls	r3, r7, #29
 8000a54:	08c9      	lsrs	r1, r1, #3
 8000a56:	430b      	orrs	r3, r1
 8000a58:	08f8      	lsrs	r0, r7, #3
 8000a5a:	e639      	b.n	80006d0 <__aeabi_dadd+0x260>
 8000a5c:	185c      	adds	r4, r3, r1
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	419b      	sbcs	r3, r3
 8000a62:	4440      	add	r0, r8
 8000a64:	425b      	negs	r3, r3
 8000a66:	18c7      	adds	r7, r0, r3
 8000a68:	023b      	lsls	r3, r7, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x5fe>
 8000a6c:	e625      	b.n	80006ba <__aeabi_dadd+0x24a>
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <__aeabi_dadd+0x674>)
 8000a70:	2601      	movs	r6, #1
 8000a72:	401f      	ands	r7, r3
 8000a74:	e621      	b.n	80006ba <__aeabi_dadd+0x24a>
 8000a76:	0004      	movs	r4, r0
 8000a78:	3a20      	subs	r2, #32
 8000a7a:	40d4      	lsrs	r4, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	2a20      	cmp	r2, #32
 8000a80:	d004      	beq.n	8000a8c <__aeabi_dadd+0x61c>
 8000a82:	2240      	movs	r2, #64	; 0x40
 8000a84:	4666      	mov	r6, ip
 8000a86:	1b92      	subs	r2, r2, r6
 8000a88:	4090      	lsls	r0, r2
 8000a8a:	4303      	orrs	r3, r0
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	431c      	orrs	r4, r3
 8000a92:	e67e      	b.n	8000792 <__aeabi_dadd+0x322>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	428c      	cmp	r4, r1
 8000a98:	4189      	sbcs	r1, r1
 8000a9a:	4440      	add	r0, r8
 8000a9c:	4249      	negs	r1, r1
 8000a9e:	1847      	adds	r7, r0, r1
 8000aa0:	e6dd      	b.n	800085e <__aeabi_dadd+0x3ee>
 8000aa2:	0023      	movs	r3, r4
 8000aa4:	433b      	orrs	r3, r7
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x63a>
 8000aa8:	e6ad      	b.n	8000806 <__aeabi_dadd+0x396>
 8000aaa:	e606      	b.n	80006ba <__aeabi_dadd+0x24a>
 8000aac:	0744      	lsls	r4, r0, #29
 8000aae:	4323      	orrs	r3, r4
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	08c0      	lsrs	r0, r0, #3
 8000ab4:	0324      	lsls	r4, r4, #12
 8000ab6:	4220      	tst	r0, r4
 8000ab8:	d008      	beq.n	8000acc <__aeabi_dadd+0x65c>
 8000aba:	4642      	mov	r2, r8
 8000abc:	08d6      	lsrs	r6, r2, #3
 8000abe:	4226      	tst	r6, r4
 8000ac0:	d104      	bne.n	8000acc <__aeabi_dadd+0x65c>
 8000ac2:	4655      	mov	r5, sl
 8000ac4:	0030      	movs	r0, r6
 8000ac6:	08cb      	lsrs	r3, r1, #3
 8000ac8:	0751      	lsls	r1, r2, #29
 8000aca:	430b      	orrs	r3, r1
 8000acc:	0f5a      	lsrs	r2, r3, #29
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	0752      	lsls	r2, r2, #29
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	e619      	b.n	800070c <__aeabi_dadd+0x29c>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	4a01      	ldr	r2, [pc, #4]	; (8000ae0 <__aeabi_dadd+0x670>)
 8000adc:	001f      	movs	r7, r3
 8000ade:	e55e      	b.n	800059e <__aeabi_dadd+0x12e>
 8000ae0:	000007ff 	.word	0x000007ff
 8000ae4:	ff7fffff 	.word	0xff7fffff

08000ae8 <__aeabi_ddiv>:
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	4657      	mov	r7, sl
 8000aec:	464e      	mov	r6, r9
 8000aee:	4645      	mov	r5, r8
 8000af0:	46de      	mov	lr, fp
 8000af2:	b5e0      	push	{r5, r6, r7, lr}
 8000af4:	4681      	mov	r9, r0
 8000af6:	0005      	movs	r5, r0
 8000af8:	030c      	lsls	r4, r1, #12
 8000afa:	0048      	lsls	r0, r1, #1
 8000afc:	4692      	mov	sl, r2
 8000afe:	001f      	movs	r7, r3
 8000b00:	b085      	sub	sp, #20
 8000b02:	0b24      	lsrs	r4, r4, #12
 8000b04:	0d40      	lsrs	r0, r0, #21
 8000b06:	0fce      	lsrs	r6, r1, #31
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_ddiv+0x26>
 8000b0c:	e156      	b.n	8000dbc <__aeabi_ddiv+0x2d4>
 8000b0e:	4bd4      	ldr	r3, [pc, #848]	; (8000e60 <__aeabi_ddiv+0x378>)
 8000b10:	4298      	cmp	r0, r3
 8000b12:	d100      	bne.n	8000b16 <__aeabi_ddiv+0x2e>
 8000b14:	e172      	b.n	8000dfc <__aeabi_ddiv+0x314>
 8000b16:	0f6b      	lsrs	r3, r5, #29
 8000b18:	00e4      	lsls	r4, r4, #3
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	4323      	orrs	r3, r4
 8000b22:	4698      	mov	r8, r3
 8000b24:	4bcf      	ldr	r3, [pc, #828]	; (8000e64 <__aeabi_ddiv+0x37c>)
 8000b26:	00ed      	lsls	r5, r5, #3
 8000b28:	469b      	mov	fp, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	4483      	add	fp, r0
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	033c      	lsls	r4, r7, #12
 8000b34:	007b      	lsls	r3, r7, #1
 8000b36:	4650      	mov	r0, sl
 8000b38:	0b24      	lsrs	r4, r4, #12
 8000b3a:	0d5b      	lsrs	r3, r3, #21
 8000b3c:	0fff      	lsrs	r7, r7, #31
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_ddiv+0x5c>
 8000b42:	e11f      	b.n	8000d84 <__aeabi_ddiv+0x29c>
 8000b44:	4ac6      	ldr	r2, [pc, #792]	; (8000e60 <__aeabi_ddiv+0x378>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_ddiv+0x64>
 8000b4a:	e162      	b.n	8000e12 <__aeabi_ddiv+0x32a>
 8000b4c:	49c5      	ldr	r1, [pc, #788]	; (8000e64 <__aeabi_ddiv+0x37c>)
 8000b4e:	0f42      	lsrs	r2, r0, #29
 8000b50:	468c      	mov	ip, r1
 8000b52:	00e4      	lsls	r4, r4, #3
 8000b54:	4659      	mov	r1, fp
 8000b56:	4314      	orrs	r4, r2
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	4463      	add	r3, ip
 8000b5c:	0412      	lsls	r2, r2, #16
 8000b5e:	1acb      	subs	r3, r1, r3
 8000b60:	4314      	orrs	r4, r2
 8000b62:	469b      	mov	fp, r3
 8000b64:	00c2      	lsls	r2, r0, #3
 8000b66:	2000      	movs	r0, #0
 8000b68:	0033      	movs	r3, r6
 8000b6a:	407b      	eors	r3, r7
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	464b      	mov	r3, r9
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d827      	bhi.n	8000bc4 <__aeabi_ddiv+0xdc>
 8000b74:	49bc      	ldr	r1, [pc, #752]	; (8000e68 <__aeabi_ddiv+0x380>)
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	58cb      	ldr	r3, [r1, r3]
 8000b7a:	469f      	mov	pc, r3
 8000b7c:	46b2      	mov	sl, r6
 8000b7e:	9b00      	ldr	r3, [sp, #0]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d016      	beq.n	8000bb2 <__aeabi_ddiv+0xca>
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d100      	bne.n	8000b8a <__aeabi_ddiv+0xa2>
 8000b88:	e28e      	b.n	80010a8 <__aeabi_ddiv+0x5c0>
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_ddiv+0xa8>
 8000b8e:	e0d9      	b.n	8000d44 <__aeabi_ddiv+0x25c>
 8000b90:	2300      	movs	r3, #0
 8000b92:	2400      	movs	r4, #0
 8000b94:	2500      	movs	r5, #0
 8000b96:	4652      	mov	r2, sl
 8000b98:	051b      	lsls	r3, r3, #20
 8000b9a:	4323      	orrs	r3, r4
 8000b9c:	07d2      	lsls	r2, r2, #31
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	0028      	movs	r0, r5
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	b005      	add	sp, #20
 8000ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ba8:	46bb      	mov	fp, r7
 8000baa:	46b2      	mov	sl, r6
 8000bac:	46a9      	mov	r9, r5
 8000bae:	46a0      	mov	r8, r4
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	4baa      	ldr	r3, [pc, #680]	; (8000e60 <__aeabi_ddiv+0x378>)
 8000bb8:	e7ed      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000bba:	46ba      	mov	sl, r7
 8000bbc:	46a0      	mov	r8, r4
 8000bbe:	0015      	movs	r5, r2
 8000bc0:	9000      	str	r0, [sp, #0]
 8000bc2:	e7dc      	b.n	8000b7e <__aeabi_ddiv+0x96>
 8000bc4:	4544      	cmp	r4, r8
 8000bc6:	d200      	bcs.n	8000bca <__aeabi_ddiv+0xe2>
 8000bc8:	e1c7      	b.n	8000f5a <__aeabi_ddiv+0x472>
 8000bca:	d100      	bne.n	8000bce <__aeabi_ddiv+0xe6>
 8000bcc:	e1c2      	b.n	8000f54 <__aeabi_ddiv+0x46c>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	469c      	mov	ip, r3
 8000bd4:	002e      	movs	r6, r5
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	2500      	movs	r5, #0
 8000bda:	44e3      	add	fp, ip
 8000bdc:	0223      	lsls	r3, r4, #8
 8000bde:	0e14      	lsrs	r4, r2, #24
 8000be0:	431c      	orrs	r4, r3
 8000be2:	0c1b      	lsrs	r3, r3, #16
 8000be4:	4699      	mov	r9, r3
 8000be6:	0423      	lsls	r3, r4, #16
 8000be8:	0c1f      	lsrs	r7, r3, #16
 8000bea:	0212      	lsls	r2, r2, #8
 8000bec:	4649      	mov	r1, r9
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	9701      	str	r7, [sp, #4]
 8000bf2:	f7ff fb0f 	bl	8000214 <__aeabi_uidivmod>
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	437a      	muls	r2, r7
 8000bfa:	040b      	lsls	r3, r1, #16
 8000bfc:	0c31      	lsrs	r1, r6, #16
 8000bfe:	4680      	mov	r8, r0
 8000c00:	4319      	orrs	r1, r3
 8000c02:	428a      	cmp	r2, r1
 8000c04:	d907      	bls.n	8000c16 <__aeabi_ddiv+0x12e>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	1909      	adds	r1, r1, r4
 8000c0e:	44e0      	add	r8, ip
 8000c10:	428c      	cmp	r4, r1
 8000c12:	d800      	bhi.n	8000c16 <__aeabi_ddiv+0x12e>
 8000c14:	e207      	b.n	8001026 <__aeabi_ddiv+0x53e>
 8000c16:	1a88      	subs	r0, r1, r2
 8000c18:	4649      	mov	r1, r9
 8000c1a:	f7ff fafb 	bl	8000214 <__aeabi_uidivmod>
 8000c1e:	0409      	lsls	r1, r1, #16
 8000c20:	468c      	mov	ip, r1
 8000c22:	0431      	lsls	r1, r6, #16
 8000c24:	4666      	mov	r6, ip
 8000c26:	9a01      	ldr	r2, [sp, #4]
 8000c28:	0c09      	lsrs	r1, r1, #16
 8000c2a:	4342      	muls	r2, r0
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	4331      	orrs	r1, r6
 8000c30:	428a      	cmp	r2, r1
 8000c32:	d904      	bls.n	8000c3e <__aeabi_ddiv+0x156>
 8000c34:	1909      	adds	r1, r1, r4
 8000c36:	3b01      	subs	r3, #1
 8000c38:	428c      	cmp	r4, r1
 8000c3a:	d800      	bhi.n	8000c3e <__aeabi_ddiv+0x156>
 8000c3c:	e1ed      	b.n	800101a <__aeabi_ddiv+0x532>
 8000c3e:	1a88      	subs	r0, r1, r2
 8000c40:	4642      	mov	r2, r8
 8000c42:	0412      	lsls	r2, r2, #16
 8000c44:	431a      	orrs	r2, r3
 8000c46:	4690      	mov	r8, r2
 8000c48:	4641      	mov	r1, r8
 8000c4a:	9b00      	ldr	r3, [sp, #0]
 8000c4c:	040e      	lsls	r6, r1, #16
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	001f      	movs	r7, r3
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	9b00      	ldr	r3, [sp, #0]
 8000c56:	0c36      	lsrs	r6, r6, #16
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	0c19      	lsrs	r1, r3, #16
 8000c5c:	000b      	movs	r3, r1
 8000c5e:	4373      	muls	r3, r6
 8000c60:	0c12      	lsrs	r2, r2, #16
 8000c62:	437e      	muls	r6, r7
 8000c64:	9103      	str	r1, [sp, #12]
 8000c66:	4351      	muls	r1, r2
 8000c68:	437a      	muls	r2, r7
 8000c6a:	0c1f      	lsrs	r7, r3, #16
 8000c6c:	46bc      	mov	ip, r7
 8000c6e:	1876      	adds	r6, r6, r1
 8000c70:	4466      	add	r6, ip
 8000c72:	42b1      	cmp	r1, r6
 8000c74:	d903      	bls.n	8000c7e <__aeabi_ddiv+0x196>
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	0249      	lsls	r1, r1, #9
 8000c7a:	468c      	mov	ip, r1
 8000c7c:	4462      	add	r2, ip
 8000c7e:	0c31      	lsrs	r1, r6, #16
 8000c80:	188a      	adds	r2, r1, r2
 8000c82:	0431      	lsls	r1, r6, #16
 8000c84:	041e      	lsls	r6, r3, #16
 8000c86:	0c36      	lsrs	r6, r6, #16
 8000c88:	198e      	adds	r6, r1, r6
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d302      	bcc.n	8000c94 <__aeabi_ddiv+0x1ac>
 8000c8e:	d112      	bne.n	8000cb6 <__aeabi_ddiv+0x1ce>
 8000c90:	42b5      	cmp	r5, r6
 8000c92:	d210      	bcs.n	8000cb6 <__aeabi_ddiv+0x1ce>
 8000c94:	4643      	mov	r3, r8
 8000c96:	1e59      	subs	r1, r3, #1
 8000c98:	9b00      	ldr	r3, [sp, #0]
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	4465      	add	r5, ip
 8000c9e:	001f      	movs	r7, r3
 8000ca0:	429d      	cmp	r5, r3
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	191b      	adds	r3, r3, r4
 8000ca8:	18c0      	adds	r0, r0, r3
 8000caa:	4284      	cmp	r4, r0
 8000cac:	d200      	bcs.n	8000cb0 <__aeabi_ddiv+0x1c8>
 8000cae:	e1a0      	b.n	8000ff2 <__aeabi_ddiv+0x50a>
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x1cc>
 8000cb2:	e19b      	b.n	8000fec <__aeabi_ddiv+0x504>
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	1bae      	subs	r6, r5, r6
 8000cb8:	42b5      	cmp	r5, r6
 8000cba:	41ad      	sbcs	r5, r5
 8000cbc:	1a80      	subs	r0, r0, r2
 8000cbe:	426d      	negs	r5, r5
 8000cc0:	1b40      	subs	r0, r0, r5
 8000cc2:	4284      	cmp	r4, r0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x1e0>
 8000cc6:	e1d5      	b.n	8001074 <__aeabi_ddiv+0x58c>
 8000cc8:	4649      	mov	r1, r9
 8000cca:	f7ff faa3 	bl	8000214 <__aeabi_uidivmod>
 8000cce:	9a01      	ldr	r2, [sp, #4]
 8000cd0:	040b      	lsls	r3, r1, #16
 8000cd2:	4342      	muls	r2, r0
 8000cd4:	0c31      	lsrs	r1, r6, #16
 8000cd6:	0005      	movs	r5, r0
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	d900      	bls.n	8000ce0 <__aeabi_ddiv+0x1f8>
 8000cde:	e16c      	b.n	8000fba <__aeabi_ddiv+0x4d2>
 8000ce0:	1a88      	subs	r0, r1, r2
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	f7ff fa96 	bl	8000214 <__aeabi_uidivmod>
 8000ce8:	9a01      	ldr	r2, [sp, #4]
 8000cea:	0436      	lsls	r6, r6, #16
 8000cec:	4342      	muls	r2, r0
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	0c36      	lsrs	r6, r6, #16
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	430e      	orrs	r6, r1
 8000cf6:	42b2      	cmp	r2, r6
 8000cf8:	d900      	bls.n	8000cfc <__aeabi_ddiv+0x214>
 8000cfa:	e153      	b.n	8000fa4 <__aeabi_ddiv+0x4bc>
 8000cfc:	9803      	ldr	r0, [sp, #12]
 8000cfe:	1ab6      	subs	r6, r6, r2
 8000d00:	0002      	movs	r2, r0
 8000d02:	042d      	lsls	r5, r5, #16
 8000d04:	431d      	orrs	r5, r3
 8000d06:	9f02      	ldr	r7, [sp, #8]
 8000d08:	042b      	lsls	r3, r5, #16
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	435a      	muls	r2, r3
 8000d0e:	437b      	muls	r3, r7
 8000d10:	469c      	mov	ip, r3
 8000d12:	0c29      	lsrs	r1, r5, #16
 8000d14:	4348      	muls	r0, r1
 8000d16:	0c13      	lsrs	r3, r2, #16
 8000d18:	4484      	add	ip, r0
 8000d1a:	4463      	add	r3, ip
 8000d1c:	4379      	muls	r1, r7
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d903      	bls.n	8000d2a <__aeabi_ddiv+0x242>
 8000d22:	2080      	movs	r0, #128	; 0x80
 8000d24:	0240      	lsls	r0, r0, #9
 8000d26:	4684      	mov	ip, r0
 8000d28:	4461      	add	r1, ip
 8000d2a:	0c18      	lsrs	r0, r3, #16
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	0c12      	lsrs	r2, r2, #16
 8000d32:	1841      	adds	r1, r0, r1
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	428e      	cmp	r6, r1
 8000d38:	d200      	bcs.n	8000d3c <__aeabi_ddiv+0x254>
 8000d3a:	e0ff      	b.n	8000f3c <__aeabi_ddiv+0x454>
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x258>
 8000d3e:	e0fa      	b.n	8000f36 <__aeabi_ddiv+0x44e>
 8000d40:	2301      	movs	r3, #1
 8000d42:	431d      	orrs	r5, r3
 8000d44:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <__aeabi_ddiv+0x384>)
 8000d46:	445a      	add	r2, fp
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_ddiv+0x266>
 8000d4c:	e0aa      	b.n	8000ea4 <__aeabi_ddiv+0x3bc>
 8000d4e:	076b      	lsls	r3, r5, #29
 8000d50:	d000      	beq.n	8000d54 <__aeabi_ddiv+0x26c>
 8000d52:	e13d      	b.n	8000fd0 <__aeabi_ddiv+0x4e8>
 8000d54:	08ed      	lsrs	r5, r5, #3
 8000d56:	4643      	mov	r3, r8
 8000d58:	01db      	lsls	r3, r3, #7
 8000d5a:	d506      	bpl.n	8000d6a <__aeabi_ddiv+0x282>
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <__aeabi_ddiv+0x388>)
 8000d60:	401a      	ands	r2, r3
 8000d62:	4690      	mov	r8, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	445a      	add	r2, fp
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <__aeabi_ddiv+0x38c>)
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_ddiv+0x28a>
 8000d70:	e71f      	b.n	8000bb2 <__aeabi_ddiv+0xca>
 8000d72:	4643      	mov	r3, r8
 8000d74:	075b      	lsls	r3, r3, #29
 8000d76:	431d      	orrs	r5, r3
 8000d78:	4643      	mov	r3, r8
 8000d7a:	0552      	lsls	r2, r2, #21
 8000d7c:	025c      	lsls	r4, r3, #9
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	0d53      	lsrs	r3, r2, #21
 8000d82:	e708      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000d84:	4652      	mov	r2, sl
 8000d86:	4322      	orrs	r2, r4
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x2a4>
 8000d8a:	e07b      	b.n	8000e84 <__aeabi_ddiv+0x39c>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0x2aa>
 8000d90:	e0fa      	b.n	8000f88 <__aeabi_ddiv+0x4a0>
 8000d92:	0020      	movs	r0, r4
 8000d94:	f001 f90e 	bl	8001fb4 <__clzsi2>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	3a0b      	subs	r2, #11
 8000d9c:	231d      	movs	r3, #29
 8000d9e:	0001      	movs	r1, r0
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	4652      	mov	r2, sl
 8000da4:	3908      	subs	r1, #8
 8000da6:	40da      	lsrs	r2, r3
 8000da8:	408c      	lsls	r4, r1
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4652      	mov	r2, sl
 8000dae:	408a      	lsls	r2, r1
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <__aeabi_ddiv+0x390>)
 8000db2:	4458      	add	r0, fp
 8000db4:	469b      	mov	fp, r3
 8000db6:	4483      	add	fp, r0
 8000db8:	2000      	movs	r0, #0
 8000dba:	e6d5      	b.n	8000b68 <__aeabi_ddiv+0x80>
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	4323      	orrs	r3, r4
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	d044      	beq.n	8000e4e <__aeabi_ddiv+0x366>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2e2>
 8000dc8:	e0ce      	b.n	8000f68 <__aeabi_ddiv+0x480>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f8f2 	bl	8001fb4 <__clzsi2>
 8000dd0:	0001      	movs	r1, r0
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	390b      	subs	r1, #11
 8000dd6:	231d      	movs	r3, #29
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	4649      	mov	r1, r9
 8000ddc:	0010      	movs	r0, r2
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	3808      	subs	r0, #8
 8000de2:	4084      	lsls	r4, r0
 8000de4:	000b      	movs	r3, r1
 8000de6:	464d      	mov	r5, r9
 8000de8:	4323      	orrs	r3, r4
 8000dea:	4698      	mov	r8, r3
 8000dec:	4085      	lsls	r5, r0
 8000dee:	4823      	ldr	r0, [pc, #140]	; (8000e7c <__aeabi_ddiv+0x394>)
 8000df0:	1a83      	subs	r3, r0, r2
 8000df2:	469b      	mov	fp, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	4699      	mov	r9, r3
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	e69a      	b.n	8000b32 <__aeabi_ddiv+0x4a>
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	4323      	orrs	r3, r4
 8000e00:	4698      	mov	r8, r3
 8000e02:	d11d      	bne.n	8000e40 <__aeabi_ddiv+0x358>
 8000e04:	2308      	movs	r3, #8
 8000e06:	4699      	mov	r9, r3
 8000e08:	3b06      	subs	r3, #6
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4683      	mov	fp, r0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	e68f      	b.n	8000b32 <__aeabi_ddiv+0x4a>
 8000e12:	4652      	mov	r2, sl
 8000e14:	4322      	orrs	r2, r4
 8000e16:	d109      	bne.n	8000e2c <__aeabi_ddiv+0x344>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <__aeabi_ddiv+0x398>)
 8000e20:	4689      	mov	r9, r1
 8000e22:	469c      	mov	ip, r3
 8000e24:	2400      	movs	r4, #0
 8000e26:	2002      	movs	r0, #2
 8000e28:	44e3      	add	fp, ip
 8000e2a:	e69d      	b.n	8000b68 <__aeabi_ddiv+0x80>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	464a      	mov	r2, r9
 8000e30:	431a      	orrs	r2, r3
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <__aeabi_ddiv+0x398>)
 8000e34:	4691      	mov	r9, r2
 8000e36:	469c      	mov	ip, r3
 8000e38:	4652      	mov	r2, sl
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	44e3      	add	fp, ip
 8000e3e:	e693      	b.n	8000b68 <__aeabi_ddiv+0x80>
 8000e40:	230c      	movs	r3, #12
 8000e42:	4699      	mov	r9, r3
 8000e44:	3b09      	subs	r3, #9
 8000e46:	46a0      	mov	r8, r4
 8000e48:	4683      	mov	fp, r0
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	e671      	b.n	8000b32 <__aeabi_ddiv+0x4a>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4699      	mov	r9, r3
 8000e52:	2300      	movs	r3, #0
 8000e54:	469b      	mov	fp, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	2500      	movs	r5, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	e669      	b.n	8000b32 <__aeabi_ddiv+0x4a>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	fffffc01 	.word	0xfffffc01
 8000e68:	080062c8 	.word	0x080062c8
 8000e6c:	000003ff 	.word	0x000003ff
 8000e70:	feffffff 	.word	0xfeffffff
 8000e74:	000007fe 	.word	0x000007fe
 8000e78:	000003f3 	.word	0x000003f3
 8000e7c:	fffffc0d 	.word	0xfffffc0d
 8000e80:	fffff801 	.word	0xfffff801
 8000e84:	4649      	mov	r1, r9
 8000e86:	2301      	movs	r3, #1
 8000e88:	4319      	orrs	r1, r3
 8000e8a:	4689      	mov	r9, r1
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e66a      	b.n	8000b68 <__aeabi_ddiv+0x80>
 8000e92:	2300      	movs	r3, #0
 8000e94:	2480      	movs	r4, #128	; 0x80
 8000e96:	469a      	mov	sl, r3
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4b8a      	ldr	r3, [pc, #552]	; (80010c4 <__aeabi_ddiv+0x5dc>)
 8000e9c:	0324      	lsls	r4, r4, #12
 8000e9e:	e67a      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000ea0:	2501      	movs	r5, #1
 8000ea2:	426d      	negs	r5, r5
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	2b38      	cmp	r3, #56	; 0x38
 8000eaa:	dd00      	ble.n	8000eae <__aeabi_ddiv+0x3c6>
 8000eac:	e670      	b.n	8000b90 <__aeabi_ddiv+0xa8>
 8000eae:	2b1f      	cmp	r3, #31
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_ddiv+0x3cc>
 8000eb2:	e0bf      	b.n	8001034 <__aeabi_ddiv+0x54c>
 8000eb4:	211f      	movs	r1, #31
 8000eb6:	4249      	negs	r1, r1
 8000eb8:	1a8a      	subs	r2, r1, r2
 8000eba:	4641      	mov	r1, r8
 8000ebc:	40d1      	lsrs	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	2b20      	cmp	r3, #32
 8000ec2:	d004      	beq.n	8000ece <__aeabi_ddiv+0x3e6>
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <__aeabi_ddiv+0x5e0>)
 8000ec8:	445b      	add	r3, fp
 8000eca:	4099      	lsls	r1, r3
 8000ecc:	430d      	orrs	r5, r1
 8000ece:	1e6b      	subs	r3, r5, #1
 8000ed0:	419d      	sbcs	r5, r3
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	432a      	orrs	r2, r5
 8000ed6:	001d      	movs	r5, r3
 8000ed8:	2400      	movs	r4, #0
 8000eda:	4015      	ands	r5, r2
 8000edc:	4213      	tst	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x3fa>
 8000ee0:	e0d4      	b.n	800108c <__aeabi_ddiv+0x5a4>
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	4011      	ands	r1, r2
 8000ee8:	2904      	cmp	r1, #4
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x406>
 8000eec:	e0cb      	b.n	8001086 <__aeabi_ddiv+0x59e>
 8000eee:	1d11      	adds	r1, r2, #4
 8000ef0:	4291      	cmp	r1, r2
 8000ef2:	4192      	sbcs	r2, r2
 8000ef4:	4252      	negs	r2, r2
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	0219      	lsls	r1, r3, #8
 8000efc:	d400      	bmi.n	8000f00 <__aeabi_ddiv+0x418>
 8000efe:	e0c2      	b.n	8001086 <__aeabi_ddiv+0x59e>
 8000f00:	2301      	movs	r3, #1
 8000f02:	2400      	movs	r4, #0
 8000f04:	2500      	movs	r5, #0
 8000f06:	e646      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	031b      	lsls	r3, r3, #12
 8000f0e:	4219      	tst	r1, r3
 8000f10:	d008      	beq.n	8000f24 <__aeabi_ddiv+0x43c>
 8000f12:	421c      	tst	r4, r3
 8000f14:	d106      	bne.n	8000f24 <__aeabi_ddiv+0x43c>
 8000f16:	431c      	orrs	r4, r3
 8000f18:	0324      	lsls	r4, r4, #12
 8000f1a:	46ba      	mov	sl, r7
 8000f1c:	0015      	movs	r5, r2
 8000f1e:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <__aeabi_ddiv+0x5dc>)
 8000f20:	0b24      	lsrs	r4, r4, #12
 8000f22:	e638      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000f24:	2480      	movs	r4, #128	; 0x80
 8000f26:	4643      	mov	r3, r8
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	0324      	lsls	r4, r4, #12
 8000f2e:	46b2      	mov	sl, r6
 8000f30:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <__aeabi_ddiv+0x5dc>)
 8000f32:	0b24      	lsrs	r4, r4, #12
 8000f34:	e62f      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_ddiv+0x454>
 8000f3a:	e703      	b.n	8000d44 <__aeabi_ddiv+0x25c>
 8000f3c:	19a6      	adds	r6, r4, r6
 8000f3e:	1e68      	subs	r0, r5, #1
 8000f40:	42a6      	cmp	r6, r4
 8000f42:	d200      	bcs.n	8000f46 <__aeabi_ddiv+0x45e>
 8000f44:	e08d      	b.n	8001062 <__aeabi_ddiv+0x57a>
 8000f46:	428e      	cmp	r6, r1
 8000f48:	d200      	bcs.n	8000f4c <__aeabi_ddiv+0x464>
 8000f4a:	e0a3      	b.n	8001094 <__aeabi_ddiv+0x5ac>
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x468>
 8000f4e:	e0b3      	b.n	80010b8 <__aeabi_ddiv+0x5d0>
 8000f50:	0005      	movs	r5, r0
 8000f52:	e6f5      	b.n	8000d40 <__aeabi_ddiv+0x258>
 8000f54:	42aa      	cmp	r2, r5
 8000f56:	d900      	bls.n	8000f5a <__aeabi_ddiv+0x472>
 8000f58:	e639      	b.n	8000bce <__aeabi_ddiv+0xe6>
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	07de      	lsls	r6, r3, #31
 8000f5e:	0858      	lsrs	r0, r3, #1
 8000f60:	086b      	lsrs	r3, r5, #1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	07ed      	lsls	r5, r5, #31
 8000f66:	e639      	b.n	8000bdc <__aeabi_ddiv+0xf4>
 8000f68:	4648      	mov	r0, r9
 8000f6a:	f001 f823 	bl	8001fb4 <__clzsi2>
 8000f6e:	0001      	movs	r1, r0
 8000f70:	0002      	movs	r2, r0
 8000f72:	3115      	adds	r1, #21
 8000f74:	3220      	adds	r2, #32
 8000f76:	291c      	cmp	r1, #28
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_ddiv+0x494>
 8000f7a:	e72c      	b.n	8000dd6 <__aeabi_ddiv+0x2ee>
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	3808      	subs	r0, #8
 8000f80:	4083      	lsls	r3, r0
 8000f82:	2500      	movs	r5, #0
 8000f84:	4698      	mov	r8, r3
 8000f86:	e732      	b.n	8000dee <__aeabi_ddiv+0x306>
 8000f88:	f001 f814 	bl	8001fb4 <__clzsi2>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	001a      	movs	r2, r3
 8000f90:	3215      	adds	r2, #21
 8000f92:	3020      	adds	r0, #32
 8000f94:	2a1c      	cmp	r2, #28
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x4b2>
 8000f98:	e700      	b.n	8000d9c <__aeabi_ddiv+0x2b4>
 8000f9a:	4654      	mov	r4, sl
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	409c      	lsls	r4, r3
 8000fa2:	e705      	b.n	8000db0 <__aeabi_ddiv+0x2c8>
 8000fa4:	1936      	adds	r6, r6, r4
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	42b4      	cmp	r4, r6
 8000faa:	d900      	bls.n	8000fae <__aeabi_ddiv+0x4c6>
 8000fac:	e6a6      	b.n	8000cfc <__aeabi_ddiv+0x214>
 8000fae:	42b2      	cmp	r2, r6
 8000fb0:	d800      	bhi.n	8000fb4 <__aeabi_ddiv+0x4cc>
 8000fb2:	e6a3      	b.n	8000cfc <__aeabi_ddiv+0x214>
 8000fb4:	1e83      	subs	r3, r0, #2
 8000fb6:	1936      	adds	r6, r6, r4
 8000fb8:	e6a0      	b.n	8000cfc <__aeabi_ddiv+0x214>
 8000fba:	1909      	adds	r1, r1, r4
 8000fbc:	3d01      	subs	r5, #1
 8000fbe:	428c      	cmp	r4, r1
 8000fc0:	d900      	bls.n	8000fc4 <__aeabi_ddiv+0x4dc>
 8000fc2:	e68d      	b.n	8000ce0 <__aeabi_ddiv+0x1f8>
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x4e2>
 8000fc8:	e68a      	b.n	8000ce0 <__aeabi_ddiv+0x1f8>
 8000fca:	1e85      	subs	r5, r0, #2
 8000fcc:	1909      	adds	r1, r1, r4
 8000fce:	e687      	b.n	8000ce0 <__aeabi_ddiv+0x1f8>
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	402b      	ands	r3, r5
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x4f2>
 8000fd8:	e6bc      	b.n	8000d54 <__aeabi_ddiv+0x26c>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	425b      	negs	r3, r3
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	419b      	sbcs	r3, r3
 8000fe2:	3504      	adds	r5, #4
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	08ed      	lsrs	r5, r5, #3
 8000fe8:	4498      	add	r8, r3
 8000fea:	e6b4      	b.n	8000d56 <__aeabi_ddiv+0x26e>
 8000fec:	42af      	cmp	r7, r5
 8000fee:	d900      	bls.n	8000ff2 <__aeabi_ddiv+0x50a>
 8000ff0:	e660      	b.n	8000cb4 <__aeabi_ddiv+0x1cc>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	d804      	bhi.n	8001000 <__aeabi_ddiv+0x518>
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_ddiv+0x512>
 8000ff8:	e65c      	b.n	8000cb4 <__aeabi_ddiv+0x1cc>
 8000ffa:	42ae      	cmp	r6, r5
 8000ffc:	d800      	bhi.n	8001000 <__aeabi_ddiv+0x518>
 8000ffe:	e659      	b.n	8000cb4 <__aeabi_ddiv+0x1cc>
 8001000:	2302      	movs	r3, #2
 8001002:	425b      	negs	r3, r3
 8001004:	469c      	mov	ip, r3
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	44e0      	add	r8, ip
 800100a:	469c      	mov	ip, r3
 800100c:	4465      	add	r5, ip
 800100e:	429d      	cmp	r5, r3
 8001010:	419b      	sbcs	r3, r3
 8001012:	425b      	negs	r3, r3
 8001014:	191b      	adds	r3, r3, r4
 8001016:	18c0      	adds	r0, r0, r3
 8001018:	e64d      	b.n	8000cb6 <__aeabi_ddiv+0x1ce>
 800101a:	428a      	cmp	r2, r1
 800101c:	d800      	bhi.n	8001020 <__aeabi_ddiv+0x538>
 800101e:	e60e      	b.n	8000c3e <__aeabi_ddiv+0x156>
 8001020:	1e83      	subs	r3, r0, #2
 8001022:	1909      	adds	r1, r1, r4
 8001024:	e60b      	b.n	8000c3e <__aeabi_ddiv+0x156>
 8001026:	428a      	cmp	r2, r1
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x544>
 800102a:	e5f4      	b.n	8000c16 <__aeabi_ddiv+0x12e>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	4698      	mov	r8, r3
 8001030:	1909      	adds	r1, r1, r4
 8001032:	e5f0      	b.n	8000c16 <__aeabi_ddiv+0x12e>
 8001034:	4925      	ldr	r1, [pc, #148]	; (80010cc <__aeabi_ddiv+0x5e4>)
 8001036:	0028      	movs	r0, r5
 8001038:	4459      	add	r1, fp
 800103a:	408d      	lsls	r5, r1
 800103c:	4642      	mov	r2, r8
 800103e:	408a      	lsls	r2, r1
 8001040:	1e69      	subs	r1, r5, #1
 8001042:	418d      	sbcs	r5, r1
 8001044:	4641      	mov	r1, r8
 8001046:	40d8      	lsrs	r0, r3
 8001048:	40d9      	lsrs	r1, r3
 800104a:	4302      	orrs	r2, r0
 800104c:	432a      	orrs	r2, r5
 800104e:	000b      	movs	r3, r1
 8001050:	0751      	lsls	r1, r2, #29
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x56e>
 8001054:	e751      	b.n	8000efa <__aeabi_ddiv+0x412>
 8001056:	210f      	movs	r1, #15
 8001058:	4011      	ands	r1, r2
 800105a:	2904      	cmp	r1, #4
 800105c:	d000      	beq.n	8001060 <__aeabi_ddiv+0x578>
 800105e:	e746      	b.n	8000eee <__aeabi_ddiv+0x406>
 8001060:	e74b      	b.n	8000efa <__aeabi_ddiv+0x412>
 8001062:	0005      	movs	r5, r0
 8001064:	428e      	cmp	r6, r1
 8001066:	d000      	beq.n	800106a <__aeabi_ddiv+0x582>
 8001068:	e66a      	b.n	8000d40 <__aeabi_ddiv+0x258>
 800106a:	9a00      	ldr	r2, [sp, #0]
 800106c:	4293      	cmp	r3, r2
 800106e:	d000      	beq.n	8001072 <__aeabi_ddiv+0x58a>
 8001070:	e666      	b.n	8000d40 <__aeabi_ddiv+0x258>
 8001072:	e667      	b.n	8000d44 <__aeabi_ddiv+0x25c>
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <__aeabi_ddiv+0x5e8>)
 8001076:	445a      	add	r2, fp
 8001078:	2a00      	cmp	r2, #0
 800107a:	dc00      	bgt.n	800107e <__aeabi_ddiv+0x596>
 800107c:	e710      	b.n	8000ea0 <__aeabi_ddiv+0x3b8>
 800107e:	2301      	movs	r3, #1
 8001080:	2500      	movs	r5, #0
 8001082:	4498      	add	r8, r3
 8001084:	e667      	b.n	8000d56 <__aeabi_ddiv+0x26e>
 8001086:	075d      	lsls	r5, r3, #29
 8001088:	025b      	lsls	r3, r3, #9
 800108a:	0b1c      	lsrs	r4, r3, #12
 800108c:	08d2      	lsrs	r2, r2, #3
 800108e:	2300      	movs	r3, #0
 8001090:	4315      	orrs	r5, r2
 8001092:	e580      	b.n	8000b96 <__aeabi_ddiv+0xae>
 8001094:	9800      	ldr	r0, [sp, #0]
 8001096:	3d02      	subs	r5, #2
 8001098:	0042      	lsls	r2, r0, #1
 800109a:	4282      	cmp	r2, r0
 800109c:	41bf      	sbcs	r7, r7
 800109e:	427f      	negs	r7, r7
 80010a0:	193c      	adds	r4, r7, r4
 80010a2:	1936      	adds	r6, r6, r4
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	e7dd      	b.n	8001064 <__aeabi_ddiv+0x57c>
 80010a8:	2480      	movs	r4, #128	; 0x80
 80010aa:	4643      	mov	r3, r8
 80010ac:	0324      	lsls	r4, r4, #12
 80010ae:	431c      	orrs	r4, r3
 80010b0:	0324      	lsls	r4, r4, #12
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__aeabi_ddiv+0x5dc>)
 80010b4:	0b24      	lsrs	r4, r4, #12
 80010b6:	e56e      	b.n	8000b96 <__aeabi_ddiv+0xae>
 80010b8:	9a00      	ldr	r2, [sp, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d3ea      	bcc.n	8001094 <__aeabi_ddiv+0x5ac>
 80010be:	0005      	movs	r5, r0
 80010c0:	e7d3      	b.n	800106a <__aeabi_ddiv+0x582>
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000043e 	.word	0x0000043e
 80010cc:	0000041e 	.word	0x0000041e
 80010d0:	000003ff 	.word	0x000003ff

080010d4 <__eqdf2>:
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	464e      	mov	r6, r9
 80010d8:	4645      	mov	r5, r8
 80010da:	46de      	mov	lr, fp
 80010dc:	4657      	mov	r7, sl
 80010de:	4690      	mov	r8, r2
 80010e0:	b5e0      	push	{r5, r6, r7, lr}
 80010e2:	0017      	movs	r7, r2
 80010e4:	031a      	lsls	r2, r3, #12
 80010e6:	0b12      	lsrs	r2, r2, #12
 80010e8:	0005      	movs	r5, r0
 80010ea:	4684      	mov	ip, r0
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <__eqdf2+0x80>)
 80010ee:	030e      	lsls	r6, r1, #12
 80010f0:	004c      	lsls	r4, r1, #1
 80010f2:	4691      	mov	r9, r2
 80010f4:	005a      	lsls	r2, r3, #1
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	469b      	mov	fp, r3
 80010fa:	0b36      	lsrs	r6, r6, #12
 80010fc:	0d64      	lsrs	r4, r4, #21
 80010fe:	0fc9      	lsrs	r1, r1, #31
 8001100:	0d52      	lsrs	r2, r2, #21
 8001102:	4284      	cmp	r4, r0
 8001104:	d019      	beq.n	800113a <__eqdf2+0x66>
 8001106:	4282      	cmp	r2, r0
 8001108:	d010      	beq.n	800112c <__eqdf2+0x58>
 800110a:	2001      	movs	r0, #1
 800110c:	4294      	cmp	r4, r2
 800110e:	d10e      	bne.n	800112e <__eqdf2+0x5a>
 8001110:	454e      	cmp	r6, r9
 8001112:	d10c      	bne.n	800112e <__eqdf2+0x5a>
 8001114:	2001      	movs	r0, #1
 8001116:	45c4      	cmp	ip, r8
 8001118:	d109      	bne.n	800112e <__eqdf2+0x5a>
 800111a:	4559      	cmp	r1, fp
 800111c:	d017      	beq.n	800114e <__eqdf2+0x7a>
 800111e:	2c00      	cmp	r4, #0
 8001120:	d105      	bne.n	800112e <__eqdf2+0x5a>
 8001122:	0030      	movs	r0, r6
 8001124:	4328      	orrs	r0, r5
 8001126:	1e43      	subs	r3, r0, #1
 8001128:	4198      	sbcs	r0, r3
 800112a:	e000      	b.n	800112e <__eqdf2+0x5a>
 800112c:	2001      	movs	r0, #1
 800112e:	bcf0      	pop	{r4, r5, r6, r7}
 8001130:	46bb      	mov	fp, r7
 8001132:	46b2      	mov	sl, r6
 8001134:	46a9      	mov	r9, r5
 8001136:	46a0      	mov	r8, r4
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113a:	0033      	movs	r3, r6
 800113c:	2001      	movs	r0, #1
 800113e:	432b      	orrs	r3, r5
 8001140:	d1f5      	bne.n	800112e <__eqdf2+0x5a>
 8001142:	42a2      	cmp	r2, r4
 8001144:	d1f3      	bne.n	800112e <__eqdf2+0x5a>
 8001146:	464b      	mov	r3, r9
 8001148:	433b      	orrs	r3, r7
 800114a:	d1f0      	bne.n	800112e <__eqdf2+0x5a>
 800114c:	e7e2      	b.n	8001114 <__eqdf2+0x40>
 800114e:	2000      	movs	r0, #0
 8001150:	e7ed      	b.n	800112e <__eqdf2+0x5a>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	000007ff 	.word	0x000007ff

08001158 <__gedf2>:
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	4647      	mov	r7, r8
 800115c:	46ce      	mov	lr, r9
 800115e:	0004      	movs	r4, r0
 8001160:	0018      	movs	r0, r3
 8001162:	0016      	movs	r6, r2
 8001164:	031b      	lsls	r3, r3, #12
 8001166:	0b1b      	lsrs	r3, r3, #12
 8001168:	4d2d      	ldr	r5, [pc, #180]	; (8001220 <__gedf2+0xc8>)
 800116a:	004a      	lsls	r2, r1, #1
 800116c:	4699      	mov	r9, r3
 800116e:	b580      	push	{r7, lr}
 8001170:	0043      	lsls	r3, r0, #1
 8001172:	030f      	lsls	r7, r1, #12
 8001174:	46a4      	mov	ip, r4
 8001176:	46b0      	mov	r8, r6
 8001178:	0b3f      	lsrs	r7, r7, #12
 800117a:	0d52      	lsrs	r2, r2, #21
 800117c:	0fc9      	lsrs	r1, r1, #31
 800117e:	0d5b      	lsrs	r3, r3, #21
 8001180:	0fc0      	lsrs	r0, r0, #31
 8001182:	42aa      	cmp	r2, r5
 8001184:	d021      	beq.n	80011ca <__gedf2+0x72>
 8001186:	42ab      	cmp	r3, r5
 8001188:	d013      	beq.n	80011b2 <__gedf2+0x5a>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d122      	bne.n	80011d4 <__gedf2+0x7c>
 800118e:	433c      	orrs	r4, r7
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <__gedf2+0x42>
 8001194:	464d      	mov	r5, r9
 8001196:	432e      	orrs	r6, r5
 8001198:	d022      	beq.n	80011e0 <__gedf2+0x88>
 800119a:	2c00      	cmp	r4, #0
 800119c:	d010      	beq.n	80011c0 <__gedf2+0x68>
 800119e:	4281      	cmp	r1, r0
 80011a0:	d022      	beq.n	80011e8 <__gedf2+0x90>
 80011a2:	2002      	movs	r0, #2
 80011a4:	3901      	subs	r1, #1
 80011a6:	4008      	ands	r0, r1
 80011a8:	3801      	subs	r0, #1
 80011aa:	bcc0      	pop	{r6, r7}
 80011ac:	46b9      	mov	r9, r7
 80011ae:	46b0      	mov	r8, r6
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	464d      	mov	r5, r9
 80011b4:	432e      	orrs	r6, r5
 80011b6:	d129      	bne.n	800120c <__gedf2+0xb4>
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d1f0      	bne.n	800119e <__gedf2+0x46>
 80011bc:	433c      	orrs	r4, r7
 80011be:	d1ee      	bne.n	800119e <__gedf2+0x46>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d1f2      	bne.n	80011aa <__gedf2+0x52>
 80011c4:	2001      	movs	r0, #1
 80011c6:	4240      	negs	r0, r0
 80011c8:	e7ef      	b.n	80011aa <__gedf2+0x52>
 80011ca:	003d      	movs	r5, r7
 80011cc:	4325      	orrs	r5, r4
 80011ce:	d11d      	bne.n	800120c <__gedf2+0xb4>
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d0ee      	beq.n	80011b2 <__gedf2+0x5a>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e2      	bne.n	800119e <__gedf2+0x46>
 80011d8:	464c      	mov	r4, r9
 80011da:	4326      	orrs	r6, r4
 80011dc:	d1df      	bne.n	800119e <__gedf2+0x46>
 80011de:	e7e0      	b.n	80011a2 <__gedf2+0x4a>
 80011e0:	2000      	movs	r0, #0
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	d0e1      	beq.n	80011aa <__gedf2+0x52>
 80011e6:	e7dc      	b.n	80011a2 <__gedf2+0x4a>
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dc0a      	bgt.n	8001202 <__gedf2+0xaa>
 80011ec:	dbe8      	blt.n	80011c0 <__gedf2+0x68>
 80011ee:	454f      	cmp	r7, r9
 80011f0:	d8d7      	bhi.n	80011a2 <__gedf2+0x4a>
 80011f2:	d00e      	beq.n	8001212 <__gedf2+0xba>
 80011f4:	2000      	movs	r0, #0
 80011f6:	454f      	cmp	r7, r9
 80011f8:	d2d7      	bcs.n	80011aa <__gedf2+0x52>
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d0e2      	beq.n	80011c4 <__gedf2+0x6c>
 80011fe:	0008      	movs	r0, r1
 8001200:	e7d3      	b.n	80011aa <__gedf2+0x52>
 8001202:	4243      	negs	r3, r0
 8001204:	4158      	adcs	r0, r3
 8001206:	0040      	lsls	r0, r0, #1
 8001208:	3801      	subs	r0, #1
 800120a:	e7ce      	b.n	80011aa <__gedf2+0x52>
 800120c:	2002      	movs	r0, #2
 800120e:	4240      	negs	r0, r0
 8001210:	e7cb      	b.n	80011aa <__gedf2+0x52>
 8001212:	45c4      	cmp	ip, r8
 8001214:	d8c5      	bhi.n	80011a2 <__gedf2+0x4a>
 8001216:	2000      	movs	r0, #0
 8001218:	45c4      	cmp	ip, r8
 800121a:	d2c6      	bcs.n	80011aa <__gedf2+0x52>
 800121c:	e7ed      	b.n	80011fa <__gedf2+0xa2>
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	000007ff 	.word	0x000007ff

08001224 <__ledf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4647      	mov	r7, r8
 8001228:	46ce      	mov	lr, r9
 800122a:	0004      	movs	r4, r0
 800122c:	0018      	movs	r0, r3
 800122e:	0016      	movs	r6, r2
 8001230:	031b      	lsls	r3, r3, #12
 8001232:	0b1b      	lsrs	r3, r3, #12
 8001234:	4d2c      	ldr	r5, [pc, #176]	; (80012e8 <__ledf2+0xc4>)
 8001236:	004a      	lsls	r2, r1, #1
 8001238:	4699      	mov	r9, r3
 800123a:	b580      	push	{r7, lr}
 800123c:	0043      	lsls	r3, r0, #1
 800123e:	030f      	lsls	r7, r1, #12
 8001240:	46a4      	mov	ip, r4
 8001242:	46b0      	mov	r8, r6
 8001244:	0b3f      	lsrs	r7, r7, #12
 8001246:	0d52      	lsrs	r2, r2, #21
 8001248:	0fc9      	lsrs	r1, r1, #31
 800124a:	0d5b      	lsrs	r3, r3, #21
 800124c:	0fc0      	lsrs	r0, r0, #31
 800124e:	42aa      	cmp	r2, r5
 8001250:	d00d      	beq.n	800126e <__ledf2+0x4a>
 8001252:	42ab      	cmp	r3, r5
 8001254:	d010      	beq.n	8001278 <__ledf2+0x54>
 8001256:	2a00      	cmp	r2, #0
 8001258:	d127      	bne.n	80012aa <__ledf2+0x86>
 800125a:	433c      	orrs	r4, r7
 800125c:	2b00      	cmp	r3, #0
 800125e:	d111      	bne.n	8001284 <__ledf2+0x60>
 8001260:	464d      	mov	r5, r9
 8001262:	432e      	orrs	r6, r5
 8001264:	d10e      	bne.n	8001284 <__ledf2+0x60>
 8001266:	2000      	movs	r0, #0
 8001268:	2c00      	cmp	r4, #0
 800126a:	d015      	beq.n	8001298 <__ledf2+0x74>
 800126c:	e00e      	b.n	800128c <__ledf2+0x68>
 800126e:	003d      	movs	r5, r7
 8001270:	4325      	orrs	r5, r4
 8001272:	d110      	bne.n	8001296 <__ledf2+0x72>
 8001274:	4293      	cmp	r3, r2
 8001276:	d118      	bne.n	80012aa <__ledf2+0x86>
 8001278:	464d      	mov	r5, r9
 800127a:	432e      	orrs	r6, r5
 800127c:	d10b      	bne.n	8001296 <__ledf2+0x72>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d102      	bne.n	8001288 <__ledf2+0x64>
 8001282:	433c      	orrs	r4, r7
 8001284:	2c00      	cmp	r4, #0
 8001286:	d00b      	beq.n	80012a0 <__ledf2+0x7c>
 8001288:	4281      	cmp	r1, r0
 800128a:	d014      	beq.n	80012b6 <__ledf2+0x92>
 800128c:	2002      	movs	r0, #2
 800128e:	3901      	subs	r1, #1
 8001290:	4008      	ands	r0, r1
 8001292:	3801      	subs	r0, #1
 8001294:	e000      	b.n	8001298 <__ledf2+0x74>
 8001296:	2002      	movs	r0, #2
 8001298:	bcc0      	pop	{r6, r7}
 800129a:	46b9      	mov	r9, r7
 800129c:	46b0      	mov	r8, r6
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d1f9      	bne.n	8001298 <__ledf2+0x74>
 80012a4:	2001      	movs	r0, #1
 80012a6:	4240      	negs	r0, r0
 80012a8:	e7f6      	b.n	8001298 <__ledf2+0x74>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ec      	bne.n	8001288 <__ledf2+0x64>
 80012ae:	464c      	mov	r4, r9
 80012b0:	4326      	orrs	r6, r4
 80012b2:	d1e9      	bne.n	8001288 <__ledf2+0x64>
 80012b4:	e7ea      	b.n	800128c <__ledf2+0x68>
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dd04      	ble.n	80012c4 <__ledf2+0xa0>
 80012ba:	4243      	negs	r3, r0
 80012bc:	4158      	adcs	r0, r3
 80012be:	0040      	lsls	r0, r0, #1
 80012c0:	3801      	subs	r0, #1
 80012c2:	e7e9      	b.n	8001298 <__ledf2+0x74>
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbeb      	blt.n	80012a0 <__ledf2+0x7c>
 80012c8:	454f      	cmp	r7, r9
 80012ca:	d8df      	bhi.n	800128c <__ledf2+0x68>
 80012cc:	d006      	beq.n	80012dc <__ledf2+0xb8>
 80012ce:	2000      	movs	r0, #0
 80012d0:	454f      	cmp	r7, r9
 80012d2:	d2e1      	bcs.n	8001298 <__ledf2+0x74>
 80012d4:	2900      	cmp	r1, #0
 80012d6:	d0e5      	beq.n	80012a4 <__ledf2+0x80>
 80012d8:	0008      	movs	r0, r1
 80012da:	e7dd      	b.n	8001298 <__ledf2+0x74>
 80012dc:	45c4      	cmp	ip, r8
 80012de:	d8d5      	bhi.n	800128c <__ledf2+0x68>
 80012e0:	2000      	movs	r0, #0
 80012e2:	45c4      	cmp	ip, r8
 80012e4:	d2d8      	bcs.n	8001298 <__ledf2+0x74>
 80012e6:	e7f5      	b.n	80012d4 <__ledf2+0xb0>
 80012e8:	000007ff 	.word	0x000007ff

080012ec <__aeabi_dmul>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	4657      	mov	r7, sl
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	46de      	mov	lr, fp
 80012f6:	b5e0      	push	{r5, r6, r7, lr}
 80012f8:	4698      	mov	r8, r3
 80012fa:	030c      	lsls	r4, r1, #12
 80012fc:	004b      	lsls	r3, r1, #1
 80012fe:	0006      	movs	r6, r0
 8001300:	4692      	mov	sl, r2
 8001302:	b087      	sub	sp, #28
 8001304:	0b24      	lsrs	r4, r4, #12
 8001306:	0d5b      	lsrs	r3, r3, #21
 8001308:	0fcf      	lsrs	r7, r1, #31
 800130a:	2b00      	cmp	r3, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_dmul+0x24>
 800130e:	e15c      	b.n	80015ca <__aeabi_dmul+0x2de>
 8001310:	4ad9      	ldr	r2, [pc, #868]	; (8001678 <__aeabi_dmul+0x38c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d100      	bne.n	8001318 <__aeabi_dmul+0x2c>
 8001316:	e175      	b.n	8001604 <__aeabi_dmul+0x318>
 8001318:	0f42      	lsrs	r2, r0, #29
 800131a:	00e4      	lsls	r4, r4, #3
 800131c:	4314      	orrs	r4, r2
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	0412      	lsls	r2, r2, #16
 8001322:	4314      	orrs	r4, r2
 8001324:	4ad5      	ldr	r2, [pc, #852]	; (800167c <__aeabi_dmul+0x390>)
 8001326:	00c5      	lsls	r5, r0, #3
 8001328:	4694      	mov	ip, r2
 800132a:	4463      	add	r3, ip
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	4699      	mov	r9, r3
 8001332:	469b      	mov	fp, r3
 8001334:	4643      	mov	r3, r8
 8001336:	4642      	mov	r2, r8
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0fd2      	lsrs	r2, r2, #31
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4650      	mov	r0, sl
 8001340:	4690      	mov	r8, r2
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0d5b      	lsrs	r3, r3, #21
 8001346:	d100      	bne.n	800134a <__aeabi_dmul+0x5e>
 8001348:	e120      	b.n	800158c <__aeabi_dmul+0x2a0>
 800134a:	4acb      	ldr	r2, [pc, #812]	; (8001678 <__aeabi_dmul+0x38c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d100      	bne.n	8001352 <__aeabi_dmul+0x66>
 8001350:	e162      	b.n	8001618 <__aeabi_dmul+0x32c>
 8001352:	49ca      	ldr	r1, [pc, #808]	; (800167c <__aeabi_dmul+0x390>)
 8001354:	0f42      	lsrs	r2, r0, #29
 8001356:	468c      	mov	ip, r1
 8001358:	9900      	ldr	r1, [sp, #0]
 800135a:	4463      	add	r3, ip
 800135c:	00f6      	lsls	r6, r6, #3
 800135e:	468c      	mov	ip, r1
 8001360:	4316      	orrs	r6, r2
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	449c      	add	ip, r3
 8001366:	0412      	lsls	r2, r2, #16
 8001368:	4663      	mov	r3, ip
 800136a:	4316      	orrs	r6, r2
 800136c:	00c2      	lsls	r2, r0, #3
 800136e:	2000      	movs	r0, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	9900      	ldr	r1, [sp, #0]
 8001374:	4643      	mov	r3, r8
 8001376:	3101      	adds	r1, #1
 8001378:	468c      	mov	ip, r1
 800137a:	4649      	mov	r1, r9
 800137c:	407b      	eors	r3, r7
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	290f      	cmp	r1, #15
 8001382:	d826      	bhi.n	80013d2 <__aeabi_dmul+0xe6>
 8001384:	4bbe      	ldr	r3, [pc, #760]	; (8001680 <__aeabi_dmul+0x394>)
 8001386:	0089      	lsls	r1, r1, #2
 8001388:	5859      	ldr	r1, [r3, r1]
 800138a:	468f      	mov	pc, r1
 800138c:	4643      	mov	r3, r8
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	0034      	movs	r4, r6
 8001392:	0015      	movs	r5, r2
 8001394:	4683      	mov	fp, r0
 8001396:	465b      	mov	r3, fp
 8001398:	2b02      	cmp	r3, #2
 800139a:	d016      	beq.n	80013ca <__aeabi_dmul+0xde>
 800139c:	2b03      	cmp	r3, #3
 800139e:	d100      	bne.n	80013a2 <__aeabi_dmul+0xb6>
 80013a0:	e203      	b.n	80017aa <__aeabi_dmul+0x4be>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d000      	beq.n	80013a8 <__aeabi_dmul+0xbc>
 80013a6:	e0cd      	b.n	8001544 <__aeabi_dmul+0x258>
 80013a8:	2200      	movs	r2, #0
 80013aa:	2400      	movs	r4, #0
 80013ac:	2500      	movs	r5, #0
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	0512      	lsls	r2, r2, #20
 80013b2:	4322      	orrs	r2, r4
 80013b4:	07db      	lsls	r3, r3, #31
 80013b6:	431a      	orrs	r2, r3
 80013b8:	0028      	movs	r0, r5
 80013ba:	0011      	movs	r1, r2
 80013bc:	b007      	add	sp, #28
 80013be:	bcf0      	pop	{r4, r5, r6, r7}
 80013c0:	46bb      	mov	fp, r7
 80013c2:	46b2      	mov	sl, r6
 80013c4:	46a9      	mov	r9, r5
 80013c6:	46a0      	mov	r8, r4
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	2400      	movs	r4, #0
 80013cc:	2500      	movs	r5, #0
 80013ce:	4aaa      	ldr	r2, [pc, #680]	; (8001678 <__aeabi_dmul+0x38c>)
 80013d0:	e7ed      	b.n	80013ae <__aeabi_dmul+0xc2>
 80013d2:	0c28      	lsrs	r0, r5, #16
 80013d4:	042d      	lsls	r5, r5, #16
 80013d6:	0c2d      	lsrs	r5, r5, #16
 80013d8:	002b      	movs	r3, r5
 80013da:	0c11      	lsrs	r1, r2, #16
 80013dc:	0412      	lsls	r2, r2, #16
 80013de:	0c12      	lsrs	r2, r2, #16
 80013e0:	4353      	muls	r3, r2
 80013e2:	4698      	mov	r8, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	002f      	movs	r7, r5
 80013e8:	4343      	muls	r3, r0
 80013ea:	4699      	mov	r9, r3
 80013ec:	434f      	muls	r7, r1
 80013ee:	444f      	add	r7, r9
 80013f0:	46bb      	mov	fp, r7
 80013f2:	4647      	mov	r7, r8
 80013f4:	000b      	movs	r3, r1
 80013f6:	0c3f      	lsrs	r7, r7, #16
 80013f8:	46ba      	mov	sl, r7
 80013fa:	4343      	muls	r3, r0
 80013fc:	44da      	add	sl, fp
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	45d1      	cmp	r9, sl
 8001402:	d904      	bls.n	800140e <__aeabi_dmul+0x122>
 8001404:	2780      	movs	r7, #128	; 0x80
 8001406:	027f      	lsls	r7, r7, #9
 8001408:	46b9      	mov	r9, r7
 800140a:	444b      	add	r3, r9
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	4653      	mov	r3, sl
 8001410:	0c1b      	lsrs	r3, r3, #16
 8001412:	469b      	mov	fp, r3
 8001414:	4653      	mov	r3, sl
 8001416:	041f      	lsls	r7, r3, #16
 8001418:	4643      	mov	r3, r8
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	0c1b      	lsrs	r3, r3, #16
 800141e:	4698      	mov	r8, r3
 8001420:	003b      	movs	r3, r7
 8001422:	4443      	add	r3, r8
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	0c33      	lsrs	r3, r6, #16
 8001428:	0436      	lsls	r6, r6, #16
 800142a:	0c36      	lsrs	r6, r6, #16
 800142c:	4698      	mov	r8, r3
 800142e:	0033      	movs	r3, r6
 8001430:	4343      	muls	r3, r0
 8001432:	4699      	mov	r9, r3
 8001434:	4643      	mov	r3, r8
 8001436:	4343      	muls	r3, r0
 8001438:	002f      	movs	r7, r5
 800143a:	469a      	mov	sl, r3
 800143c:	4643      	mov	r3, r8
 800143e:	4377      	muls	r7, r6
 8001440:	435d      	muls	r5, r3
 8001442:	0c38      	lsrs	r0, r7, #16
 8001444:	444d      	add	r5, r9
 8001446:	1945      	adds	r5, r0, r5
 8001448:	45a9      	cmp	r9, r5
 800144a:	d903      	bls.n	8001454 <__aeabi_dmul+0x168>
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	4699      	mov	r9, r3
 8001452:	44ca      	add	sl, r9
 8001454:	043f      	lsls	r7, r7, #16
 8001456:	0c28      	lsrs	r0, r5, #16
 8001458:	0c3f      	lsrs	r7, r7, #16
 800145a:	042d      	lsls	r5, r5, #16
 800145c:	19ed      	adds	r5, r5, r7
 800145e:	0c27      	lsrs	r7, r4, #16
 8001460:	0424      	lsls	r4, r4, #16
 8001462:	0c24      	lsrs	r4, r4, #16
 8001464:	0003      	movs	r3, r0
 8001466:	0020      	movs	r0, r4
 8001468:	4350      	muls	r0, r2
 800146a:	437a      	muls	r2, r7
 800146c:	4691      	mov	r9, r2
 800146e:	003a      	movs	r2, r7
 8001470:	4453      	add	r3, sl
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	0c03      	lsrs	r3, r0, #16
 8001476:	469a      	mov	sl, r3
 8001478:	434a      	muls	r2, r1
 800147a:	4361      	muls	r1, r4
 800147c:	4449      	add	r1, r9
 800147e:	4451      	add	r1, sl
 8001480:	44ab      	add	fp, r5
 8001482:	4589      	cmp	r9, r1
 8001484:	d903      	bls.n	800148e <__aeabi_dmul+0x1a2>
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	4699      	mov	r9, r3
 800148c:	444a      	add	r2, r9
 800148e:	0400      	lsls	r0, r0, #16
 8001490:	0c0b      	lsrs	r3, r1, #16
 8001492:	0c00      	lsrs	r0, r0, #16
 8001494:	0409      	lsls	r1, r1, #16
 8001496:	1809      	adds	r1, r1, r0
 8001498:	0020      	movs	r0, r4
 800149a:	4699      	mov	r9, r3
 800149c:	4643      	mov	r3, r8
 800149e:	4370      	muls	r0, r6
 80014a0:	435c      	muls	r4, r3
 80014a2:	437e      	muls	r6, r7
 80014a4:	435f      	muls	r7, r3
 80014a6:	0c03      	lsrs	r3, r0, #16
 80014a8:	4698      	mov	r8, r3
 80014aa:	19a4      	adds	r4, r4, r6
 80014ac:	4444      	add	r4, r8
 80014ae:	444a      	add	r2, r9
 80014b0:	9703      	str	r7, [sp, #12]
 80014b2:	42a6      	cmp	r6, r4
 80014b4:	d904      	bls.n	80014c0 <__aeabi_dmul+0x1d4>
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4698      	mov	r8, r3
 80014bc:	4447      	add	r7, r8
 80014be:	9703      	str	r7, [sp, #12]
 80014c0:	0423      	lsls	r3, r4, #16
 80014c2:	9e02      	ldr	r6, [sp, #8]
 80014c4:	469a      	mov	sl, r3
 80014c6:	9b05      	ldr	r3, [sp, #20]
 80014c8:	445e      	add	r6, fp
 80014ca:	4698      	mov	r8, r3
 80014cc:	42ae      	cmp	r6, r5
 80014ce:	41ad      	sbcs	r5, r5
 80014d0:	1876      	adds	r6, r6, r1
 80014d2:	428e      	cmp	r6, r1
 80014d4:	4189      	sbcs	r1, r1
 80014d6:	0400      	lsls	r0, r0, #16
 80014d8:	0c00      	lsrs	r0, r0, #16
 80014da:	4450      	add	r0, sl
 80014dc:	4440      	add	r0, r8
 80014de:	426d      	negs	r5, r5
 80014e0:	1947      	adds	r7, r0, r5
 80014e2:	46b8      	mov	r8, r7
 80014e4:	4693      	mov	fp, r2
 80014e6:	4249      	negs	r1, r1
 80014e8:	4689      	mov	r9, r1
 80014ea:	44c3      	add	fp, r8
 80014ec:	44d9      	add	r9, fp
 80014ee:	4298      	cmp	r0, r3
 80014f0:	4180      	sbcs	r0, r0
 80014f2:	45a8      	cmp	r8, r5
 80014f4:	41ad      	sbcs	r5, r5
 80014f6:	4593      	cmp	fp, r2
 80014f8:	4192      	sbcs	r2, r2
 80014fa:	4589      	cmp	r9, r1
 80014fc:	4189      	sbcs	r1, r1
 80014fe:	426d      	negs	r5, r5
 8001500:	4240      	negs	r0, r0
 8001502:	4328      	orrs	r0, r5
 8001504:	0c24      	lsrs	r4, r4, #16
 8001506:	4252      	negs	r2, r2
 8001508:	4249      	negs	r1, r1
 800150a:	430a      	orrs	r2, r1
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	1900      	adds	r0, r0, r4
 8001510:	1880      	adds	r0, r0, r2
 8001512:	18c7      	adds	r7, r0, r3
 8001514:	464b      	mov	r3, r9
 8001516:	0ddc      	lsrs	r4, r3, #23
 8001518:	9b04      	ldr	r3, [sp, #16]
 800151a:	0275      	lsls	r5, r6, #9
 800151c:	431d      	orrs	r5, r3
 800151e:	1e6a      	subs	r2, r5, #1
 8001520:	4195      	sbcs	r5, r2
 8001522:	464b      	mov	r3, r9
 8001524:	0df6      	lsrs	r6, r6, #23
 8001526:	027f      	lsls	r7, r7, #9
 8001528:	4335      	orrs	r5, r6
 800152a:	025a      	lsls	r2, r3, #9
 800152c:	433c      	orrs	r4, r7
 800152e:	4315      	orrs	r5, r2
 8001530:	01fb      	lsls	r3, r7, #7
 8001532:	d400      	bmi.n	8001536 <__aeabi_dmul+0x24a>
 8001534:	e11c      	b.n	8001770 <__aeabi_dmul+0x484>
 8001536:	2101      	movs	r1, #1
 8001538:	086a      	lsrs	r2, r5, #1
 800153a:	400d      	ands	r5, r1
 800153c:	4315      	orrs	r5, r2
 800153e:	07e2      	lsls	r2, r4, #31
 8001540:	4315      	orrs	r5, r2
 8001542:	0864      	lsrs	r4, r4, #1
 8001544:	494f      	ldr	r1, [pc, #316]	; (8001684 <__aeabi_dmul+0x398>)
 8001546:	4461      	add	r1, ip
 8001548:	2900      	cmp	r1, #0
 800154a:	dc00      	bgt.n	800154e <__aeabi_dmul+0x262>
 800154c:	e0b0      	b.n	80016b0 <__aeabi_dmul+0x3c4>
 800154e:	076b      	lsls	r3, r5, #29
 8001550:	d009      	beq.n	8001566 <__aeabi_dmul+0x27a>
 8001552:	220f      	movs	r2, #15
 8001554:	402a      	ands	r2, r5
 8001556:	2a04      	cmp	r2, #4
 8001558:	d005      	beq.n	8001566 <__aeabi_dmul+0x27a>
 800155a:	1d2a      	adds	r2, r5, #4
 800155c:	42aa      	cmp	r2, r5
 800155e:	41ad      	sbcs	r5, r5
 8001560:	426d      	negs	r5, r5
 8001562:	1964      	adds	r4, r4, r5
 8001564:	0015      	movs	r5, r2
 8001566:	01e3      	lsls	r3, r4, #7
 8001568:	d504      	bpl.n	8001574 <__aeabi_dmul+0x288>
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <__aeabi_dmul+0x39c>)
 800156e:	00c9      	lsls	r1, r1, #3
 8001570:	4014      	ands	r4, r2
 8001572:	4461      	add	r1, ip
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <__aeabi_dmul+0x3a0>)
 8001576:	4291      	cmp	r1, r2
 8001578:	dd00      	ble.n	800157c <__aeabi_dmul+0x290>
 800157a:	e726      	b.n	80013ca <__aeabi_dmul+0xde>
 800157c:	0762      	lsls	r2, r4, #29
 800157e:	08ed      	lsrs	r5, r5, #3
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0549      	lsls	r1, r1, #21
 8001584:	4315      	orrs	r5, r2
 8001586:	0b24      	lsrs	r4, r4, #12
 8001588:	0d4a      	lsrs	r2, r1, #21
 800158a:	e710      	b.n	80013ae <__aeabi_dmul+0xc2>
 800158c:	4652      	mov	r2, sl
 800158e:	4332      	orrs	r2, r6
 8001590:	d100      	bne.n	8001594 <__aeabi_dmul+0x2a8>
 8001592:	e07f      	b.n	8001694 <__aeabi_dmul+0x3a8>
 8001594:	2e00      	cmp	r6, #0
 8001596:	d100      	bne.n	800159a <__aeabi_dmul+0x2ae>
 8001598:	e0dc      	b.n	8001754 <__aeabi_dmul+0x468>
 800159a:	0030      	movs	r0, r6
 800159c:	f000 fd0a 	bl	8001fb4 <__clzsi2>
 80015a0:	0002      	movs	r2, r0
 80015a2:	3a0b      	subs	r2, #11
 80015a4:	231d      	movs	r3, #29
 80015a6:	0001      	movs	r1, r0
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	4652      	mov	r2, sl
 80015ac:	3908      	subs	r1, #8
 80015ae:	40da      	lsrs	r2, r3
 80015b0:	408e      	lsls	r6, r1
 80015b2:	4316      	orrs	r6, r2
 80015b4:	4652      	mov	r2, sl
 80015b6:	408a      	lsls	r2, r1
 80015b8:	9b00      	ldr	r3, [sp, #0]
 80015ba:	4935      	ldr	r1, [pc, #212]	; (8001690 <__aeabi_dmul+0x3a4>)
 80015bc:	1a18      	subs	r0, r3, r0
 80015be:	0003      	movs	r3, r0
 80015c0:	468c      	mov	ip, r1
 80015c2:	4463      	add	r3, ip
 80015c4:	2000      	movs	r0, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	e6d3      	b.n	8001372 <__aeabi_dmul+0x86>
 80015ca:	0025      	movs	r5, r4
 80015cc:	4305      	orrs	r5, r0
 80015ce:	d04a      	beq.n	8001666 <__aeabi_dmul+0x37a>
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dmul+0x2ea>
 80015d4:	e0b0      	b.n	8001738 <__aeabi_dmul+0x44c>
 80015d6:	0020      	movs	r0, r4
 80015d8:	f000 fcec 	bl	8001fb4 <__clzsi2>
 80015dc:	0001      	movs	r1, r0
 80015de:	0002      	movs	r2, r0
 80015e0:	390b      	subs	r1, #11
 80015e2:	231d      	movs	r3, #29
 80015e4:	0010      	movs	r0, r2
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	0031      	movs	r1, r6
 80015ea:	0035      	movs	r5, r6
 80015ec:	3808      	subs	r0, #8
 80015ee:	4084      	lsls	r4, r0
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	4085      	lsls	r5, r0
 80015f4:	430c      	orrs	r4, r1
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <__aeabi_dmul+0x3a4>)
 80015f8:	1a83      	subs	r3, r0, r2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	4699      	mov	r9, r3
 8001600:	469b      	mov	fp, r3
 8001602:	e697      	b.n	8001334 <__aeabi_dmul+0x48>
 8001604:	0005      	movs	r5, r0
 8001606:	4325      	orrs	r5, r4
 8001608:	d126      	bne.n	8001658 <__aeabi_dmul+0x36c>
 800160a:	2208      	movs	r2, #8
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	2400      	movs	r4, #0
 8001612:	4691      	mov	r9, r2
 8001614:	469b      	mov	fp, r3
 8001616:	e68d      	b.n	8001334 <__aeabi_dmul+0x48>
 8001618:	4652      	mov	r2, sl
 800161a:	9b00      	ldr	r3, [sp, #0]
 800161c:	4332      	orrs	r2, r6
 800161e:	d110      	bne.n	8001642 <__aeabi_dmul+0x356>
 8001620:	4915      	ldr	r1, [pc, #84]	; (8001678 <__aeabi_dmul+0x38c>)
 8001622:	2600      	movs	r6, #0
 8001624:	468c      	mov	ip, r1
 8001626:	4463      	add	r3, ip
 8001628:	4649      	mov	r1, r9
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2302      	movs	r3, #2
 800162e:	4319      	orrs	r1, r3
 8001630:	4689      	mov	r9, r1
 8001632:	2002      	movs	r0, #2
 8001634:	e69d      	b.n	8001372 <__aeabi_dmul+0x86>
 8001636:	465b      	mov	r3, fp
 8001638:	9701      	str	r7, [sp, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d000      	beq.n	8001640 <__aeabi_dmul+0x354>
 800163e:	e6ad      	b.n	800139c <__aeabi_dmul+0xb0>
 8001640:	e6c3      	b.n	80013ca <__aeabi_dmul+0xde>
 8001642:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <__aeabi_dmul+0x38c>)
 8001644:	2003      	movs	r0, #3
 8001646:	4694      	mov	ip, r2
 8001648:	4463      	add	r3, ip
 800164a:	464a      	mov	r2, r9
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2303      	movs	r3, #3
 8001650:	431a      	orrs	r2, r3
 8001652:	4691      	mov	r9, r2
 8001654:	4652      	mov	r2, sl
 8001656:	e68c      	b.n	8001372 <__aeabi_dmul+0x86>
 8001658:	220c      	movs	r2, #12
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2303      	movs	r3, #3
 800165e:	0005      	movs	r5, r0
 8001660:	4691      	mov	r9, r2
 8001662:	469b      	mov	fp, r3
 8001664:	e666      	b.n	8001334 <__aeabi_dmul+0x48>
 8001666:	2304      	movs	r3, #4
 8001668:	4699      	mov	r9, r3
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	2400      	movs	r4, #0
 8001672:	469b      	mov	fp, r3
 8001674:	e65e      	b.n	8001334 <__aeabi_dmul+0x48>
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	000007ff 	.word	0x000007ff
 800167c:	fffffc01 	.word	0xfffffc01
 8001680:	08006308 	.word	0x08006308
 8001684:	000003ff 	.word	0x000003ff
 8001688:	feffffff 	.word	0xfeffffff
 800168c:	000007fe 	.word	0x000007fe
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	4649      	mov	r1, r9
 8001696:	2301      	movs	r3, #1
 8001698:	4319      	orrs	r1, r3
 800169a:	4689      	mov	r9, r1
 800169c:	2600      	movs	r6, #0
 800169e:	2001      	movs	r0, #1
 80016a0:	e667      	b.n	8001372 <__aeabi_dmul+0x86>
 80016a2:	2300      	movs	r3, #0
 80016a4:	2480      	movs	r4, #128	; 0x80
 80016a6:	2500      	movs	r5, #0
 80016a8:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4cc>)
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	0324      	lsls	r4, r4, #12
 80016ae:	e67e      	b.n	80013ae <__aeabi_dmul+0xc2>
 80016b0:	2001      	movs	r0, #1
 80016b2:	1a40      	subs	r0, r0, r1
 80016b4:	2838      	cmp	r0, #56	; 0x38
 80016b6:	dd00      	ble.n	80016ba <__aeabi_dmul+0x3ce>
 80016b8:	e676      	b.n	80013a8 <__aeabi_dmul+0xbc>
 80016ba:	281f      	cmp	r0, #31
 80016bc:	dd5b      	ble.n	8001776 <__aeabi_dmul+0x48a>
 80016be:	221f      	movs	r2, #31
 80016c0:	0023      	movs	r3, r4
 80016c2:	4252      	negs	r2, r2
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	40cb      	lsrs	r3, r1
 80016c8:	0019      	movs	r1, r3
 80016ca:	2820      	cmp	r0, #32
 80016cc:	d003      	beq.n	80016d6 <__aeabi_dmul+0x3ea>
 80016ce:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <__aeabi_dmul+0x4d0>)
 80016d0:	4462      	add	r2, ip
 80016d2:	4094      	lsls	r4, r2
 80016d4:	4325      	orrs	r5, r4
 80016d6:	1e6a      	subs	r2, r5, #1
 80016d8:	4195      	sbcs	r5, r2
 80016da:	002a      	movs	r2, r5
 80016dc:	430a      	orrs	r2, r1
 80016de:	2107      	movs	r1, #7
 80016e0:	000d      	movs	r5, r1
 80016e2:	2400      	movs	r4, #0
 80016e4:	4015      	ands	r5, r2
 80016e6:	4211      	tst	r1, r2
 80016e8:	d05b      	beq.n	80017a2 <__aeabi_dmul+0x4b6>
 80016ea:	210f      	movs	r1, #15
 80016ec:	2400      	movs	r4, #0
 80016ee:	4011      	ands	r1, r2
 80016f0:	2904      	cmp	r1, #4
 80016f2:	d053      	beq.n	800179c <__aeabi_dmul+0x4b0>
 80016f4:	1d11      	adds	r1, r2, #4
 80016f6:	4291      	cmp	r1, r2
 80016f8:	4192      	sbcs	r2, r2
 80016fa:	4252      	negs	r2, r2
 80016fc:	18a4      	adds	r4, r4, r2
 80016fe:	000a      	movs	r2, r1
 8001700:	0223      	lsls	r3, r4, #8
 8001702:	d54b      	bpl.n	800179c <__aeabi_dmul+0x4b0>
 8001704:	2201      	movs	r2, #1
 8001706:	2400      	movs	r4, #0
 8001708:	2500      	movs	r5, #0
 800170a:	e650      	b.n	80013ae <__aeabi_dmul+0xc2>
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	031b      	lsls	r3, r3, #12
 8001710:	421c      	tst	r4, r3
 8001712:	d009      	beq.n	8001728 <__aeabi_dmul+0x43c>
 8001714:	421e      	tst	r6, r3
 8001716:	d107      	bne.n	8001728 <__aeabi_dmul+0x43c>
 8001718:	4333      	orrs	r3, r6
 800171a:	031c      	lsls	r4, r3, #12
 800171c:	4643      	mov	r3, r8
 800171e:	0015      	movs	r5, r2
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <__aeabi_dmul+0x4cc>)
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	e642      	b.n	80013ae <__aeabi_dmul+0xc2>
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	0312      	lsls	r2, r2, #12
 800172c:	4314      	orrs	r4, r2
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4cc>)
 8001732:	0b24      	lsrs	r4, r4, #12
 8001734:	9701      	str	r7, [sp, #4]
 8001736:	e63a      	b.n	80013ae <__aeabi_dmul+0xc2>
 8001738:	f000 fc3c 	bl	8001fb4 <__clzsi2>
 800173c:	0001      	movs	r1, r0
 800173e:	0002      	movs	r2, r0
 8001740:	3115      	adds	r1, #21
 8001742:	3220      	adds	r2, #32
 8001744:	291c      	cmp	r1, #28
 8001746:	dc00      	bgt.n	800174a <__aeabi_dmul+0x45e>
 8001748:	e74b      	b.n	80015e2 <__aeabi_dmul+0x2f6>
 800174a:	0034      	movs	r4, r6
 800174c:	3808      	subs	r0, #8
 800174e:	2500      	movs	r5, #0
 8001750:	4084      	lsls	r4, r0
 8001752:	e750      	b.n	80015f6 <__aeabi_dmul+0x30a>
 8001754:	f000 fc2e 	bl	8001fb4 <__clzsi2>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	3215      	adds	r2, #21
 800175e:	3020      	adds	r0, #32
 8001760:	2a1c      	cmp	r2, #28
 8001762:	dc00      	bgt.n	8001766 <__aeabi_dmul+0x47a>
 8001764:	e71e      	b.n	80015a4 <__aeabi_dmul+0x2b8>
 8001766:	4656      	mov	r6, sl
 8001768:	3b08      	subs	r3, #8
 800176a:	2200      	movs	r2, #0
 800176c:	409e      	lsls	r6, r3
 800176e:	e723      	b.n	80015b8 <__aeabi_dmul+0x2cc>
 8001770:	9b00      	ldr	r3, [sp, #0]
 8001772:	469c      	mov	ip, r3
 8001774:	e6e6      	b.n	8001544 <__aeabi_dmul+0x258>
 8001776:	4912      	ldr	r1, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4d4>)
 8001778:	0022      	movs	r2, r4
 800177a:	4461      	add	r1, ip
 800177c:	002e      	movs	r6, r5
 800177e:	408d      	lsls	r5, r1
 8001780:	408a      	lsls	r2, r1
 8001782:	40c6      	lsrs	r6, r0
 8001784:	1e69      	subs	r1, r5, #1
 8001786:	418d      	sbcs	r5, r1
 8001788:	4332      	orrs	r2, r6
 800178a:	432a      	orrs	r2, r5
 800178c:	40c4      	lsrs	r4, r0
 800178e:	0753      	lsls	r3, r2, #29
 8001790:	d0b6      	beq.n	8001700 <__aeabi_dmul+0x414>
 8001792:	210f      	movs	r1, #15
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d1ac      	bne.n	80016f4 <__aeabi_dmul+0x408>
 800179a:	e7b1      	b.n	8001700 <__aeabi_dmul+0x414>
 800179c:	0765      	lsls	r5, r4, #29
 800179e:	0264      	lsls	r4, r4, #9
 80017a0:	0b24      	lsrs	r4, r4, #12
 80017a2:	08d2      	lsrs	r2, r2, #3
 80017a4:	4315      	orrs	r5, r2
 80017a6:	2200      	movs	r2, #0
 80017a8:	e601      	b.n	80013ae <__aeabi_dmul+0xc2>
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	0312      	lsls	r2, r2, #12
 80017ae:	4314      	orrs	r4, r2
 80017b0:	0324      	lsls	r4, r4, #12
 80017b2:	4a01      	ldr	r2, [pc, #4]	; (80017b8 <__aeabi_dmul+0x4cc>)
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	e5fa      	b.n	80013ae <__aeabi_dmul+0xc2>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000043e 	.word	0x0000043e
 80017c0:	0000041e 	.word	0x0000041e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	b5e0      	push	{r5, r6, r7, lr}
 80017d0:	001e      	movs	r6, r3
 80017d2:	0017      	movs	r7, r2
 80017d4:	004a      	lsls	r2, r1, #1
 80017d6:	030b      	lsls	r3, r1, #12
 80017d8:	0d52      	lsrs	r2, r2, #21
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	4690      	mov	r8, r2
 80017de:	0f42      	lsrs	r2, r0, #29
 80017e0:	431a      	orrs	r2, r3
 80017e2:	0fcd      	lsrs	r5, r1, #31
 80017e4:	4ccd      	ldr	r4, [pc, #820]	; (8001b1c <__aeabi_dsub+0x358>)
 80017e6:	0331      	lsls	r1, r6, #12
 80017e8:	00c3      	lsls	r3, r0, #3
 80017ea:	4694      	mov	ip, r2
 80017ec:	0070      	lsls	r0, r6, #1
 80017ee:	0f7a      	lsrs	r2, r7, #29
 80017f0:	0a49      	lsrs	r1, r1, #9
 80017f2:	00ff      	lsls	r7, r7, #3
 80017f4:	469a      	mov	sl, r3
 80017f6:	46b9      	mov	r9, r7
 80017f8:	0d40      	lsrs	r0, r0, #21
 80017fa:	0ff6      	lsrs	r6, r6, #31
 80017fc:	4311      	orrs	r1, r2
 80017fe:	42a0      	cmp	r0, r4
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b1      	b.n	8001968 <__aeabi_dsub+0x1a4>
 8001804:	2201      	movs	r2, #1
 8001806:	4056      	eors	r6, r2
 8001808:	46b3      	mov	fp, r6
 800180a:	42b5      	cmp	r5, r6
 800180c:	d100      	bne.n	8001810 <__aeabi_dsub+0x4c>
 800180e:	e088      	b.n	8001922 <__aeabi_dsub+0x15e>
 8001810:	4642      	mov	r2, r8
 8001812:	1a12      	subs	r2, r2, r0
 8001814:	2a00      	cmp	r2, #0
 8001816:	dc00      	bgt.n	800181a <__aeabi_dsub+0x56>
 8001818:	e0ae      	b.n	8001978 <__aeabi_dsub+0x1b4>
 800181a:	2800      	cmp	r0, #0
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x5c>
 800181e:	e0c1      	b.n	80019a4 <__aeabi_dsub+0x1e0>
 8001820:	48be      	ldr	r0, [pc, #760]	; (8001b1c <__aeabi_dsub+0x358>)
 8001822:	4580      	cmp	r8, r0
 8001824:	d100      	bne.n	8001828 <__aeabi_dsub+0x64>
 8001826:	e151      	b.n	8001acc <__aeabi_dsub+0x308>
 8001828:	2080      	movs	r0, #128	; 0x80
 800182a:	0400      	lsls	r0, r0, #16
 800182c:	4301      	orrs	r1, r0
 800182e:	2a38      	cmp	r2, #56	; 0x38
 8001830:	dd00      	ble.n	8001834 <__aeabi_dsub+0x70>
 8001832:	e17b      	b.n	8001b2c <__aeabi_dsub+0x368>
 8001834:	2a1f      	cmp	r2, #31
 8001836:	dd00      	ble.n	800183a <__aeabi_dsub+0x76>
 8001838:	e1ee      	b.n	8001c18 <__aeabi_dsub+0x454>
 800183a:	2020      	movs	r0, #32
 800183c:	003e      	movs	r6, r7
 800183e:	1a80      	subs	r0, r0, r2
 8001840:	000c      	movs	r4, r1
 8001842:	40d6      	lsrs	r6, r2
 8001844:	40d1      	lsrs	r1, r2
 8001846:	4087      	lsls	r7, r0
 8001848:	4662      	mov	r2, ip
 800184a:	4084      	lsls	r4, r0
 800184c:	1a52      	subs	r2, r2, r1
 800184e:	1e78      	subs	r0, r7, #1
 8001850:	4187      	sbcs	r7, r0
 8001852:	4694      	mov	ip, r2
 8001854:	4334      	orrs	r4, r6
 8001856:	4327      	orrs	r7, r4
 8001858:	1bdc      	subs	r4, r3, r7
 800185a:	42a3      	cmp	r3, r4
 800185c:	419b      	sbcs	r3, r3
 800185e:	4662      	mov	r2, ip
 8001860:	425b      	negs	r3, r3
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4699      	mov	r9, r3
 8001866:	464b      	mov	r3, r9
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	d400      	bmi.n	800186e <__aeabi_dsub+0xaa>
 800186c:	e118      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 800186e:	464b      	mov	r3, r9
 8001870:	0258      	lsls	r0, r3, #9
 8001872:	0a43      	lsrs	r3, r0, #9
 8001874:	4699      	mov	r9, r3
 8001876:	464b      	mov	r3, r9
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dsub+0xba>
 800187c:	e137      	b.n	8001aee <__aeabi_dsub+0x32a>
 800187e:	4648      	mov	r0, r9
 8001880:	f000 fb98 	bl	8001fb4 <__clzsi2>
 8001884:	0001      	movs	r1, r0
 8001886:	3908      	subs	r1, #8
 8001888:	2320      	movs	r3, #32
 800188a:	0022      	movs	r2, r4
 800188c:	4648      	mov	r0, r9
 800188e:	1a5b      	subs	r3, r3, r1
 8001890:	40da      	lsrs	r2, r3
 8001892:	4088      	lsls	r0, r1
 8001894:	408c      	lsls	r4, r1
 8001896:	4643      	mov	r3, r8
 8001898:	4310      	orrs	r0, r2
 800189a:	4588      	cmp	r8, r1
 800189c:	dd00      	ble.n	80018a0 <__aeabi_dsub+0xdc>
 800189e:	e136      	b.n	8001b0e <__aeabi_dsub+0x34a>
 80018a0:	1ac9      	subs	r1, r1, r3
 80018a2:	1c4b      	adds	r3, r1, #1
 80018a4:	2b1f      	cmp	r3, #31
 80018a6:	dd00      	ble.n	80018aa <__aeabi_dsub+0xe6>
 80018a8:	e0ea      	b.n	8001a80 <__aeabi_dsub+0x2bc>
 80018aa:	2220      	movs	r2, #32
 80018ac:	0026      	movs	r6, r4
 80018ae:	1ad2      	subs	r2, r2, r3
 80018b0:	0001      	movs	r1, r0
 80018b2:	4094      	lsls	r4, r2
 80018b4:	40de      	lsrs	r6, r3
 80018b6:	40d8      	lsrs	r0, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	4091      	lsls	r1, r2
 80018bc:	1e62      	subs	r2, r4, #1
 80018be:	4194      	sbcs	r4, r2
 80018c0:	4681      	mov	r9, r0
 80018c2:	4698      	mov	r8, r3
 80018c4:	4331      	orrs	r1, r6
 80018c6:	430c      	orrs	r4, r1
 80018c8:	0763      	lsls	r3, r4, #29
 80018ca:	d009      	beq.n	80018e0 <__aeabi_dsub+0x11c>
 80018cc:	230f      	movs	r3, #15
 80018ce:	4023      	ands	r3, r4
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d005      	beq.n	80018e0 <__aeabi_dsub+0x11c>
 80018d4:	1d23      	adds	r3, r4, #4
 80018d6:	42a3      	cmp	r3, r4
 80018d8:	41a4      	sbcs	r4, r4
 80018da:	4264      	negs	r4, r4
 80018dc:	44a1      	add	r9, r4
 80018de:	001c      	movs	r4, r3
 80018e0:	464b      	mov	r3, r9
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	d400      	bmi.n	80018e8 <__aeabi_dsub+0x124>
 80018e6:	e0de      	b.n	8001aa6 <__aeabi_dsub+0x2e2>
 80018e8:	4641      	mov	r1, r8
 80018ea:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <__aeabi_dsub+0x358>)
 80018ec:	3101      	adds	r1, #1
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dsub+0x130>
 80018f2:	e0e7      	b.n	8001ac4 <__aeabi_dsub+0x300>
 80018f4:	464b      	mov	r3, r9
 80018f6:	488a      	ldr	r0, [pc, #552]	; (8001b20 <__aeabi_dsub+0x35c>)
 80018f8:	08e4      	lsrs	r4, r4, #3
 80018fa:	4003      	ands	r3, r0
 80018fc:	0018      	movs	r0, r3
 80018fe:	0549      	lsls	r1, r1, #21
 8001900:	075b      	lsls	r3, r3, #29
 8001902:	0240      	lsls	r0, r0, #9
 8001904:	4323      	orrs	r3, r4
 8001906:	0d4a      	lsrs	r2, r1, #21
 8001908:	0b04      	lsrs	r4, r0, #12
 800190a:	0512      	lsls	r2, r2, #20
 800190c:	07ed      	lsls	r5, r5, #31
 800190e:	4322      	orrs	r2, r4
 8001910:	432a      	orrs	r2, r5
 8001912:	0018      	movs	r0, r3
 8001914:	0011      	movs	r1, r2
 8001916:	bcf0      	pop	{r4, r5, r6, r7}
 8001918:	46bb      	mov	fp, r7
 800191a:	46b2      	mov	sl, r6
 800191c:	46a9      	mov	r9, r5
 800191e:	46a0      	mov	r8, r4
 8001920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001922:	4642      	mov	r2, r8
 8001924:	1a12      	subs	r2, r2, r0
 8001926:	2a00      	cmp	r2, #0
 8001928:	dd52      	ble.n	80019d0 <__aeabi_dsub+0x20c>
 800192a:	2800      	cmp	r0, #0
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x16c>
 800192e:	e09c      	b.n	8001a6a <__aeabi_dsub+0x2a6>
 8001930:	45a0      	cmp	r8, r4
 8001932:	d100      	bne.n	8001936 <__aeabi_dsub+0x172>
 8001934:	e0ca      	b.n	8001acc <__aeabi_dsub+0x308>
 8001936:	2080      	movs	r0, #128	; 0x80
 8001938:	0400      	lsls	r0, r0, #16
 800193a:	4301      	orrs	r1, r0
 800193c:	2a38      	cmp	r2, #56	; 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0x17e>
 8001940:	e149      	b.n	8001bd6 <__aeabi_dsub+0x412>
 8001942:	2a1f      	cmp	r2, #31
 8001944:	dc00      	bgt.n	8001948 <__aeabi_dsub+0x184>
 8001946:	e197      	b.n	8001c78 <__aeabi_dsub+0x4b4>
 8001948:	0010      	movs	r0, r2
 800194a:	000e      	movs	r6, r1
 800194c:	3820      	subs	r0, #32
 800194e:	40c6      	lsrs	r6, r0
 8001950:	2a20      	cmp	r2, #32
 8001952:	d004      	beq.n	800195e <__aeabi_dsub+0x19a>
 8001954:	2040      	movs	r0, #64	; 0x40
 8001956:	1a82      	subs	r2, r0, r2
 8001958:	4091      	lsls	r1, r2
 800195a:	430f      	orrs	r7, r1
 800195c:	46b9      	mov	r9, r7
 800195e:	464c      	mov	r4, r9
 8001960:	1e62      	subs	r2, r4, #1
 8001962:	4194      	sbcs	r4, r2
 8001964:	4334      	orrs	r4, r6
 8001966:	e13a      	b.n	8001bde <__aeabi_dsub+0x41a>
 8001968:	000a      	movs	r2, r1
 800196a:	433a      	orrs	r2, r7
 800196c:	d028      	beq.n	80019c0 <__aeabi_dsub+0x1fc>
 800196e:	46b3      	mov	fp, r6
 8001970:	42b5      	cmp	r5, r6
 8001972:	d02b      	beq.n	80019cc <__aeabi_dsub+0x208>
 8001974:	4a6b      	ldr	r2, [pc, #428]	; (8001b24 <__aeabi_dsub+0x360>)
 8001976:	4442      	add	r2, r8
 8001978:	2a00      	cmp	r2, #0
 800197a:	d05d      	beq.n	8001a38 <__aeabi_dsub+0x274>
 800197c:	4642      	mov	r2, r8
 800197e:	4644      	mov	r4, r8
 8001980:	1a82      	subs	r2, r0, r2
 8001982:	2c00      	cmp	r4, #0
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x1c4>
 8001986:	e0f5      	b.n	8001b74 <__aeabi_dsub+0x3b0>
 8001988:	4665      	mov	r5, ip
 800198a:	431d      	orrs	r5, r3
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x1cc>
 800198e:	e19c      	b.n	8001cca <__aeabi_dsub+0x506>
 8001990:	1e55      	subs	r5, r2, #1
 8001992:	2a01      	cmp	r2, #1
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e1fb      	b.n	8001d90 <__aeabi_dsub+0x5cc>
 8001998:	4c60      	ldr	r4, [pc, #384]	; (8001b1c <__aeabi_dsub+0x358>)
 800199a:	42a2      	cmp	r2, r4
 800199c:	d100      	bne.n	80019a0 <__aeabi_dsub+0x1dc>
 800199e:	e1bd      	b.n	8001d1c <__aeabi_dsub+0x558>
 80019a0:	002a      	movs	r2, r5
 80019a2:	e0f0      	b.n	8001b86 <__aeabi_dsub+0x3c2>
 80019a4:	0008      	movs	r0, r1
 80019a6:	4338      	orrs	r0, r7
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x1e8>
 80019aa:	e0c3      	b.n	8001b34 <__aeabi_dsub+0x370>
 80019ac:	1e50      	subs	r0, r2, #1
 80019ae:	2a01      	cmp	r2, #1
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x1f0>
 80019b2:	e1a8      	b.n	8001d06 <__aeabi_dsub+0x542>
 80019b4:	4c59      	ldr	r4, [pc, #356]	; (8001b1c <__aeabi_dsub+0x358>)
 80019b6:	42a2      	cmp	r2, r4
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1f8>
 80019ba:	e087      	b.n	8001acc <__aeabi_dsub+0x308>
 80019bc:	0002      	movs	r2, r0
 80019be:	e736      	b.n	800182e <__aeabi_dsub+0x6a>
 80019c0:	2201      	movs	r2, #1
 80019c2:	4056      	eors	r6, r2
 80019c4:	46b3      	mov	fp, r6
 80019c6:	42b5      	cmp	r5, r6
 80019c8:	d000      	beq.n	80019cc <__aeabi_dsub+0x208>
 80019ca:	e721      	b.n	8001810 <__aeabi_dsub+0x4c>
 80019cc:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <__aeabi_dsub+0x360>)
 80019ce:	4442      	add	r2, r8
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dsub+0x212>
 80019d4:	e0b5      	b.n	8001b42 <__aeabi_dsub+0x37e>
 80019d6:	4642      	mov	r2, r8
 80019d8:	4644      	mov	r4, r8
 80019da:	1a82      	subs	r2, r0, r2
 80019dc:	2c00      	cmp	r4, #0
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x21e>
 80019e0:	e138      	b.n	8001c54 <__aeabi_dsub+0x490>
 80019e2:	4e4e      	ldr	r6, [pc, #312]	; (8001b1c <__aeabi_dsub+0x358>)
 80019e4:	42b0      	cmp	r0, r6
 80019e6:	d100      	bne.n	80019ea <__aeabi_dsub+0x226>
 80019e8:	e1de      	b.n	8001da8 <__aeabi_dsub+0x5e4>
 80019ea:	2680      	movs	r6, #128	; 0x80
 80019ec:	4664      	mov	r4, ip
 80019ee:	0436      	lsls	r6, r6, #16
 80019f0:	4334      	orrs	r4, r6
 80019f2:	46a4      	mov	ip, r4
 80019f4:	2a38      	cmp	r2, #56	; 0x38
 80019f6:	dd00      	ble.n	80019fa <__aeabi_dsub+0x236>
 80019f8:	e196      	b.n	8001d28 <__aeabi_dsub+0x564>
 80019fa:	2a1f      	cmp	r2, #31
 80019fc:	dd00      	ble.n	8001a00 <__aeabi_dsub+0x23c>
 80019fe:	e224      	b.n	8001e4a <__aeabi_dsub+0x686>
 8001a00:	2620      	movs	r6, #32
 8001a02:	1ab4      	subs	r4, r6, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4664      	mov	r4, ip
 8001a08:	4656      	mov	r6, sl
 8001a0a:	40b4      	lsls	r4, r6
 8001a0c:	46a1      	mov	r9, r4
 8001a0e:	001c      	movs	r4, r3
 8001a10:	464e      	mov	r6, r9
 8001a12:	40d4      	lsrs	r4, r2
 8001a14:	4326      	orrs	r6, r4
 8001a16:	0034      	movs	r4, r6
 8001a18:	4656      	mov	r6, sl
 8001a1a:	40b3      	lsls	r3, r6
 8001a1c:	1e5e      	subs	r6, r3, #1
 8001a1e:	41b3      	sbcs	r3, r6
 8001a20:	431c      	orrs	r4, r3
 8001a22:	4663      	mov	r3, ip
 8001a24:	40d3      	lsrs	r3, r2
 8001a26:	18c9      	adds	r1, r1, r3
 8001a28:	19e4      	adds	r4, r4, r7
 8001a2a:	42bc      	cmp	r4, r7
 8001a2c:	41bf      	sbcs	r7, r7
 8001a2e:	427f      	negs	r7, r7
 8001a30:	46b9      	mov	r9, r7
 8001a32:	4680      	mov	r8, r0
 8001a34:	4489      	add	r9, r1
 8001a36:	e0d8      	b.n	8001bea <__aeabi_dsub+0x426>
 8001a38:	4640      	mov	r0, r8
 8001a3a:	4c3b      	ldr	r4, [pc, #236]	; (8001b28 <__aeabi_dsub+0x364>)
 8001a3c:	3001      	adds	r0, #1
 8001a3e:	4220      	tst	r0, r4
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dsub+0x280>
 8001a42:	e0b4      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001a44:	4640      	mov	r0, r8
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dsub+0x288>
 8001a4a:	e144      	b.n	8001cd6 <__aeabi_dsub+0x512>
 8001a4c:	4660      	mov	r0, ip
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x290>
 8001a52:	e190      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a54:	0008      	movs	r0, r1
 8001a56:	4338      	orrs	r0, r7
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dsub+0x298>
 8001a5a:	e1aa      	b.n	8001db2 <__aeabi_dsub+0x5ee>
 8001a5c:	4661      	mov	r1, ip
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	0749      	lsls	r1, r1, #29
 8001a62:	430b      	orrs	r3, r1
 8001a64:	4661      	mov	r1, ip
 8001a66:	08cc      	lsrs	r4, r1, #3
 8001a68:	e027      	b.n	8001aba <__aeabi_dsub+0x2f6>
 8001a6a:	0008      	movs	r0, r1
 8001a6c:	4338      	orrs	r0, r7
 8001a6e:	d061      	beq.n	8001b34 <__aeabi_dsub+0x370>
 8001a70:	1e50      	subs	r0, r2, #1
 8001a72:	2a01      	cmp	r2, #1
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x2b4>
 8001a76:	e139      	b.n	8001cec <__aeabi_dsub+0x528>
 8001a78:	42a2      	cmp	r2, r4
 8001a7a:	d027      	beq.n	8001acc <__aeabi_dsub+0x308>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	e75d      	b.n	800193c <__aeabi_dsub+0x178>
 8001a80:	0002      	movs	r2, r0
 8001a82:	391f      	subs	r1, #31
 8001a84:	40ca      	lsrs	r2, r1
 8001a86:	0011      	movs	r1, r2
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d003      	beq.n	8001a94 <__aeabi_dsub+0x2d0>
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	4098      	lsls	r0, r3
 8001a92:	4304      	orrs	r4, r0
 8001a94:	1e63      	subs	r3, r4, #1
 8001a96:	419c      	sbcs	r4, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	4699      	mov	r9, r3
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	430c      	orrs	r4, r1
 8001aa0:	0763      	lsls	r3, r4, #29
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dsub+0x2e2>
 8001aa4:	e712      	b.n	80018cc <__aeabi_dsub+0x108>
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	464a      	mov	r2, r9
 8001aaa:	08e4      	lsrs	r4, r4, #3
 8001aac:	075b      	lsls	r3, r3, #29
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	08d4      	lsrs	r4, r2, #3
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	4919      	ldr	r1, [pc, #100]	; (8001b1c <__aeabi_dsub+0x358>)
 8001ab6:	428a      	cmp	r2, r1
 8001ab8:	d00e      	beq.n	8001ad8 <__aeabi_dsub+0x314>
 8001aba:	0324      	lsls	r4, r4, #12
 8001abc:	0552      	lsls	r2, r2, #21
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	0d52      	lsrs	r2, r2, #21
 8001ac2:	e722      	b.n	800190a <__aeabi_dsub+0x146>
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e71e      	b.n	800190a <__aeabi_dsub+0x146>
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	4662      	mov	r2, ip
 8001ad0:	0752      	lsls	r2, r2, #29
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	4662      	mov	r2, ip
 8001ad6:	08d4      	lsrs	r4, r2, #3
 8001ad8:	001a      	movs	r2, r3
 8001ada:	4322      	orrs	r2, r4
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_dsub+0x31c>
 8001ade:	e1fc      	b.n	8001eda <__aeabi_dsub+0x716>
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	0312      	lsls	r2, r2, #12
 8001ae4:	4314      	orrs	r4, r2
 8001ae6:	0324      	lsls	r4, r4, #12
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <__aeabi_dsub+0x358>)
 8001aea:	0b24      	lsrs	r4, r4, #12
 8001aec:	e70d      	b.n	800190a <__aeabi_dsub+0x146>
 8001aee:	0020      	movs	r0, r4
 8001af0:	f000 fa60 	bl	8001fb4 <__clzsi2>
 8001af4:	0001      	movs	r1, r0
 8001af6:	3118      	adds	r1, #24
 8001af8:	291f      	cmp	r1, #31
 8001afa:	dc00      	bgt.n	8001afe <__aeabi_dsub+0x33a>
 8001afc:	e6c4      	b.n	8001888 <__aeabi_dsub+0xc4>
 8001afe:	3808      	subs	r0, #8
 8001b00:	4084      	lsls	r4, r0
 8001b02:	4643      	mov	r3, r8
 8001b04:	0020      	movs	r0, r4
 8001b06:	2400      	movs	r4, #0
 8001b08:	4588      	cmp	r8, r1
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_dsub+0x34a>
 8001b0c:	e6c8      	b.n	80018a0 <__aeabi_dsub+0xdc>
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__aeabi_dsub+0x35c>)
 8001b10:	1a5b      	subs	r3, r3, r1
 8001b12:	4010      	ands	r0, r2
 8001b14:	4698      	mov	r8, r3
 8001b16:	4681      	mov	r9, r0
 8001b18:	e6d6      	b.n	80018c8 <__aeabi_dsub+0x104>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	000007ff 	.word	0x000007ff
 8001b20:	ff7fffff 	.word	0xff7fffff
 8001b24:	fffff801 	.word	0xfffff801
 8001b28:	000007fe 	.word	0x000007fe
 8001b2c:	430f      	orrs	r7, r1
 8001b2e:	1e7a      	subs	r2, r7, #1
 8001b30:	4197      	sbcs	r7, r2
 8001b32:	e691      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b34:	4661      	mov	r1, ip
 8001b36:	08db      	lsrs	r3, r3, #3
 8001b38:	0749      	lsls	r1, r1, #29
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	4661      	mov	r1, ip
 8001b3e:	08cc      	lsrs	r4, r1, #3
 8001b40:	e7b8      	b.n	8001ab4 <__aeabi_dsub+0x2f0>
 8001b42:	4640      	mov	r0, r8
 8001b44:	4cd3      	ldr	r4, [pc, #844]	; (8001e94 <__aeabi_dsub+0x6d0>)
 8001b46:	3001      	adds	r0, #1
 8001b48:	4220      	tst	r0, r4
 8001b4a:	d000      	beq.n	8001b4e <__aeabi_dsub+0x38a>
 8001b4c:	e0a2      	b.n	8001c94 <__aeabi_dsub+0x4d0>
 8001b4e:	4640      	mov	r0, r8
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d000      	beq.n	8001b56 <__aeabi_dsub+0x392>
 8001b54:	e101      	b.n	8001d5a <__aeabi_dsub+0x596>
 8001b56:	4660      	mov	r0, ip
 8001b58:	4318      	orrs	r0, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x39a>
 8001b5c:	e15e      	b.n	8001e1c <__aeabi_dsub+0x658>
 8001b5e:	0008      	movs	r0, r1
 8001b60:	4338      	orrs	r0, r7
 8001b62:	d000      	beq.n	8001b66 <__aeabi_dsub+0x3a2>
 8001b64:	e15f      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001b66:	4661      	mov	r1, ip
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	0749      	lsls	r1, r1, #29
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	4661      	mov	r1, ip
 8001b70:	08cc      	lsrs	r4, r1, #3
 8001b72:	e7a2      	b.n	8001aba <__aeabi_dsub+0x2f6>
 8001b74:	4dc8      	ldr	r5, [pc, #800]	; (8001e98 <__aeabi_dsub+0x6d4>)
 8001b76:	42a8      	cmp	r0, r5
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x3b8>
 8001b7a:	e0cf      	b.n	8001d1c <__aeabi_dsub+0x558>
 8001b7c:	2580      	movs	r5, #128	; 0x80
 8001b7e:	4664      	mov	r4, ip
 8001b80:	042d      	lsls	r5, r5, #16
 8001b82:	432c      	orrs	r4, r5
 8001b84:	46a4      	mov	ip, r4
 8001b86:	2a38      	cmp	r2, #56	; 0x38
 8001b88:	dc56      	bgt.n	8001c38 <__aeabi_dsub+0x474>
 8001b8a:	2a1f      	cmp	r2, #31
 8001b8c:	dd00      	ble.n	8001b90 <__aeabi_dsub+0x3cc>
 8001b8e:	e0d1      	b.n	8001d34 <__aeabi_dsub+0x570>
 8001b90:	2520      	movs	r5, #32
 8001b92:	001e      	movs	r6, r3
 8001b94:	1aad      	subs	r5, r5, r2
 8001b96:	4664      	mov	r4, ip
 8001b98:	40ab      	lsls	r3, r5
 8001b9a:	40ac      	lsls	r4, r5
 8001b9c:	40d6      	lsrs	r6, r2
 8001b9e:	1e5d      	subs	r5, r3, #1
 8001ba0:	41ab      	sbcs	r3, r5
 8001ba2:	4334      	orrs	r4, r6
 8001ba4:	4323      	orrs	r3, r4
 8001ba6:	4664      	mov	r4, ip
 8001ba8:	40d4      	lsrs	r4, r2
 8001baa:	1b09      	subs	r1, r1, r4
 8001bac:	e049      	b.n	8001c42 <__aeabi_dsub+0x47e>
 8001bae:	4660      	mov	r0, ip
 8001bb0:	1bdc      	subs	r4, r3, r7
 8001bb2:	1a46      	subs	r6, r0, r1
 8001bb4:	42a3      	cmp	r3, r4
 8001bb6:	4180      	sbcs	r0, r0
 8001bb8:	4240      	negs	r0, r0
 8001bba:	4681      	mov	r9, r0
 8001bbc:	0030      	movs	r0, r6
 8001bbe:	464e      	mov	r6, r9
 8001bc0:	1b80      	subs	r0, r0, r6
 8001bc2:	4681      	mov	r9, r0
 8001bc4:	0200      	lsls	r0, r0, #8
 8001bc6:	d476      	bmi.n	8001cb6 <__aeabi_dsub+0x4f2>
 8001bc8:	464b      	mov	r3, r9
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x40c>
 8001bce:	e652      	b.n	8001876 <__aeabi_dsub+0xb2>
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	e771      	b.n	8001aba <__aeabi_dsub+0x2f6>
 8001bd6:	4339      	orrs	r1, r7
 8001bd8:	000c      	movs	r4, r1
 8001bda:	1e62      	subs	r2, r4, #1
 8001bdc:	4194      	sbcs	r4, r2
 8001bde:	18e4      	adds	r4, r4, r3
 8001be0:	429c      	cmp	r4, r3
 8001be2:	419b      	sbcs	r3, r3
 8001be4:	425b      	negs	r3, r3
 8001be6:	4463      	add	r3, ip
 8001be8:	4699      	mov	r9, r3
 8001bea:	464b      	mov	r3, r9
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	d400      	bmi.n	8001bf2 <__aeabi_dsub+0x42e>
 8001bf0:	e756      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4ba8      	ldr	r3, [pc, #672]	; (8001e98 <__aeabi_dsub+0x6d4>)
 8001bf8:	44e0      	add	r8, ip
 8001bfa:	4598      	cmp	r8, r3
 8001bfc:	d038      	beq.n	8001c70 <__aeabi_dsub+0x4ac>
 8001bfe:	464b      	mov	r3, r9
 8001c00:	48a6      	ldr	r0, [pc, #664]	; (8001e9c <__aeabi_dsub+0x6d8>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	4003      	ands	r3, r0
 8001c06:	0018      	movs	r0, r3
 8001c08:	0863      	lsrs	r3, r4, #1
 8001c0a:	4014      	ands	r4, r2
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	07c3      	lsls	r3, r0, #31
 8001c10:	431c      	orrs	r4, r3
 8001c12:	0843      	lsrs	r3, r0, #1
 8001c14:	4699      	mov	r9, r3
 8001c16:	e657      	b.n	80018c8 <__aeabi_dsub+0x104>
 8001c18:	0010      	movs	r0, r2
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	3820      	subs	r0, #32
 8001c1e:	40c6      	lsrs	r6, r0
 8001c20:	2a20      	cmp	r2, #32
 8001c22:	d004      	beq.n	8001c2e <__aeabi_dsub+0x46a>
 8001c24:	2040      	movs	r0, #64	; 0x40
 8001c26:	1a82      	subs	r2, r0, r2
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	430f      	orrs	r7, r1
 8001c2c:	46b9      	mov	r9, r7
 8001c2e:	464f      	mov	r7, r9
 8001c30:	1e7a      	subs	r2, r7, #1
 8001c32:	4197      	sbcs	r7, r2
 8001c34:	4337      	orrs	r7, r6
 8001c36:	e60f      	b.n	8001858 <__aeabi_dsub+0x94>
 8001c38:	4662      	mov	r2, ip
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	4193      	sbcs	r3, r2
 8001c42:	1afc      	subs	r4, r7, r3
 8001c44:	42a7      	cmp	r7, r4
 8001c46:	41bf      	sbcs	r7, r7
 8001c48:	427f      	negs	r7, r7
 8001c4a:	1bcb      	subs	r3, r1, r7
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	465d      	mov	r5, fp
 8001c50:	4680      	mov	r8, r0
 8001c52:	e608      	b.n	8001866 <__aeabi_dsub+0xa2>
 8001c54:	4666      	mov	r6, ip
 8001c56:	431e      	orrs	r6, r3
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x498>
 8001c5a:	e0be      	b.n	8001dda <__aeabi_dsub+0x616>
 8001c5c:	1e56      	subs	r6, r2, #1
 8001c5e:	2a01      	cmp	r2, #1
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x4a0>
 8001c62:	e109      	b.n	8001e78 <__aeabi_dsub+0x6b4>
 8001c64:	4c8c      	ldr	r4, [pc, #560]	; (8001e98 <__aeabi_dsub+0x6d4>)
 8001c66:	42a2      	cmp	r2, r4
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c6a:	e119      	b.n	8001ea0 <__aeabi_dsub+0x6dc>
 8001c6c:	0032      	movs	r2, r6
 8001c6e:	e6c1      	b.n	80019f4 <__aeabi_dsub+0x230>
 8001c70:	4642      	mov	r2, r8
 8001c72:	2400      	movs	r4, #0
 8001c74:	2300      	movs	r3, #0
 8001c76:	e648      	b.n	800190a <__aeabi_dsub+0x146>
 8001c78:	2020      	movs	r0, #32
 8001c7a:	000c      	movs	r4, r1
 8001c7c:	1a80      	subs	r0, r0, r2
 8001c7e:	003e      	movs	r6, r7
 8001c80:	4087      	lsls	r7, r0
 8001c82:	4084      	lsls	r4, r0
 8001c84:	40d6      	lsrs	r6, r2
 8001c86:	1e78      	subs	r0, r7, #1
 8001c88:	4187      	sbcs	r7, r0
 8001c8a:	40d1      	lsrs	r1, r2
 8001c8c:	4334      	orrs	r4, r6
 8001c8e:	433c      	orrs	r4, r7
 8001c90:	448c      	add	ip, r1
 8001c92:	e7a4      	b.n	8001bde <__aeabi_dsub+0x41a>
 8001c94:	4a80      	ldr	r2, [pc, #512]	; (8001e98 <__aeabi_dsub+0x6d4>)
 8001c96:	4290      	cmp	r0, r2
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4d8>
 8001c9a:	e0e9      	b.n	8001e70 <__aeabi_dsub+0x6ac>
 8001c9c:	19df      	adds	r7, r3, r7
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	419b      	sbcs	r3, r3
 8001ca2:	4461      	add	r1, ip
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	18c9      	adds	r1, r1, r3
 8001ca8:	07cc      	lsls	r4, r1, #31
 8001caa:	087f      	lsrs	r7, r7, #1
 8001cac:	084b      	lsrs	r3, r1, #1
 8001cae:	4699      	mov	r9, r3
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	433c      	orrs	r4, r7
 8001cb4:	e6f4      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001cb6:	1afc      	subs	r4, r7, r3
 8001cb8:	42a7      	cmp	r7, r4
 8001cba:	41bf      	sbcs	r7, r7
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	427f      	negs	r7, r7
 8001cc0:	1ac9      	subs	r1, r1, r3
 8001cc2:	1bcb      	subs	r3, r1, r7
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	465d      	mov	r5, fp
 8001cc8:	e5d5      	b.n	8001876 <__aeabi_dsub+0xb2>
 8001cca:	08ff      	lsrs	r7, r7, #3
 8001ccc:	074b      	lsls	r3, r1, #29
 8001cce:	465d      	mov	r5, fp
 8001cd0:	433b      	orrs	r3, r7
 8001cd2:	08cc      	lsrs	r4, r1, #3
 8001cd4:	e6ee      	b.n	8001ab4 <__aeabi_dsub+0x2f0>
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x51a>
 8001cdc:	e082      	b.n	8001de4 <__aeabi_dsub+0x620>
 8001cde:	000b      	movs	r3, r1
 8001ce0:	433b      	orrs	r3, r7
 8001ce2:	d11b      	bne.n	8001d1c <__aeabi_dsub+0x558>
 8001ce4:	2480      	movs	r4, #128	; 0x80
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	e6f9      	b.n	8001ae0 <__aeabi_dsub+0x31c>
 8001cec:	19dc      	adds	r4, r3, r7
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	419b      	sbcs	r3, r3
 8001cf2:	4461      	add	r1, ip
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	425b      	negs	r3, r3
 8001cf8:	4499      	add	r9, r3
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	d444      	bmi.n	8001d8a <__aeabi_dsub+0x5c6>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4698      	mov	r8, r3
 8001d04:	e6cc      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001d06:	1bdc      	subs	r4, r3, r7
 8001d08:	4662      	mov	r2, ip
 8001d0a:	42a3      	cmp	r3, r4
 8001d0c:	419b      	sbcs	r3, r3
 8001d0e:	1a51      	subs	r1, r2, r1
 8001d10:	425b      	negs	r3, r3
 8001d12:	1acb      	subs	r3, r1, r3
 8001d14:	4699      	mov	r9, r3
 8001d16:	2301      	movs	r3, #1
 8001d18:	4698      	mov	r8, r3
 8001d1a:	e5a4      	b.n	8001866 <__aeabi_dsub+0xa2>
 8001d1c:	08ff      	lsrs	r7, r7, #3
 8001d1e:	074b      	lsls	r3, r1, #29
 8001d20:	465d      	mov	r5, fp
 8001d22:	433b      	orrs	r3, r7
 8001d24:	08cc      	lsrs	r4, r1, #3
 8001d26:	e6d7      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d28:	4662      	mov	r2, ip
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	0014      	movs	r4, r2
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	e679      	b.n	8001a28 <__aeabi_dsub+0x264>
 8001d34:	0015      	movs	r5, r2
 8001d36:	4664      	mov	r4, ip
 8001d38:	3d20      	subs	r5, #32
 8001d3a:	40ec      	lsrs	r4, r5
 8001d3c:	46a0      	mov	r8, r4
 8001d3e:	2a20      	cmp	r2, #32
 8001d40:	d005      	beq.n	8001d4e <__aeabi_dsub+0x58a>
 8001d42:	2540      	movs	r5, #64	; 0x40
 8001d44:	4664      	mov	r4, ip
 8001d46:	1aaa      	subs	r2, r5, r2
 8001d48:	4094      	lsls	r4, r2
 8001d4a:	4323      	orrs	r3, r4
 8001d4c:	469a      	mov	sl, r3
 8001d4e:	4654      	mov	r4, sl
 8001d50:	1e63      	subs	r3, r4, #1
 8001d52:	419c      	sbcs	r4, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	4323      	orrs	r3, r4
 8001d58:	e773      	b.n	8001c42 <__aeabi_dsub+0x47e>
 8001d5a:	4662      	mov	r2, ip
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	d023      	beq.n	8001da8 <__aeabi_dsub+0x5e4>
 8001d60:	000a      	movs	r2, r1
 8001d62:	433a      	orrs	r2, r7
 8001d64:	d000      	beq.n	8001d68 <__aeabi_dsub+0x5a4>
 8001d66:	e0a0      	b.n	8001eaa <__aeabi_dsub+0x6e6>
 8001d68:	4662      	mov	r2, ip
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	0752      	lsls	r2, r2, #29
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	4662      	mov	r2, ip
 8001d72:	08d4      	lsrs	r4, r2, #3
 8001d74:	e6b0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d76:	000b      	movs	r3, r1
 8001d78:	433b      	orrs	r3, r7
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x5ba>
 8001d7c:	e728      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001d7e:	08ff      	lsrs	r7, r7, #3
 8001d80:	074b      	lsls	r3, r1, #29
 8001d82:	465d      	mov	r5, fp
 8001d84:	433b      	orrs	r3, r7
 8001d86:	08cc      	lsrs	r4, r1, #3
 8001d88:	e697      	b.n	8001aba <__aeabi_dsub+0x2f6>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	e736      	b.n	8001bfe <__aeabi_dsub+0x43a>
 8001d90:	1afc      	subs	r4, r7, r3
 8001d92:	42a7      	cmp	r7, r4
 8001d94:	41bf      	sbcs	r7, r7
 8001d96:	4663      	mov	r3, ip
 8001d98:	427f      	negs	r7, r7
 8001d9a:	1ac9      	subs	r1, r1, r3
 8001d9c:	1bcb      	subs	r3, r1, r7
 8001d9e:	4699      	mov	r9, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	465d      	mov	r5, fp
 8001da4:	4698      	mov	r8, r3
 8001da6:	e55e      	b.n	8001866 <__aeabi_dsub+0xa2>
 8001da8:	074b      	lsls	r3, r1, #29
 8001daa:	08ff      	lsrs	r7, r7, #3
 8001dac:	433b      	orrs	r3, r7
 8001dae:	08cc      	lsrs	r4, r1, #3
 8001db0:	e692      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001db2:	1bdc      	subs	r4, r3, r7
 8001db4:	4660      	mov	r0, ip
 8001db6:	42a3      	cmp	r3, r4
 8001db8:	41b6      	sbcs	r6, r6
 8001dba:	1a40      	subs	r0, r0, r1
 8001dbc:	4276      	negs	r6, r6
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	4681      	mov	r9, r0
 8001dc2:	0200      	lsls	r0, r0, #8
 8001dc4:	d560      	bpl.n	8001e88 <__aeabi_dsub+0x6c4>
 8001dc6:	1afc      	subs	r4, r7, r3
 8001dc8:	42a7      	cmp	r7, r4
 8001dca:	41bf      	sbcs	r7, r7
 8001dcc:	4663      	mov	r3, ip
 8001dce:	427f      	negs	r7, r7
 8001dd0:	1ac9      	subs	r1, r1, r3
 8001dd2:	1bcb      	subs	r3, r1, r7
 8001dd4:	4699      	mov	r9, r3
 8001dd6:	465d      	mov	r5, fp
 8001dd8:	e576      	b.n	80018c8 <__aeabi_dsub+0x104>
 8001dda:	08ff      	lsrs	r7, r7, #3
 8001ddc:	074b      	lsls	r3, r1, #29
 8001dde:	433b      	orrs	r3, r7
 8001de0:	08cc      	lsrs	r4, r1, #3
 8001de2:	e667      	b.n	8001ab4 <__aeabi_dsub+0x2f0>
 8001de4:	000a      	movs	r2, r1
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	433a      	orrs	r2, r7
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x62a>
 8001dec:	e66f      	b.n	8001ace <__aeabi_dsub+0x30a>
 8001dee:	4662      	mov	r2, ip
 8001df0:	0752      	lsls	r2, r2, #29
 8001df2:	4313      	orrs	r3, r2
 8001df4:	4662      	mov	r2, ip
 8001df6:	08d4      	lsrs	r4, r2, #3
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0312      	lsls	r2, r2, #12
 8001dfc:	4214      	tst	r4, r2
 8001dfe:	d007      	beq.n	8001e10 <__aeabi_dsub+0x64c>
 8001e00:	08c8      	lsrs	r0, r1, #3
 8001e02:	4210      	tst	r0, r2
 8001e04:	d104      	bne.n	8001e10 <__aeabi_dsub+0x64c>
 8001e06:	465d      	mov	r5, fp
 8001e08:	0004      	movs	r4, r0
 8001e0a:	08fb      	lsrs	r3, r7, #3
 8001e0c:	0749      	lsls	r1, r1, #29
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	0f5a      	lsrs	r2, r3, #29
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	0752      	lsls	r2, r2, #29
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	e65d      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e1c:	074b      	lsls	r3, r1, #29
 8001e1e:	08ff      	lsrs	r7, r7, #3
 8001e20:	433b      	orrs	r3, r7
 8001e22:	08cc      	lsrs	r4, r1, #3
 8001e24:	e649      	b.n	8001aba <__aeabi_dsub+0x2f6>
 8001e26:	19dc      	adds	r4, r3, r7
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	4689      	mov	r9, r1
 8001e30:	425b      	negs	r3, r3
 8001e32:	4499      	add	r9, r3
 8001e34:	464b      	mov	r3, r9
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	d400      	bmi.n	8001e3c <__aeabi_dsub+0x678>
 8001e3a:	e631      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001e3c:	464a      	mov	r2, r9
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <__aeabi_dsub+0x6d8>)
 8001e40:	401a      	ands	r2, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	4691      	mov	r9, r2
 8001e46:	4698      	mov	r8, r3
 8001e48:	e62a      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001e4a:	0016      	movs	r6, r2
 8001e4c:	4664      	mov	r4, ip
 8001e4e:	3e20      	subs	r6, #32
 8001e50:	40f4      	lsrs	r4, r6
 8001e52:	46a0      	mov	r8, r4
 8001e54:	2a20      	cmp	r2, #32
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dsub+0x6a0>
 8001e58:	2640      	movs	r6, #64	; 0x40
 8001e5a:	4664      	mov	r4, ip
 8001e5c:	1ab2      	subs	r2, r6, r2
 8001e5e:	4094      	lsls	r4, r2
 8001e60:	4323      	orrs	r3, r4
 8001e62:	469a      	mov	sl, r3
 8001e64:	4654      	mov	r4, sl
 8001e66:	1e63      	subs	r3, r4, #1
 8001e68:	419c      	sbcs	r4, r3
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	431c      	orrs	r4, r3
 8001e6e:	e5db      	b.n	8001a28 <__aeabi_dsub+0x264>
 8001e70:	0002      	movs	r2, r0
 8001e72:	2400      	movs	r4, #0
 8001e74:	2300      	movs	r3, #0
 8001e76:	e548      	b.n	800190a <__aeabi_dsub+0x146>
 8001e78:	19dc      	adds	r4, r3, r7
 8001e7a:	42bc      	cmp	r4, r7
 8001e7c:	41bf      	sbcs	r7, r7
 8001e7e:	4461      	add	r1, ip
 8001e80:	4689      	mov	r9, r1
 8001e82:	427f      	negs	r7, r7
 8001e84:	44b9      	add	r9, r7
 8001e86:	e738      	b.n	8001cfa <__aeabi_dsub+0x536>
 8001e88:	464b      	mov	r3, r9
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x6cc>
 8001e8e:	e69f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001e90:	e606      	b.n	8001aa0 <__aeabi_dsub+0x2dc>
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	ff7fffff 	.word	0xff7fffff
 8001ea0:	08ff      	lsrs	r7, r7, #3
 8001ea2:	074b      	lsls	r3, r1, #29
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	08cc      	lsrs	r4, r1, #3
 8001ea8:	e616      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001eaa:	4662      	mov	r2, ip
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	0752      	lsls	r2, r2, #29
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	08d4      	lsrs	r4, r2, #3
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	0312      	lsls	r2, r2, #12
 8001eba:	4214      	tst	r4, r2
 8001ebc:	d007      	beq.n	8001ece <__aeabi_dsub+0x70a>
 8001ebe:	08c8      	lsrs	r0, r1, #3
 8001ec0:	4210      	tst	r0, r2
 8001ec2:	d104      	bne.n	8001ece <__aeabi_dsub+0x70a>
 8001ec4:	465d      	mov	r5, fp
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	08fb      	lsrs	r3, r7, #3
 8001eca:	0749      	lsls	r1, r1, #29
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	0f5a      	lsrs	r2, r3, #29
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	0752      	lsls	r2, r2, #29
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	e5fe      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001eda:	2300      	movs	r3, #0
 8001edc:	4a01      	ldr	r2, [pc, #4]	; (8001ee4 <__aeabi_dsub+0x720>)
 8001ede:	001c      	movs	r4, r3
 8001ee0:	e513      	b.n	800190a <__aeabi_dsub+0x146>
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	000007ff 	.word	0x000007ff

08001ee8 <__aeabi_d2iz>:
 8001ee8:	000a      	movs	r2, r1
 8001eea:	b530      	push	{r4, r5, lr}
 8001eec:	4c13      	ldr	r4, [pc, #76]	; (8001f3c <__aeabi_d2iz+0x54>)
 8001eee:	0053      	lsls	r3, r2, #1
 8001ef0:	0309      	lsls	r1, r1, #12
 8001ef2:	0005      	movs	r5, r0
 8001ef4:	0b09      	lsrs	r1, r1, #12
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	0d5b      	lsrs	r3, r3, #21
 8001efa:	0fd2      	lsrs	r2, r2, #31
 8001efc:	42a3      	cmp	r3, r4
 8001efe:	dd04      	ble.n	8001f0a <__aeabi_d2iz+0x22>
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <__aeabi_d2iz+0x58>)
 8001f02:	4283      	cmp	r3, r0
 8001f04:	dd02      	ble.n	8001f0c <__aeabi_d2iz+0x24>
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <__aeabi_d2iz+0x5c>)
 8001f08:	18d0      	adds	r0, r2, r3
 8001f0a:	bd30      	pop	{r4, r5, pc}
 8001f0c:	2080      	movs	r0, #128	; 0x80
 8001f0e:	0340      	lsls	r0, r0, #13
 8001f10:	4301      	orrs	r1, r0
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <__aeabi_d2iz+0x60>)
 8001f14:	1ac0      	subs	r0, r0, r3
 8001f16:	281f      	cmp	r0, #31
 8001f18:	dd08      	ble.n	8001f2c <__aeabi_d2iz+0x44>
 8001f1a:	480c      	ldr	r0, [pc, #48]	; (8001f4c <__aeabi_d2iz+0x64>)
 8001f1c:	1ac3      	subs	r3, r0, r3
 8001f1e:	40d9      	lsrs	r1, r3
 8001f20:	000b      	movs	r3, r1
 8001f22:	4258      	negs	r0, r3
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d1f0      	bne.n	8001f0a <__aeabi_d2iz+0x22>
 8001f28:	0018      	movs	r0, r3
 8001f2a:	e7ee      	b.n	8001f0a <__aeabi_d2iz+0x22>
 8001f2c:	4c08      	ldr	r4, [pc, #32]	; (8001f50 <__aeabi_d2iz+0x68>)
 8001f2e:	40c5      	lsrs	r5, r0
 8001f30:	46a4      	mov	ip, r4
 8001f32:	4463      	add	r3, ip
 8001f34:	4099      	lsls	r1, r3
 8001f36:	000b      	movs	r3, r1
 8001f38:	432b      	orrs	r3, r5
 8001f3a:	e7f2      	b.n	8001f22 <__aeabi_d2iz+0x3a>
 8001f3c:	000003fe 	.word	0x000003fe
 8001f40:	0000041d 	.word	0x0000041d
 8001f44:	7fffffff 	.word	0x7fffffff
 8001f48:	00000433 	.word	0x00000433
 8001f4c:	00000413 	.word	0x00000413
 8001f50:	fffffbed 	.word	0xfffffbed

08001f54 <__aeabi_i2d>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d016      	beq.n	8001f88 <__aeabi_i2d+0x34>
 8001f5a:	17c3      	asrs	r3, r0, #31
 8001f5c:	18c5      	adds	r5, r0, r3
 8001f5e:	405d      	eors	r5, r3
 8001f60:	0fc4      	lsrs	r4, r0, #31
 8001f62:	0028      	movs	r0, r5
 8001f64:	f000 f826 	bl	8001fb4 <__clzsi2>
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <__aeabi_i2d+0x5c>)
 8001f6a:	1a12      	subs	r2, r2, r0
 8001f6c:	280a      	cmp	r0, #10
 8001f6e:	dc16      	bgt.n	8001f9e <__aeabi_i2d+0x4a>
 8001f70:	0003      	movs	r3, r0
 8001f72:	002e      	movs	r6, r5
 8001f74:	3315      	adds	r3, #21
 8001f76:	409e      	lsls	r6, r3
 8001f78:	230b      	movs	r3, #11
 8001f7a:	1a18      	subs	r0, r3, r0
 8001f7c:	40c5      	lsrs	r5, r0
 8001f7e:	0552      	lsls	r2, r2, #21
 8001f80:	032d      	lsls	r5, r5, #12
 8001f82:	0b2d      	lsrs	r5, r5, #12
 8001f84:	0d53      	lsrs	r3, r2, #21
 8001f86:	e003      	b.n	8001f90 <__aeabi_i2d+0x3c>
 8001f88:	2400      	movs	r4, #0
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	2600      	movs	r6, #0
 8001f90:	051b      	lsls	r3, r3, #20
 8001f92:	432b      	orrs	r3, r5
 8001f94:	07e4      	lsls	r4, r4, #31
 8001f96:	4323      	orrs	r3, r4
 8001f98:	0030      	movs	r0, r6
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
 8001f9e:	380b      	subs	r0, #11
 8001fa0:	4085      	lsls	r5, r0
 8001fa2:	0552      	lsls	r2, r2, #21
 8001fa4:	032d      	lsls	r5, r5, #12
 8001fa6:	2600      	movs	r6, #0
 8001fa8:	0b2d      	lsrs	r5, r5, #12
 8001faa:	0d53      	lsrs	r3, r2, #21
 8001fac:	e7f0      	b.n	8001f90 <__aeabi_i2d+0x3c>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	0000041e 	.word	0x0000041e

08001fb4 <__clzsi2>:
 8001fb4:	211c      	movs	r1, #28
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	4298      	cmp	r0, r3
 8001fbc:	d301      	bcc.n	8001fc2 <__clzsi2+0xe>
 8001fbe:	0c00      	lsrs	r0, r0, #16
 8001fc0:	3910      	subs	r1, #16
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	4298      	cmp	r0, r3
 8001fc6:	d301      	bcc.n	8001fcc <__clzsi2+0x18>
 8001fc8:	0a00      	lsrs	r0, r0, #8
 8001fca:	3908      	subs	r1, #8
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	d301      	bcc.n	8001fd6 <__clzsi2+0x22>
 8001fd2:	0900      	lsrs	r0, r0, #4
 8001fd4:	3904      	subs	r1, #4
 8001fd6:	a202      	add	r2, pc, #8	; (adr r2, 8001fe0 <__clzsi2+0x2c>)
 8001fd8:	5c10      	ldrb	r0, [r2, r0]
 8001fda:	1840      	adds	r0, r0, r1
 8001fdc:	4770      	bx	lr
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	02020304 	.word	0x02020304
 8001fe4:	01010101 	.word	0x01010101
	...

08001ff0 <InitialisiereFXOS8700CQ>:
#include <stdio.h>
#include <string.h>
#include <stdbool.h>


bool InitialisiereFXOS8700CQ(){
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af04      	add	r7, sp, #16
	uint8_t buf[15];


	//Versetze Sensor zur Konfiguration in Standby

	buf[0] = FXOS8700CQ_CTRL_REG1;
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	222a      	movs	r2, #42	; 0x2a
 8001ffa:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000; //letztes Bit gibt Standby-Modus an
 8001ffc:	003b      	movs	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 8002002:	250f      	movs	r5, #15
 8002004:	197c      	adds	r4, r7, r5
 8002006:	003a      	movs	r2, r7
 8002008:	4867      	ldr	r0, [pc, #412]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 800200a:	2301      	movs	r3, #1
 800200c:	425b      	negs	r3, r3
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2302      	movs	r3, #2
 8002012:	213e      	movs	r1, #62	; 0x3e
 8002014:	f001 fb00 	bl	8003618 <HAL_I2C_Master_Transmit>
 8002018:	0003      	movs	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]

	//konfiguriere M_CTRL_REG1
	buf[0] = FXOS8700CQ_M_CTRL_REG1;
 800201c:	003b      	movs	r3, r7
 800201e:	225b      	movs	r2, #91	; 0x5b
 8002020:	701a      	strb	r2, [r3, #0]

			//Bit 7: Auto Calibration [On]/Off	Bit 6: One-shot magnetic reset On/[Off]
			//Bit 5: One-shot triggered Magnetic measurement mode On/[Off]
			//Bit 4-2: Oversample ratio (OSR) (Datasheet S.99) wähle 011 für OSR = 16 bei 6,25 Hz ODR
			//Bit 1-0:	11 gewählt für Hybrid Mode
	buf[1] = 0b10001111;
 8002022:	003b      	movs	r3, r7
 8002024:	228f      	movs	r2, #143	; 0x8f
 8002026:	705a      	strb	r2, [r3, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 8002028:	197c      	adds	r4, r7, r5
 800202a:	003a      	movs	r2, r7
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 800202e:	2301      	movs	r3, #1
 8002030:	425b      	negs	r3, r3
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2302      	movs	r3, #2
 8002036:	213e      	movs	r1, #62	; 0x3e
 8002038:	f001 faee 	bl	8003618 <HAL_I2C_Master_Transmit>
 800203c:	0003      	movs	r3, r0
 800203e:	7023      	strb	r3, [r4, #0]

		//prüfe, ob M_CTRL_REG1 korrekt konfiguriert ist

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_M_CTRL_REG1, 1, buf, 1, 1000);
 8002040:	197c      	adds	r4, r7, r5
 8002042:	4859      	ldr	r0, [pc, #356]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 8002044:	23fa      	movs	r3, #250	; 0xfa
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	2301      	movs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	003b      	movs	r3, r7
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2301      	movs	r3, #1
 8002054:	225b      	movs	r2, #91	; 0x5b
 8002056:	213e      	movs	r1, #62	; 0x3e
 8002058:	f001 fcee 	bl	8003a38 <HAL_I2C_Mem_Read>
 800205c:	0003      	movs	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]

			if (ret != HAL_OK || buf[0] != 0b10001111){
 8002060:	197b      	adds	r3, r7, r5
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <InitialisiereFXOS8700CQ+0x80>
 8002068:	003b      	movs	r3, r7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b8f      	cmp	r3, #143	; 0x8f
 800206e:	d009      	beq.n	8002084 <InitialisiereFXOS8700CQ+0x94>
				//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die M_CTRL-REG1-Werte richtig sind
				strcpy((char*)buf, "INIT ERROR");
 8002070:	003b      	movs	r3, r7
 8002072:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <InitialisiereFXOS8700CQ+0x1bc>)
 8002074:	ca03      	ldmia	r2!, {r0, r1}
 8002076:	c303      	stmia	r3!, {r0, r1}
 8002078:	8811      	ldrh	r1, [r2, #0]
 800207a:	8019      	strh	r1, [r3, #0]
 800207c:	7892      	ldrb	r2, [r2, #2]
 800207e:	709a      	strb	r2, [r3, #2]
				return false;
 8002080:	2300      	movs	r3, #0
 8002082:	e08d      	b.n	80021a0 <InitialisiereFXOS8700CQ+0x1b0>
			}
	//konfiguriere M_CTRL_REG2

	buf[0] = FXOS8700CQ_M_CTRL_REG2;
 8002084:	003b      	movs	r3, r7
 8002086:	225c      	movs	r2, #92	; 0x5c
 8002088:	701a      	strb	r2, [r3, #0]

			//Bit 7-6: nicht belegt; unwichtig
			//Bit 5: hyb_autoinc_mod = 1, um Mag- und Acc- Daten in einem Burst read auszulesen
			//Bit 4-2: Magnetic measurement max/min-Konfiguration, für Anwendung unwichtig, wähle deshalb Standardwert 000
			//Bit 1-0: Magnetic sensor reset (degaussing) Frequenz; wähle Standardwert 00
	buf[1] = 0b00100000;
 800208a:	003b      	movs	r3, r7
 800208c:	2220      	movs	r2, #32
 800208e:	705a      	strb	r2, [r3, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 8002090:	250f      	movs	r5, #15
 8002092:	197c      	adds	r4, r7, r5
 8002094:	003a      	movs	r2, r7
 8002096:	4844      	ldr	r0, [pc, #272]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 8002098:	2301      	movs	r3, #1
 800209a:	425b      	negs	r3, r3
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	213e      	movs	r1, #62	; 0x3e
 80020a2:	f001 fab9 	bl	8003618 <HAL_I2C_Master_Transmit>
 80020a6:	0003      	movs	r3, r0
 80020a8:	7023      	strb	r3, [r4, #0]

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_M_CTRL_REG2, 1, buf, 1, 1000);
 80020aa:	197c      	adds	r4, r7, r5
 80020ac:	483e      	ldr	r0, [pc, #248]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 80020ae:	23fa      	movs	r3, #250	; 0xfa
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2301      	movs	r3, #1
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	003b      	movs	r3, r7
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	225c      	movs	r2, #92	; 0x5c
 80020c0:	213e      	movs	r1, #62	; 0x3e
 80020c2:	f001 fcb9 	bl	8003a38 <HAL_I2C_Mem_Read>
 80020c6:	0003      	movs	r3, r0
 80020c8:	7023      	strb	r3, [r4, #0]

			if (ret != HAL_OK || buf[0] != 0b00100000){
 80020ca:	197b      	adds	r3, r7, r5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <InitialisiereFXOS8700CQ+0xea>
 80020d2:	003b      	movs	r3, r7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d009      	beq.n	80020ee <InitialisiereFXOS8700CQ+0xfe>
				//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die M_CTRL-REG2-Werte richtig sind
				strcpy((char*)buf, "INIT ERROR");
 80020da:	003b      	movs	r3, r7
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <InitialisiereFXOS8700CQ+0x1bc>)
 80020de:	ca03      	ldmia	r2!, {r0, r1}
 80020e0:	c303      	stmia	r3!, {r0, r1}
 80020e2:	8811      	ldrh	r1, [r2, #0]
 80020e4:	8019      	strh	r1, [r3, #0]
 80020e6:	7892      	ldrb	r2, [r2, #2]
 80020e8:	709a      	strb	r2, [r3, #2]
				return false;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e058      	b.n	80021a0 <InitialisiereFXOS8700CQ+0x1b0>
			}
	//aktiviere Sensor und konfiguriere Control Register 1
		//Bit 7-6: auto-wake sample frequency; irrelevant (wähle 10)	Bit 5-3: Output data rate selection; wähle 101 für 12,5Hz mag only mode
		//bzw. 6,25 Hz hybrid mode	Bit 2: Inoise; wähle 1 für Reduced Noise mode	Bit 1: Fast Read Mode; wähle 0 für Normal Mode	Bit 0: wähle 1
		//um Sensor aus Standby zu holen und zu aktivieren
	buf[0] = FXOS8700CQ_CTRL_REG1;
 80020ee:	003b      	movs	r3, r7
 80020f0:	222a      	movs	r2, #42	; 0x2a
 80020f2:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b10101101;
 80020f4:	003b      	movs	r3, r7
 80020f6:	22ad      	movs	r2, #173	; 0xad
 80020f8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80020fa:	250f      	movs	r5, #15
 80020fc:	197c      	adds	r4, r7, r5
 80020fe:	003a      	movs	r2, r7
 8002100:	4829      	ldr	r0, [pc, #164]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 8002102:	2301      	movs	r3, #1
 8002104:	425b      	negs	r3, r3
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2302      	movs	r3, #2
 800210a:	213e      	movs	r1, #62	; 0x3e
 800210c:	f001 fa84 	bl	8003618 <HAL_I2C_Master_Transmit>
 8002110:	0003      	movs	r3, r0
 8002112:	7023      	strb	r3, [r4, #0]
		//prüfe, ob CTRL_REG1 richtig konfiguriert wurde
	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_CTRL_REG1, 1, buf, 1, 1000);
 8002114:	197c      	adds	r4, r7, r5
 8002116:	4824      	ldr	r0, [pc, #144]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 8002118:	23fa      	movs	r3, #250	; 0xfa
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	2301      	movs	r3, #1
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	003b      	movs	r3, r7
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2301      	movs	r3, #1
 8002128:	222a      	movs	r2, #42	; 0x2a
 800212a:	213e      	movs	r1, #62	; 0x3e
 800212c:	f001 fc84 	bl	8003a38 <HAL_I2C_Mem_Read>
 8002130:	0003      	movs	r3, r0
 8002132:	7023      	strb	r3, [r4, #0]

		if (ret != HAL_OK || buf[0] != 0b10101101){
 8002134:	197b      	adds	r3, r7, r5
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <InitialisiereFXOS8700CQ+0x154>
 800213c:	003b      	movs	r3, r7
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2bad      	cmp	r3, #173	; 0xad
 8002142:	d009      	beq.n	8002158 <InitialisiereFXOS8700CQ+0x168>
			//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die CTRL-REG1-Werte richtig sind
			strcpy((char*)buf, "INIT ERROR");
 8002144:	003b      	movs	r3, r7
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <InitialisiereFXOS8700CQ+0x1bc>)
 8002148:	ca03      	ldmia	r2!, {r0, r1}
 800214a:	c303      	stmia	r3!, {r0, r1}
 800214c:	8811      	ldrh	r1, [r2, #0]
 800214e:	8019      	strh	r1, [r3, #0]
 8002150:	7892      	ldrb	r2, [r2, #2]
 8002152:	709a      	strb	r2, [r3, #2]
			return false;
 8002154:	2300      	movs	r3, #0
 8002156:	e023      	b.n	80021a0 <InitialisiereFXOS8700CQ+0x1b0>
		}


	//checke den Device Identifier

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_WHOAMI, 1, buf, 1, 1000);
 8002158:	250f      	movs	r5, #15
 800215a:	197c      	adds	r4, r7, r5
 800215c:	4812      	ldr	r0, [pc, #72]	; (80021a8 <InitialisiereFXOS8700CQ+0x1b8>)
 800215e:	23fa      	movs	r3, #250	; 0xfa
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2301      	movs	r3, #1
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	003b      	movs	r3, r7
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	220d      	movs	r2, #13
 8002170:	213e      	movs	r1, #62	; 0x3e
 8002172:	f001 fc61 	bl	8003a38 <HAL_I2C_Mem_Read>
 8002176:	0003      	movs	r3, r0
 8002178:	7023      	strb	r3, [r4, #0]

		if ( ret != HAL_OK || buf[0] != FXOS8700CQ_WHOAMI_VAL) {
 800217a:	197b      	adds	r3, r7, r5
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <InitialisiereFXOS8700CQ+0x19a>
 8002182:	003b      	movs	r3, r7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2bc7      	cmp	r3, #199	; 0xc7
 8002188:	d009      	beq.n	800219e <InitialisiereFXOS8700CQ+0x1ae>
			//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die Device-ID richtig ist
			strcpy((char*)buf, "INIT ERROR");
 800218a:	003b      	movs	r3, r7
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <InitialisiereFXOS8700CQ+0x1bc>)
 800218e:	ca03      	ldmia	r2!, {r0, r1}
 8002190:	c303      	stmia	r3!, {r0, r1}
 8002192:	8811      	ldrh	r1, [r2, #0]
 8002194:	8019      	strh	r1, [r3, #0]
 8002196:	7892      	ldrb	r2, [r2, #2]
 8002198:	709a      	strb	r2, [r3, #2]
			return false;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <InitialisiereFXOS8700CQ+0x1b0>
	}
return true;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	2000002c 	.word	0x2000002c
 80021ac:	08006260 	.word	0x08006260

080021b0 <FXOS8700CQWerteAuslesen>:




void FXOS8700CQWerteAuslesen (int16_t *x_axis_Mag, int16_t *y_axis_Mag, int16_t *z_axis_Mag, int16_t *x_axis_Acc, int16_t *y_axis_Acc, int16_t *z_axis_Acc){
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]


	uint8_t buf[15]; /*ein Buffer-Array*/
	buf[0] = FXOS8700CQ_STATUS;
 80021be:	2510      	movs	r5, #16
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;


	  //I2C Burst Read. Startet mit dem Status Register. Autoinkrement zu 0x06, dann zu 0x33 (siehe Konfiguration M_CTRL_REG2)

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80021c6:	261f      	movs	r6, #31
 80021c8:	19bc      	adds	r4, r7, r6
 80021ca:	197a      	adds	r2, r7, r5
 80021cc:	4841      	ldr	r0, [pc, #260]	; (80022d4 <FXOS8700CQWerteAuslesen+0x124>)
 80021ce:	2301      	movs	r3, #1
 80021d0:	425b      	negs	r3, r3
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	213e      	movs	r1, #62	; 0x3e
 80021d8:	f001 fa1e 	bl	8003618 <HAL_I2C_Master_Transmit>
 80021dc:	0003      	movs	r3, r0
 80021de:	7023      	strb	r3, [r4, #0]

	  if ( ret == HAL_OK ) {
 80021e0:	19bb      	adds	r3, r7, r6
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d16c      	bne.n	80022c2 <FXOS8700CQWerteAuslesen+0x112>
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 13, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 80021e8:	19bc      	adds	r4, r7, r6
 80021ea:	197a      	adds	r2, r7, r5
 80021ec:	4839      	ldr	r0, [pc, #228]	; (80022d4 <FXOS8700CQWerteAuslesen+0x124>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	425b      	negs	r3, r3
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	230d      	movs	r3, #13
 80021f6:	213e      	movs	r1, #62	; 0x3e
 80021f8:	f001 fb16 	bl	8003828 <HAL_I2C_Master_Receive>
 80021fc:	0003      	movs	r3, r0
 80021fe:	7023      	strb	r3, [r4, #0]
		if ( ret == HAL_OK ) {
 8002200:	19bb      	adds	r3, r7, r6
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d152      	bne.n	80022ae <FXOS8700CQWerteAuslesen+0xfe>
			*x_axis_Acc = 0;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	801a      	strh	r2, [r3, #0]
			*x_axis_Acc = (((buf[1] << 8) | buf[2])) >> 2; // buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft
 800220e:	197b      	adds	r3, r7, r5
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	197a      	adds	r2, r7, r5
 8002216:	7892      	ldrb	r2, [r2, #2]
 8002218:	4313      	orrs	r3, r2
 800221a:	109b      	asrs	r3, r3, #2
 800221c:	b21a      	sxth	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	801a      	strh	r2, [r3, #0]
			*y_axis_Acc = 0;
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	2200      	movs	r2, #0
 8002226:	801a      	strh	r2, [r3, #0]
			*y_axis_Acc = (((buf[3] << 8) | buf[4])) >> 2; //Accel-Data ist 14bit, deshalb anschleißend BitShift um 2
 8002228:	0029      	movs	r1, r5
 800222a:	187b      	adds	r3, r7, r1
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	187a      	adds	r2, r7, r1
 8002232:	7912      	ldrb	r2, [r2, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	109b      	asrs	r3, r3, #2
 8002238:	b21a      	sxth	r2, r3
 800223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223c:	801a      	strh	r2, [r3, #0]
			*z_axis_Acc = 0;
 800223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002240:	2200      	movs	r2, #0
 8002242:	801a      	strh	r2, [r3, #0]
			*z_axis_Acc = (((buf[5] << 8) | buf[6])) >> 2;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	795b      	ldrb	r3, [r3, #5]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	187a      	adds	r2, r7, r1
 800224c:	7992      	ldrb	r2, [r2, #6]
 800224e:	4313      	orrs	r3, r2
 8002250:	109b      	asrs	r3, r3, #2
 8002252:	b21a      	sxth	r2, r3
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	801a      	strh	r2, [r3, #0]
			*x_axis_Mag = 0;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]
			*x_axis_Mag = (buf[7] << 8) | buf[8]; // buf[7] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft
 800225e:	187b      	adds	r3, r7, r1
 8002260:	79db      	ldrb	r3, [r3, #7]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	b21a      	sxth	r2, r3
 8002266:	187b      	adds	r3, r7, r1
 8002268:	7a1b      	ldrb	r3, [r3, #8]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21a      	sxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = 0;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = (buf[9] << 8) | buf[10];
 800227a:	187b      	adds	r3, r7, r1
 800227c:	7a5b      	ldrb	r3, [r3, #9]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	b21a      	sxth	r2, r3
 8002282:	187b      	adds	r3, r7, r1
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	b21b      	sxth	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	b21a      	sxth	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = (buf[11] << 8) | buf[12];
 8002296:	187b      	adds	r3, r7, r1
 8002298:	7adb      	ldrb	r3, [r3, #11]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	b21a      	sxth	r2, r3
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	7b1b      	ldrb	r3, [r3, #12]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 80022ac:	e00e      	b.n	80022cc <FXOS8700CQWerteAuslesen+0x11c>
			strcpy((char*)buf, "Error Read");
 80022ae:	2310      	movs	r3, #16
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <FXOS8700CQWerteAuslesen+0x128>)
 80022b4:	ca03      	ldmia	r2!, {r0, r1}
 80022b6:	c303      	stmia	r3!, {r0, r1}
 80022b8:	8811      	ldrh	r1, [r2, #0]
 80022ba:	8019      	strh	r1, [r3, #0]
 80022bc:	7892      	ldrb	r2, [r2, #2]
 80022be:	709a      	strb	r2, [r3, #2]
}
 80022c0:	e004      	b.n	80022cc <FXOS8700CQWerteAuslesen+0x11c>
		  strcpy((char*)buf, "Error Write");
 80022c2:	2310      	movs	r3, #16
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <FXOS8700CQWerteAuslesen+0x12c>)
 80022c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ca:	c313      	stmia	r3!, {r0, r1, r4}
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b009      	add	sp, #36	; 0x24
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	2000002c 	.word	0x2000002c
 80022d8:	0800626c 	.word	0x0800626c
 80022dc:	08006278 	.word	0x08006278

080022e0 <InitialisiereGyro>:
#include <string.h>
#include <gyro.h>
#include <stdbool.h>


bool InitialisiereGyro(){
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[15];
	buf[0] = CTRL_REG1;
 80022e6:	003b      	movs	r3, r7
 80022e8:	2213      	movs	r2, #19
 80022ea:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000;
 80022ec:	003b      	movs	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]

	//konfiguriere Control Register 1
		//versetze Sensor in Standby, um Control Register 1 ändern zu können ohne die Genauigkeit der Output Daten zu gefähreden -> Data Sheet S.45
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 80022f2:	250f      	movs	r5, #15
 80022f4:	197c      	adds	r4, r7, r5
 80022f6:	003a      	movs	r2, r7
 80022f8:	482b      	ldr	r0, [pc, #172]	; (80023a8 <InitialisiereGyro+0xc8>)
 80022fa:	2301      	movs	r3, #1
 80022fc:	425b      	negs	r3, r3
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2302      	movs	r3, #2
 8002302:	2142      	movs	r1, #66	; 0x42
 8002304:	f001 f988 	bl	8003618 <HAL_I2C_Master_Transmit>
 8002308:	0003      	movs	r3, r0
 800230a:	7023      	strb	r3, [r4, #0]

		//konfiguriere Wert, der in CTRL_REG1 geschrieben werden soll
	buf[1] = 0b00001111; //Bit7: Unused		Bit6: Reset 0/1		Bit5: SelfTest 0/1		Bit4-2: Output Data Rate 011 für 100 Hz gewählt		Bit 1-0: Active Mode gewählt mit 11
 800230c:	003b      	movs	r3, r7
 800230e:	220f      	movs	r2, #15
 8002310:	705a      	strb	r2, [r3, #1]


	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 8002312:	197c      	adds	r4, r7, r5
 8002314:	003a      	movs	r2, r7
 8002316:	4824      	ldr	r0, [pc, #144]	; (80023a8 <InitialisiereGyro+0xc8>)
 8002318:	2301      	movs	r3, #1
 800231a:	425b      	negs	r3, r3
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2302      	movs	r3, #2
 8002320:	2142      	movs	r1, #66	; 0x42
 8002322:	f001 f979 	bl	8003618 <HAL_I2C_Master_Transmit>
 8002326:	0003      	movs	r3, r0
 8002328:	7023      	strb	r3, [r4, #0]


	//überprüfe, ob Control Register 1 richtig konfiguriert wurde

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Gyro, CTRL_REG1, 1, buf, 1, 1000);
 800232a:	197c      	adds	r4, r7, r5
 800232c:	481e      	ldr	r0, [pc, #120]	; (80023a8 <InitialisiereGyro+0xc8>)
 800232e:	23fa      	movs	r3, #250	; 0xfa
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	2301      	movs	r3, #1
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	003b      	movs	r3, r7
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	2213      	movs	r2, #19
 8002340:	2142      	movs	r1, #66	; 0x42
 8002342:	f001 fb79 	bl	8003a38 <HAL_I2C_Mem_Read>
 8002346:	0003      	movs	r3, r0
 8002348:	7023      	strb	r3, [r4, #0]
	//Kopiere Inhalt von buf[0] in buf[1]

	buf[1] = buf [0];
 800234a:	003b      	movs	r3, r7
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	003b      	movs	r3, r7
 8002350:	705a      	strb	r2, [r3, #1]

	//lese Device Identifier

 	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Gyro, WHO_AM_I_Gyro_Reg, 1, buf, 1, 1000);
 8002352:	197c      	adds	r4, r7, r5
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <InitialisiereGyro+0xc8>)
 8002356:	23fa      	movs	r3, #250	; 0xfa
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	003b      	movs	r3, r7
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	220c      	movs	r2, #12
 8002368:	2142      	movs	r1, #66	; 0x42
 800236a:	f001 fb65 	bl	8003a38 <HAL_I2C_Mem_Read>
 800236e:	0003      	movs	r3, r0
 8002370:	7023      	strb	r3, [r4, #0]



		if ( ret == HAL_OK && buf[0] == GyroDeviceID && buf[1] == 0b00001111) {
 8002372:	197b      	adds	r3, r7, r5
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <InitialisiereGyro+0xae>
 800237a:	003b      	movs	r3, r7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2bd7      	cmp	r3, #215	; 0xd7
 8002380:	d105      	bne.n	800238e <InitialisiereGyro+0xae>
 8002382:	003b      	movs	r3, r7
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d101      	bne.n	800238e <InitialisiereGyro+0xae>
			//kein Hal-Fehler, GyroDeviceID ist korrekt, CTRL-Reg 1 hat richtige Werte
			return true;
 800238a:	2301      	movs	r3, #1
 800238c:	e008      	b.n	80023a0 <InitialisiereGyro+0xc0>

		}else{
			strcpy((char*)buf, "INIT ERROR");
 800238e:	003b      	movs	r3, r7
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <InitialisiereGyro+0xcc>)
 8002392:	ca03      	ldmia	r2!, {r0, r1}
 8002394:	c303      	stmia	r3!, {r0, r1}
 8002396:	8811      	ldrh	r1, [r2, #0]
 8002398:	8019      	strh	r1, [r3, #0]
 800239a:	7892      	ldrb	r2, [r2, #2]
 800239c:	709a      	strb	r2, [r3, #2]
			return false;
 800239e:	2300      	movs	r3, #0
		}

}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}
 80023a8:	2000002c 	.word	0x2000002c
 80023ac:	08006284 	.word	0x08006284

080023b0 <gyroWerteAuslesen>:



void gyroWerteAuslesen (int16_t *x_axis, int16_t *y_axis, int16_t *z_axis){
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b08b      	sub	sp, #44	; 0x2c
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;



	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = Gyro_Status_REG;
 80023bc:	2510      	movs	r5, #16
 80023be:	197b      	adds	r3, r7, r5
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]



	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80023c4:	261f      	movs	r6, #31
 80023c6:	19bc      	adds	r4, r7, r6
 80023c8:	197a      	adds	r2, r7, r5
 80023ca:	482e      	ldr	r0, [pc, #184]	; (8002484 <gyroWerteAuslesen+0xd4>)
 80023cc:	2301      	movs	r3, #1
 80023ce:	425b      	negs	r3, r3
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	2142      	movs	r1, #66	; 0x42
 80023d6:	f001 f91f 	bl	8003618 <HAL_I2C_Master_Transmit>
 80023da:	0003      	movs	r3, r0
 80023dc:	7023      	strb	r3, [r4, #0]

	  if ( ret == HAL_OK ) {
 80023de:	19bb      	adds	r3, r7, r6
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d145      	bne.n	8002472 <gyroWerteAuslesen+0xc2>
		  //Burst-Read
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 80023e6:	19bc      	adds	r4, r7, r6
 80023e8:	197a      	adds	r2, r7, r5
 80023ea:	4826      	ldr	r0, [pc, #152]	; (8002484 <gyroWerteAuslesen+0xd4>)
 80023ec:	2301      	movs	r3, #1
 80023ee:	425b      	negs	r3, r3
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2307      	movs	r3, #7
 80023f4:	2142      	movs	r1, #66	; 0x42
 80023f6:	f001 fa17 	bl	8003828 <HAL_I2C_Master_Receive>
 80023fa:	0003      	movs	r3, r0
 80023fc:	7023      	strb	r3, [r4, #0]

		if ( ret == HAL_OK ) {
 80023fe:	19bb      	adds	r3, r7, r6
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12b      	bne.n	800245e <gyroWerteAuslesen+0xae>
			*x_axis = 0;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
			*x_axis = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 800240c:	197b      	adds	r3, r7, r5
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	197b      	adds	r3, r7, r5
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	801a      	strh	r2, [r3, #0]
			*y_axis = 0;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]
			*y_axis = (buf[3] << 8) | buf[4];
 8002428:	197b      	adds	r3, r7, r5
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21a      	sxth	r2, r3
 8002430:	0029      	movs	r1, r5
 8002432:	197b      	adds	r3, r7, r5
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	b21b      	sxth	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b21a      	sxth	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	801a      	strh	r2, [r3, #0]
			*z_axis = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
			*z_axis = (buf[5] << 8) | buf[6];
 8002446:	187b      	adds	r3, r7, r1
 8002448:	795b      	ldrb	r3, [r3, #5]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	187b      	adds	r3, r7, r1
 8002450:	799b      	ldrb	r3, [r3, #6]
 8002452:	b21b      	sxth	r3, r3
 8002454:	4313      	orrs	r3, r2
 8002456:	b21a      	sxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 800245c:	e00e      	b.n	800247c <gyroWerteAuslesen+0xcc>
			strcpy((char*)buf, "Error Read");
 800245e:	2310      	movs	r3, #16
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <gyroWerteAuslesen+0xd8>)
 8002464:	ca03      	ldmia	r2!, {r0, r1}
 8002466:	c303      	stmia	r3!, {r0, r1}
 8002468:	8811      	ldrh	r1, [r2, #0]
 800246a:	8019      	strh	r1, [r3, #0]
 800246c:	7892      	ldrb	r2, [r2, #2]
 800246e:	709a      	strb	r2, [r3, #2]
}
 8002470:	e004      	b.n	800247c <gyroWerteAuslesen+0xcc>
		  strcpy((char*)buf, "Error Write");
 8002472:	2310      	movs	r3, #16
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <gyroWerteAuslesen+0xdc>)
 8002478:	ca13      	ldmia	r2!, {r0, r1, r4}
 800247a:	c313      	stmia	r3!, {r0, r1, r4}
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b009      	add	sp, #36	; 0x24
 8002482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002484:	2000002c 	.word	0x2000002c
 8002488:	08006290 	.word	0x08006290
 800248c:	0800629c 	.word	0x0800629c

08002490 <BerechneAusrichtung.0>:

  }

  //Funktion, umd die Ausrichtung des Sensors zu bestimmen

  double BerechneAusrichtung(int16_t *x_axis_Mag, int16_t *y_axis_Mag, double *TaraHeading){
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	4663      	mov	r3, ip
 800249e:	603b      	str	r3, [r7, #0]
	  //int32_t skalarprod = (*x_Tara_Mag) * (*x_axis_Mag) + (*y_Tara_Mag) * (*y_axis_Mag) + (*z_Tara_Mag) * (*z_axis_Mag);
	  //double BetragTaraVec = sqrt((*x_Tara_Mag) * (*x_Tara_Mag) + (*y_Tara_Mag) * (*y_Tara_Mag) + (*z_Tara_Mag) * (*z_Tara_Mag));
	  //double BetragMagVec = sqrt((*x_axis_Mag) * (*x_axis_Mag) + (*y_axis_Mag) * (*y_axis_Mag) + (*z_axis_Mag) * (*z_axis_Mag));
	   //Winkel zwischen TaraVec und MagVec
	  //Abweichung = acos(skalarprod/(BetragTaraVec*BetragMagVec))*(180/M_PI);
	  double Azimuth = 90 - atan2((double)*y_axis_Mag, (double)*x_axis_Mag) * 180 / M_PI;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	5e9b      	ldrsh	r3, [r3, r2]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff fd54 	bl	8001f54 <__aeabi_i2d>
 80024ac:	0004      	movs	r4, r0
 80024ae:	000d      	movs	r5, r1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	5e9b      	ldrsh	r3, [r3, r2]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff fd4c 	bl	8001f54 <__aeabi_i2d>
 80024bc:	0002      	movs	r2, r0
 80024be:	000b      	movs	r3, r1
 80024c0:	0020      	movs	r0, r4
 80024c2:	0029      	movs	r1, r5
 80024c4:	f003 fc8c 	bl	8005de0 <atan2>
 80024c8:	2200      	movs	r2, #0
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <BerechneAusrichtung.0+0xb4>)
 80024cc:	f7fe ff0e 	bl	80012ec <__aeabi_dmul>
 80024d0:	0002      	movs	r2, r0
 80024d2:	000b      	movs	r3, r1
 80024d4:	0010      	movs	r0, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <BerechneAusrichtung.0+0xb8>)
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <BerechneAusrichtung.0+0xbc>)
 80024dc:	f7fe fb04 	bl	8000ae8 <__aeabi_ddiv>
 80024e0:	0002      	movs	r2, r0
 80024e2:	000b      	movs	r3, r1
 80024e4:	2000      	movs	r0, #0
 80024e6:	491a      	ldr	r1, [pc, #104]	; (8002550 <BerechneAusrichtung.0+0xc0>)
 80024e8:	f7ff f96c 	bl	80017c4 <__aeabi_dsub>
 80024ec:	0002      	movs	r2, r0
 80024ee:	000b      	movs	r3, r1
 80024f0:	623a      	str	r2, [r7, #32]
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
	  //Berechne Abweichung von per blauem Knopf gewählten Nullpunt.
	  //TaraHeading ist mit 0 initialisiert, d.h. vor dem ersten Drücken des blauen Knopfes ist Abweichung = Azimuth
	  double Abweichung = Azimuth - *TaraHeading;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	6a38      	ldr	r0, [r7, #32]
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	f7ff f961 	bl	80017c4 <__aeabi_dsub>
 8002502:	0002      	movs	r2, r0
 8002504:	000b      	movs	r3, r1
 8002506:	61ba      	str	r2, [r7, #24]
 8002508:	61fb      	str	r3, [r7, #28]
	  //konvertiert in int für abs-Funktion
	  int16_t Abweichung_milliGrad = (int16_t)(Abweichung * 1000);
 800250a:	2200      	movs	r2, #0
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <BerechneAusrichtung.0+0xc4>)
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	69f9      	ldr	r1, [r7, #28]
 8002512:	f7fe feeb 	bl	80012ec <__aeabi_dmul>
 8002516:	0002      	movs	r2, r0
 8002518:	000b      	movs	r3, r1
 800251a:	2516      	movs	r5, #22
 800251c:	197c      	adds	r4, r7, r5
 800251e:	0010      	movs	r0, r2
 8002520:	0019      	movs	r1, r3
 8002522:	f7ff fce1 	bl	8001ee8 <__aeabi_d2iz>
 8002526:	0003      	movs	r3, r0
 8002528:	8023      	strh	r3, [r4, #0]
	  return Abweichung_milliGrad;
 800252a:	197b      	adds	r3, r7, r5
 800252c:	2200      	movs	r2, #0
 800252e:	5e9b      	ldrsh	r3, [r3, r2]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fd0f 	bl	8001f54 <__aeabi_i2d>
 8002536:	0002      	movs	r2, r0
 8002538:	000b      	movs	r3, r1
  }
 800253a:	0010      	movs	r0, r2
 800253c:	0019      	movs	r1, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b00a      	add	sp, #40	; 0x28
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	40668000 	.word	0x40668000
 8002548:	54442d18 	.word	0x54442d18
 800254c:	400921fb 	.word	0x400921fb
 8002550:	40568000 	.word	0x40568000
 8002554:	408f4000 	.word	0x408f4000

08002558 <main>:
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b08f      	sub	sp, #60	; 0x3c
 800255c:	af02      	add	r7, sp, #8
int main(void)
 800255e:	2340      	movs	r3, #64	; 0x40
 8002560:	2208      	movs	r2, #8
 8002562:	189b      	adds	r3, r3, r2
 8002564:	19db      	adds	r3, r3, r7
 8002566:	61fb      	str	r3, [r7, #28]
	double TaraHeading = 0;
 8002568:	2200      	movs	r2, #0
 800256a:	2300      	movs	r3, #0
 800256c:	603a      	str	r2, [r7, #0]
 800256e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8002570:	f000 fcca 	bl	8002f08 <HAL_Init>
  SystemClock_Config();
 8002574:	f000 f98a 	bl	800288c <SystemClock_Config>
  MX_GPIO_Init();
 8002578:	f000 fadc 	bl	8002b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 800257c:	f000 f9e8 	bl	8002950 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002580:	f000 fa26 	bl	80029d0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8002584:	f000 faae 	bl	8002ae4 <MX_TIM16_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002588:	4bb4      	ldr	r3, [pc, #720]	; (800285c <main+0x304>)
 800258a:	2108      	movs	r1, #8
 800258c:	0018      	movs	r0, r3
 800258e:	f002 fccb 	bl	8004f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002592:	4bb2      	ldr	r3, [pc, #712]	; (800285c <main+0x304>)
 8002594:	210c      	movs	r1, #12
 8002596:	0018      	movs	r0, r3
 8002598:	f002 fcc6 	bl	8004f28 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800259c:	4baf      	ldr	r3, [pc, #700]	; (800285c <main+0x304>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80025a4:	4bad      	ldr	r3, [pc, #692]	; (800285c <main+0x304>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
  Gyro_Init_Check = InitialisiereGyro();
 80025ac:	252d      	movs	r5, #45	; 0x2d
 80025ae:	197c      	adds	r4, r7, r5
 80025b0:	f7ff fe96 	bl	80022e0 <InitialisiereGyro>
 80025b4:	0003      	movs	r3, r0
 80025b6:	7023      	strb	r3, [r4, #0]
  FXOS8700CQ_Init_Check = InitialisiereFXOS8700CQ();
 80025b8:	232c      	movs	r3, #44	; 0x2c
 80025ba:	18fc      	adds	r4, r7, r3
 80025bc:	f7ff fd18 	bl	8001ff0 <InitialisiereFXOS8700CQ>
 80025c0:	0003      	movs	r3, r0
 80025c2:	7023      	strb	r3, [r4, #0]
  if (Gyro_Init_Check == true){
 80025c4:	197b      	adds	r3, r7, r5
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01d      	beq.n	8002608 <main+0xb0>
	  for (x = 0; x < 3; ++x){
 80025cc:	232f      	movs	r3, #47	; 0x2f
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e013      	b.n	80025fe <main+0xa6>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,511);
 80025d6:	4ba1      	ldr	r3, [pc, #644]	; (800285c <main+0x304>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4aa1      	ldr	r2, [pc, #644]	; (8002860 <main+0x308>)
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(100);
 80025de:	2064      	movs	r0, #100	; 0x64
 80025e0:	f000 fcf6 	bl	8002fd0 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80025e4:	4b9d      	ldr	r3, [pc, #628]	; (800285c <main+0x304>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(100);
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f000 fcef 	bl	8002fd0 <HAL_Delay>
	  for (x = 0; x < 3; ++x){
 80025f2:	222f      	movs	r2, #47	; 0x2f
 80025f4:	18bb      	adds	r3, r7, r2
 80025f6:	18ba      	adds	r2, r7, r2
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	3201      	adds	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	232f      	movs	r3, #47	; 0x2f
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d9e6      	bls.n	80025d6 <main+0x7e>
  if (FXOS8700CQ_Init_Check == true){
 8002608:	232c      	movs	r3, #44	; 0x2c
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01d      	beq.n	800264e <main+0xf6>
	  for (x = 0; x < 3; ++x){
 8002612:	232e      	movs	r3, #46	; 0x2e
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e013      	b.n	8002644 <main+0xec>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,511);
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <main+0x304>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a8f      	ldr	r2, [pc, #572]	; (8002860 <main+0x308>)
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(100);
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f000 fcd3 	bl	8002fd0 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800262a:	4b8c      	ldr	r3, [pc, #560]	; (800285c <main+0x304>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(100);
 8002632:	2064      	movs	r0, #100	; 0x64
 8002634:	f000 fccc 	bl	8002fd0 <HAL_Delay>
	  for (x = 0; x < 3; ++x){
 8002638:	222e      	movs	r2, #46	; 0x2e
 800263a:	18bb      	adds	r3, r7, r2
 800263c:	18ba      	adds	r2, r7, r2
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	3201      	adds	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	232e      	movs	r3, #46	; 0x2e
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d9e6      	bls.n	800261c <main+0xc4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
	  //Lese Sensorwerte aus
	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 800264e:	2316      	movs	r3, #22
 8002650:	18fa      	adds	r2, r7, r3
 8002652:	2318      	movs	r3, #24
 8002654:	18f9      	adds	r1, r7, r3
 8002656:	231a      	movs	r3, #26
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fea8 	bl	80023b0 <gyroWerteAuslesen>

 	  FXOS8700CQWerteAuslesen(&x_axis_Mag, &y_axis_Mag, &z_axis_Mag, &x_axis_Acc, &y_axis_Acc, &z_axis_Acc);
 8002660:	2314      	movs	r3, #20
 8002662:	18fc      	adds	r4, r7, r3
 8002664:	230a      	movs	r3, #10
 8002666:	18fa      	adds	r2, r7, r3
 8002668:	250c      	movs	r5, #12
 800266a:	1979      	adds	r1, r7, r5
 800266c:	260e      	movs	r6, #14
 800266e:	19b8      	adds	r0, r7, r6
 8002670:	2310      	movs	r3, #16
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2312      	movs	r3, #18
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0023      	movs	r3, r4
 800267e:	f7ff fd97 	bl	80021b0 <FXOS8700CQWerteAuslesen>


	  //Prüfe, ob blauer Knopf gedrückt wurde
	  if (Tara == true){
 8002682:	4b78      	ldr	r3, [pc, #480]	; (8002864 <main+0x30c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d02c      	beq.n	80026e6 <main+0x18e>
		  //speichere aktuelle Abweichung von Norden
		  TaraHeading = 90 - atan2 ((double)y_axis_Mag, (double)x_axis_Mag) * 180 / M_PI;
 800268c:	197b      	adds	r3, r7, r5
 800268e:	2200      	movs	r2, #0
 8002690:	5e9b      	ldrsh	r3, [r3, r2]
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff fc5e 	bl	8001f54 <__aeabi_i2d>
 8002698:	0004      	movs	r4, r0
 800269a:	000d      	movs	r5, r1
 800269c:	19bb      	adds	r3, r7, r6
 800269e:	2200      	movs	r2, #0
 80026a0:	5e9b      	ldrsh	r3, [r3, r2]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fc56 	bl	8001f54 <__aeabi_i2d>
 80026a8:	0002      	movs	r2, r0
 80026aa:	000b      	movs	r3, r1
 80026ac:	0020      	movs	r0, r4
 80026ae:	0029      	movs	r1, r5
 80026b0:	f003 fb96 	bl	8005de0 <atan2>
 80026b4:	2200      	movs	r2, #0
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <main+0x310>)
 80026b8:	f7fe fe18 	bl	80012ec <__aeabi_dmul>
 80026bc:	0002      	movs	r2, r0
 80026be:	000b      	movs	r3, r1
 80026c0:	0010      	movs	r0, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	4a69      	ldr	r2, [pc, #420]	; (800286c <main+0x314>)
 80026c6:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <main+0x318>)
 80026c8:	f7fe fa0e 	bl	8000ae8 <__aeabi_ddiv>
 80026cc:	0002      	movs	r2, r0
 80026ce:	000b      	movs	r3, r1
 80026d0:	2000      	movs	r0, #0
 80026d2:	4968      	ldr	r1, [pc, #416]	; (8002874 <main+0x31c>)
 80026d4:	f7ff f876 	bl	80017c4 <__aeabi_dsub>
 80026d8:	0002      	movs	r2, r0
 80026da:	000b      	movs	r3, r1
 80026dc:	603a      	str	r2, [r7, #0]
 80026de:	607b      	str	r3, [r7, #4]
		  Tara = false;
 80026e0:	4b60      	ldr	r3, [pc, #384]	; (8002864 <main+0x30c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
	  }
	  Abweichung_milliGrad = BerechneAusrichtung(&x_axis_Mag, &y_axis_Mag, &TaraHeading);
 80026e6:	003a      	movs	r2, r7
 80026e8:	230c      	movs	r3, #12
 80026ea:	18f9      	adds	r1, r7, r3
 80026ec:	230e      	movs	r3, #14
 80026ee:	18f8      	adds	r0, r7, r3
 80026f0:	231c      	movs	r3, #28
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	469c      	mov	ip, r3
 80026f6:	f7ff fecb 	bl	8002490 <BerechneAusrichtung.0>
 80026fa:	0002      	movs	r2, r0
 80026fc:	000b      	movs	r3, r1
 80026fe:	252a      	movs	r5, #42	; 0x2a
 8002700:	197c      	adds	r4, r7, r5
 8002702:	0010      	movs	r0, r2
 8002704:	0019      	movs	r1, r3
 8002706:	f7ff fbef 	bl	8001ee8 <__aeabi_d2iz>
 800270a:	0003      	movs	r3, r0
 800270c:	8023      	strh	r3, [r4, #0]

//Hier der Code, wenn die LEDs blinken sollen weil die Abweichung kleiner als 5° ist.

	  if (abs(Abweichung_milliGrad) <= 5000){
 800270e:	197b      	adds	r3, r7, r5
 8002710:	2200      	movs	r2, #0
 8002712:	5e9b      	ldrsh	r3, [r3, r2]
 8002714:	17da      	asrs	r2, r3, #31
 8002716:	189b      	adds	r3, r3, r2
 8002718:	4053      	eors	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <main+0x320>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d82f      	bhi.n	8002782 <main+0x22a>


		  HAL_TIM_Base_Start_IT(&htim16);//starte den Timer, der für das Blinken der LEDs da ist, in Interrupt-Modus
 8002722:	4b56      	ldr	r3, [pc, #344]	; (800287c <main+0x324>)
 8002724:	0018      	movs	r0, r3
 8002726:	f002 fb27 	bl	8004d78 <HAL_TIM_Base_Start_IT>

		  if (z_axis >= 0){
 800272a:	2316      	movs	r3, #22
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	5e9b      	ldrsh	r3, [r3, r2]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db12      	blt.n	800275c <main+0x204>
			  // z-Achse wird GEGEN Uhrzeigersinn gedreht -> grüne LED muss blinken, blaue LED aus
			  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0); //blau aus
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <main+0x304>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
			  if (LEDistAN == true){
 800273e:	4b50      	ldr	r3, [pc, #320]	; (8002880 <main+0x328>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <main+0x1fa>
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,511); //grün an
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <main+0x304>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a44      	ldr	r2, [pc, #272]	; (8002860 <main+0x308>)
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
 8002750:	e01b      	b.n	800278a <main+0x232>
			  }else{
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0); //grün aus
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <main+0x304>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
 800275a:	e016      	b.n	800278a <main+0x232>
			  }
		  }else{
			  	  // z-Achse wird IM Uhrzeigersinn gedreht -> blaue LED muss blinken, grüne LED aus
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0); //grün aus
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <main+0x304>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
				  if (LEDistAN == true){
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <main+0x328>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <main+0x220>
					  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,511); //blau an
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <main+0x304>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <main+0x308>)
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
 8002776:	e008      	b.n	800278a <main+0x232>
				  }else{
					  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0); //blau aus
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <main+0x304>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002780:	e003      	b.n	800278a <main+0x232>
				  }
			}
		  }else{
			  HAL_TIM_Base_Stop_IT(&htim16);
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <main+0x324>)
 8002784:	0018      	movs	r0, r3
 8002786:	f002 fb49 	bl	8004e1c <HAL_TIM_Base_Stop_IT>
		  }


//Hier der Code, wenn die LEDs dauerleuchten sollen, da die Abweichung >5° ist.

	  if (z_axis >= 0 && abs(Abweichung_milliGrad) > 5000){
 800278a:	2116      	movs	r1, #22
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	5e9b      	ldrsh	r3, [r3, r2]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db2c      	blt.n	80027f0 <main+0x298>
 8002796:	232a      	movs	r3, #42	; 0x2a
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2200      	movs	r2, #0
 800279c:	5e9b      	ldrsh	r3, [r3, r2]
 800279e:	17da      	asrs	r2, r3, #31
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	4053      	eors	r3, r2
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <main+0x320>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d921      	bls.n	80027f0 <main+0x298>
	  		  // z-Achse wird GEGEN Uhrzeigersinn gedreht
	  		  int16_t z_axis_Max = 0x7FFF; //maximaler Wert eines 16-bit signed int
 80027ac:	2028      	movs	r0, #40	; 0x28
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	4a34      	ldr	r2, [pc, #208]	; (8002884 <main+0x32c>)
 80027b2:	801a      	strh	r2, [r3, #0]
	  		  int16_t z = (z_axis*511)/z_axis_Max; //511 ist in der Konfiguration von Tim3 die Zahl, bis zu der gezählt wird.
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	5e9b      	ldrsh	r3, [r3, r2]
 80027ba:	001a      	movs	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	1a9a      	subs	r2, r3, r2
 80027c2:	183b      	adds	r3, r7, r0
 80027c4:	2100      	movs	r1, #0
 80027c6:	5e5b      	ldrsh	r3, [r3, r1]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fd26 	bl	800021c <__divsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	001a      	movs	r2, r3
 80027d4:	2126      	movs	r1, #38	; 0x26
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	801a      	strh	r2, [r3, #0]

	  		  //setzt Pulsweite für grüne LEDauf berechneten %-Wert
	  		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,z);
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <main+0x304>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	187a      	adds	r2, r7, r1
 80027e0:	2100      	movs	r1, #0
 80027e2:	5e52      	ldrsh	r2, [r2, r1]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
	  		  //setzt Pulsweite für blaue LED auf 0
	  		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <main+0x304>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c
	  if (z_axis >= 0 && abs(Abweichung_milliGrad) > 5000){
 80027ee:	e033      	b.n	8002858 <main+0x300>

	  	  }else if (z_axis <= 0 && abs(Abweichung_milliGrad) > 5000){
 80027f0:	2116      	movs	r1, #22
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	5e9b      	ldrsh	r3, [r3, r2]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd00      	ble.n	80027fe <main+0x2a6>
 80027fc:	e727      	b.n	800264e <main+0xf6>
 80027fe:	232a      	movs	r3, #42	; 0x2a
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	5e9b      	ldrsh	r3, [r3, r2]
 8002806:	17da      	asrs	r2, r3, #31
 8002808:	189b      	adds	r3, r3, r2
 800280a:	4053      	eors	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <main+0x320>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d800      	bhi.n	8002816 <main+0x2be>
 8002814:	e71b      	b.n	800264e <main+0xf6>
	  		  // z-Achse wird IM Uhrzeigersinn gedreht
	  		  int16_t z_axis_Min = -0x8000;	//minimaler Wert eines 16-bit signed int
 8002816:	2024      	movs	r0, #36	; 0x24
 8002818:	183b      	adds	r3, r7, r0
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <main+0x330>)
 800281c:	801a      	strh	r2, [r3, #0]
	  		  int16_t z = (z_axis*511)/z_axis_Min;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2200      	movs	r2, #0
 8002822:	5e9b      	ldrsh	r3, [r3, r2]
 8002824:	001a      	movs	r2, r3
 8002826:	0013      	movs	r3, r2
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	1a9a      	subs	r2, r3, r2
 800282c:	183b      	adds	r3, r7, r0
 800282e:	2100      	movs	r1, #0
 8002830:	5e5b      	ldrsh	r3, [r3, r1]
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7fd fcf1 	bl	800021c <__divsi3>
 800283a:	0003      	movs	r3, r0
 800283c:	001a      	movs	r2, r3
 800283e:	2122      	movs	r1, #34	; 0x22
 8002840:	187b      	adds	r3, r7, r1
 8002842:	801a      	strh	r2, [r3, #0]
	  		  //setzt Pulsweite für blaue LEDauf berechneten %-Wert
	  		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,z);
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <main+0x304>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	187a      	adds	r2, r7, r1
 800284a:	2100      	movs	r1, #0
 800284c:	5e52      	ldrsh	r2, [r2, r1]
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
	  		  //setzt Pulsweite für grüne LED auf 0
	  		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <main+0x304>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 8002858:	e6f9      	b.n	800264e <main+0xf6>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000078 	.word	0x20000078
 8002860:	000001ff 	.word	0x000001ff
 8002864:	20000108 	.word	0x20000108
 8002868:	40668000 	.word	0x40668000
 800286c:	54442d18 	.word	0x54442d18
 8002870:	400921fb 	.word	0x400921fb
 8002874:	40568000 	.word	0x40568000
 8002878:	00001388 	.word	0x00001388
 800287c:	200000c0 	.word	0x200000c0
 8002880:	20000000 	.word	0x20000000
 8002884:	00007fff 	.word	0x00007fff
 8002888:	ffff8000 	.word	0xffff8000

0800288c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b097      	sub	sp, #92	; 0x5c
 8002890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002892:	2428      	movs	r4, #40	; 0x28
 8002894:	193b      	adds	r3, r7, r4
 8002896:	0018      	movs	r0, r3
 8002898:	2330      	movs	r3, #48	; 0x30
 800289a:	001a      	movs	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	f003 fa97 	bl	8005dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a2:	2318      	movs	r3, #24
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	0018      	movs	r0, r3
 80028a8:	2310      	movs	r3, #16
 80028aa:	001a      	movs	r2, r3
 80028ac:	2100      	movs	r1, #0
 80028ae:	f003 fa8f 	bl	8005dd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	0018      	movs	r0, r3
 80028b6:	2314      	movs	r3, #20
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f003 fa88 	bl	8005dd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028c0:	0021      	movs	r1, r4
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	2201      	movs	r2, #1
 80028cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2210      	movs	r2, #16
 80028d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2202      	movs	r2, #2
 80028d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	22a0      	movs	r2, #160	; 0xa0
 80028e4:	0392      	lsls	r2, r2, #14
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2200      	movs	r2, #0
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	0018      	movs	r0, r3
 80028f2:	f001 fcc7 	bl	8004284 <HAL_RCC_OscConfig>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80028fa:	f000 f99f 	bl	8002c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fe:	2118      	movs	r1, #24
 8002900:	187b      	adds	r3, r7, r1
 8002902:	2207      	movs	r2, #7
 8002904:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2202      	movs	r2, #2
 800290a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2101      	movs	r1, #1
 800291c:	0018      	movs	r0, r3
 800291e:	f001 ffcb 	bl	80048b8 <HAL_RCC_ClockConfig>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002926:	f000 f989 	bl	8002c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2220      	movs	r2, #32
 800292e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	0018      	movs	r0, r3
 800293a:	f002 f8ef 	bl	8004b1c <HAL_RCCEx_PeriphCLKConfig>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002942:	f000 f97b 	bl	8002c3c <Error_Handler>
  }
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b017      	add	sp, #92	; 0x5c
 800294c:	bd90      	pop	{r4, r7, pc}
	...

08002950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <MX_I2C1_Init+0x78>)
 8002958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_I2C1_Init+0x74>)
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <MX_I2C1_Init+0x7c>)
 800295e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002968:	2201      	movs	r2, #1
 800296a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_I2C1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_I2C1_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_I2C1_Init+0x74>)
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fdad 	bl	80034ec <HAL_I2C_Init>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002996:	f000 f951 	bl	8002c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <MX_I2C1_Init+0x74>)
 800299c:	2100      	movs	r1, #0
 800299e:	0018      	movs	r0, r3
 80029a0:	f001 fbd8 	bl	8004154 <HAL_I2CEx_ConfigAnalogFilter>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029a8:	f000 f948 	bl	8002c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <MX_I2C1_Init+0x74>)
 80029ae:	2100      	movs	r1, #0
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fc1b 	bl	80041ec <HAL_I2CEx_ConfigDigitalFilter>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029ba:	f000 f93f 	bl	8002c3c <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000002c 	.word	0x2000002c
 80029c8:	40005400 	.word	0x40005400
 80029cc:	0000020b 	.word	0x0000020b

080029d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	; 0x38
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029d6:	2328      	movs	r3, #40	; 0x28
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	0018      	movs	r0, r3
 80029dc:	2310      	movs	r3, #16
 80029de:	001a      	movs	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	f003 f9f5 	bl	8005dd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e6:	2320      	movs	r3, #32
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	0018      	movs	r0, r3
 80029ec:	2308      	movs	r3, #8
 80029ee:	001a      	movs	r2, r3
 80029f0:	2100      	movs	r1, #0
 80029f2:	f003 f9ed 	bl	8005dd0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	0018      	movs	r0, r3
 80029fa:	231c      	movs	r3, #28
 80029fc:	001a      	movs	r2, r3
 80029fe:	2100      	movs	r1, #0
 8002a00:	f003 f9e6 	bl	8005dd0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a06:	4a35      	ldr	r2, [pc, #212]	; (8002adc <MX_TIM3_Init+0x10c>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a0c:	2264      	movs	r2, #100	; 0x64
 8002a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a18:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <MX_TIM3_Init+0x110>)
 8002a1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f002 f954 	bl	8004cd8 <HAL_TIM_Base_Init>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a34:	f000 f902 	bl	8002c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a38:	2128      	movs	r1, #40	; 0x28
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	0152      	lsls	r2, r2, #5
 8002a40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a42:	187a      	adds	r2, r7, r1
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f002 fd01 	bl	8005450 <HAL_TIM_ConfigClockSource>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002a52:	f000 f8f3 	bl	8002c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f002 fa0d 	bl	8004e78 <HAL_TIM_PWM_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002a62:	f000 f8eb 	bl	8002c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a66:	2120      	movs	r1, #32
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a74:	187a      	adds	r2, r7, r1
 8002a76:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f003 f916 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002a84:	f000 f8da 	bl	8002c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2260      	movs	r2, #96	; 0x60
 8002a8c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2201      	movs	r2, #1
 8002a92:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aa0:	1d39      	adds	r1, r7, #4
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f002 fc0c 	bl	80052c4 <HAL_TIM_PWM_ConfigChannel>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002ab0:	f000 f8c4 	bl	8002c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ab4:	1d39      	adds	r1, r7, #4
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002ab8:	220c      	movs	r2, #12
 8002aba:	0018      	movs	r0, r3
 8002abc:	f002 fc02 	bl	80052c4 <HAL_TIM_PWM_ConfigChannel>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002ac4:	f000 f8ba 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <MX_TIM3_Init+0x108>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f96a 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b00e      	add	sp, #56	; 0x38
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000078 	.word	0x20000078
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	000001ff 	.word	0x000001ff

08002ae4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <MX_TIM16_Init+0x48>)
 8002aec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <MX_TIM16_Init+0x4c>)
 8002af2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250-1;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002afc:	22f9      	movs	r2, #249	; 0xf9
 8002afe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <MX_TIM16_Init+0x44>)
 8002b14:	0018      	movs	r0, r3
 8002b16:	f002 f8df 	bl	8004cd8 <HAL_TIM_Base_Init>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002b1e:	f000 f88d 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200000c0 	.word	0x200000c0
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	0000bb7f 	.word	0x0000bb7f

08002b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	240c      	movs	r4, #12
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	0018      	movs	r0, r3
 8002b40:	2314      	movs	r3, #20
 8002b42:	001a      	movs	r2, r3
 8002b44:	2100      	movs	r1, #0
 8002b46:	f003 f943 	bl	8005dd0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0289      	lsls	r1, r1, #10
 8002b54:	430a      	orrs	r2, r1
 8002b56:	615a      	str	r2, [r3, #20]
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	0309      	lsls	r1, r1, #12
 8002b70:	430a      	orrs	r2, r1
 8002b72:	615a      	str	r2, [r3, #20]
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	02c9      	lsls	r1, r1, #11
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	615a      	str	r2, [r3, #20]
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_GPIO_Init+0xa4>)
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	02db      	lsls	r3, r3, #11
 8002b98:	4013      	ands	r3, r2
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2288      	movs	r2, #136	; 0x88
 8002ba8:	0352      	lsls	r2, r2, #13
 8002baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	193a      	adds	r2, r7, r4
 8002bb4:	2390      	movs	r3, #144	; 0x90
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fb0a 	bl	80031d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2005      	movs	r0, #5
 8002bc6:	f000 fad3 	bl	8003170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002bca:	2005      	movs	r0, #5
 8002bcc:	f000 fae5 	bl	800319a <HAL_NVIC_EnableIRQ>

}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b009      	add	sp, #36	; 0x24
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Interrupt Funktionen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	0002      	movs	r2, r0
 8002be4:	1dbb      	adds	r3, r7, #6
 8002be6:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002be8:	1dbb      	adds	r3, r7, #6
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	//kurzer Interrupt setzt Tara Wert auf true, damit dann in der while Schleife die aktuelle Ausrichtung gespeichert werden kann
    	Tara = true;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GPIO_EXTI_Callback+0x24>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
    }
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	20000108 	.word	0x20000108

08002c04 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){ //Prüfe, ob es tatsächlich Timer 16 war, der den Interrupt ausgelöst hat
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10b      	bne.n	8002c2c <HAL_TIM_PeriodElapsedCallback+0x28>

		//jetzt wird der LEDistAN Wert umgeschaltet; entweder von Wahr auf Falsch oder von Falsch auf Wahr.
		//Bei jedem Durchlauf des Counters wird somit ein Interrupt ausgelöst. In der Hauptschleife kann somit entweder Die LED an- oder ausgeschaltet werden,
		//je nachdem welchen Wert LEDistAN annimmt.
		if (LEDistAN == true){
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0x22>

			LEDistAN = false;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		}else{
			LEDistAN = true;
		}
		 //
	}
}
 8002c24:	e002      	b.n	8002c2c <HAL_TIM_PeriodElapsedCallback+0x28>
			LEDistAN = true;
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200000c0 	.word	0x200000c0
 8002c38:	20000000 	.word	0x20000000

08002c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <Error_Handler+0x8>
	...

08002c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_MspInit+0x44>)
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_MspInit+0x44>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_MspInit+0x44>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_MspInit+0x44>)
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_MspInit+0x44>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	0549      	lsls	r1, r1, #21
 8002c70:	430a      	orrs	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_MspInit+0x44>)
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	055b      	lsls	r3, r3, #21
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b002      	add	sp, #8
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b08b      	sub	sp, #44	; 0x2c
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	2414      	movs	r4, #20
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f003 f894 	bl	8005dd0 <memset>
  if(hi2c->Instance==I2C1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_I2C_MspInit+0x90>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d131      	bne.n	8002d16 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	02c9      	lsls	r1, r1, #11
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	615a      	str	r2, [r3, #20]
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	02db      	lsls	r3, r3, #11
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cce:	0021      	movs	r1, r4
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	22c0      	movs	r2, #192	; 0xc0
 8002cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2212      	movs	r2, #18
 8002cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2201      	movs	r2, #1
 8002cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <HAL_I2C_MspInit+0x98>)
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	f000 fa6d 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0389      	lsls	r1, r1, #14
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_I2C_MspInit+0x94>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	039b      	lsls	r3, r3, #14
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b00b      	add	sp, #44	; 0x2c
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40005400 	.word	0x40005400
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_TIM_Base_MspInit+0x6c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10c      	bne.n	8002d58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d44:	2102      	movs	r1, #2
 8002d46:	430a      	orrs	r2, r1
 8002d48:	61da      	str	r2, [r3, #28]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d56:	e01a      	b.n	8002d8e <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_TIM_Base_MspInit+0x74>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d115      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0289      	lsls	r1, r1, #10
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_TIM_Base_MspInit+0x70>)
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	2015      	movs	r0, #21
 8002d84:	f000 f9f4 	bl	8003170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002d88:	2015      	movs	r0, #21
 8002d8a:	f000 fa06 	bl	800319a <HAL_NVIC_EnableIRQ>
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40014400 	.word	0x40014400

08002da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	240c      	movs	r4, #12
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	0018      	movs	r0, r3
 8002db2:	2314      	movs	r3, #20
 8002db4:	001a      	movs	r2, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	f003 f80a 	bl	8005dd0 <memset>
  if(htim->Instance==TIM3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_TIM_MspPostInit+0xa0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d13a      	bne.n	8002e3c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_TIM_MspPostInit+0xa4>)
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_TIM_MspPostInit+0xa4>)
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	0309      	lsls	r1, r1, #12
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_TIM_MspPostInit+0xa4>)
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_Blue_LED_Pin;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	0052      	lsls	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	2202      	movs	r2, #2
 8002dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2201      	movs	r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH3_Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002e06:	0019      	movs	r1, r3
 8002e08:	0010      	movs	r0, r2
 8002e0a:	f000 f9e3 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH4_Green_LED_Pin;
 8002e0e:	0021      	movs	r1, r4
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH4_Green_LED_GPIO_Port, &GPIO_InitStruct);
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f000 f9cc 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b009      	add	sp, #36	; 0x24
 8002e42:	bd90      	pop	{r4, r7, pc}
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	48000800 	.word	0x48000800

08002e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <NMI_Handler+0x4>

08002e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <HardFault_Handler+0x4>

08002e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f000 f890 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 fb16 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <TIM16_IRQHandler+0x14>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f002 f8fe 	bl	8005098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	200000c0 	.word	0x200000c0

08002ea8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ede:	f7ff ffe3 	bl	8002ea8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ee2:	f002 ff51 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7ff fb37 	bl	8002558 <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   r0, =_estack
 8002eec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002ef8:	080063d0 	.word	0x080063d0
  ldr r2, =_sbss
 8002efc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002f00:	20000110 	.word	0x20000110

08002f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC1_COMP_IRQHandler>
	...

08002f08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_Init+0x24>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_Init+0x24>)
 8002f12:	2110      	movs	r1, #16
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f000 f809 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1e:	f7ff fe93 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_InitTick+0x5c>)
 8002f3a:	681c      	ldr	r4, [r3, #0]
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_InitTick+0x60>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	0019      	movs	r1, r3
 8002f42:	23fa      	movs	r3, #250	; 0xfa
 8002f44:	0098      	lsls	r0, r3, #2
 8002f46:	f7fd f8df 	bl	8000108 <__udivsi3>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	0020      	movs	r0, r4
 8002f50:	f7fd f8da 	bl	8000108 <__udivsi3>
 8002f54:	0003      	movs	r3, r0
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f92f 	bl	80031ba <HAL_SYSTICK_Config>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e00f      	b.n	8002f84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d80b      	bhi.n	8002f82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	425b      	negs	r3, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f8fc 	bl	8003170 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_InitTick+0x64>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b003      	add	sp, #12
 8002f8a:	bd90      	pop	{r4, r7, pc}
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	20000008 	.word	0x20000008

08002f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_IncTick+0x1c>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_IncTick+0x20>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	18d2      	adds	r2, r2, r3
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_IncTick+0x20>)
 8002faa:	601a      	str	r2, [r3, #0]
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	2000010c 	.word	0x2000010c

08002fbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b02      	ldr	r3, [pc, #8]	; (8002fcc <HAL_GetTick+0x10>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	2000010c 	.word	0x2000010c

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fff0 	bl	8002fbc <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	001a      	movs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	f7ff ffe0 	bl	8002fbc <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	2000000c 	.word	0x2000000c

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	0002      	movs	r2, r0
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b7f      	cmp	r3, #127	; 0x7f
 800302a:	d809      	bhi.n	8003040 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	001a      	movs	r2, r3
 8003032:	231f      	movs	r3, #31
 8003034:	401a      	ands	r2, r3
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_EnableIRQ+0x30>)
 8003038:	2101      	movs	r1, #1
 800303a:	4091      	lsls	r1, r2
 800303c:	000a      	movs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
  }
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	0002      	movs	r2, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b7f      	cmp	r3, #127	; 0x7f
 8003060:	d828      	bhi.n	80030b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <__NVIC_SetPriority+0xd4>)
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b25b      	sxtb	r3, r3
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	33c0      	adds	r3, #192	; 0xc0
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	589b      	ldr	r3, [r3, r2]
 8003072:	1dfa      	adds	r2, r7, #7
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	0011      	movs	r1, r2
 8003078:	2203      	movs	r2, #3
 800307a:	400a      	ands	r2, r1
 800307c:	00d2      	lsls	r2, r2, #3
 800307e:	21ff      	movs	r1, #255	; 0xff
 8003080:	4091      	lsls	r1, r2
 8003082:	000a      	movs	r2, r1
 8003084:	43d2      	mvns	r2, r2
 8003086:	401a      	ands	r2, r3
 8003088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	401a      	ands	r2, r3
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	0018      	movs	r0, r3
 8003098:	2303      	movs	r3, #3
 800309a:	4003      	ands	r3, r0
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a0:	481f      	ldr	r0, [pc, #124]	; (8003120 <__NVIC_SetPriority+0xd4>)
 80030a2:	1dfb      	adds	r3, r7, #7
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	430a      	orrs	r2, r1
 80030ac:	33c0      	adds	r3, #192	; 0xc0
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030b2:	e031      	b.n	8003118 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <__NVIC_SetPriority+0xd8>)
 80030b6:	1dfb      	adds	r3, r7, #7
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	0019      	movs	r1, r3
 80030bc:	230f      	movs	r3, #15
 80030be:	400b      	ands	r3, r1
 80030c0:	3b08      	subs	r3, #8
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3306      	adds	r3, #6
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1dfa      	adds	r2, r7, #7
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	0011      	movs	r1, r2
 80030d4:	2203      	movs	r2, #3
 80030d6:	400a      	ands	r2, r1
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	21ff      	movs	r1, #255	; 0xff
 80030dc:	4091      	lsls	r1, r2
 80030de:	000a      	movs	r2, r1
 80030e0:	43d2      	mvns	r2, r2
 80030e2:	401a      	ands	r2, r3
 80030e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	22ff      	movs	r2, #255	; 0xff
 80030ec:	401a      	ands	r2, r3
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	0018      	movs	r0, r3
 80030f4:	2303      	movs	r3, #3
 80030f6:	4003      	ands	r3, r0
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030fc:	4809      	ldr	r0, [pc, #36]	; (8003124 <__NVIC_SetPriority+0xd8>)
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	001c      	movs	r4, r3
 8003104:	230f      	movs	r3, #15
 8003106:	4023      	ands	r3, r4
 8003108:	3b08      	subs	r3, #8
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	430a      	orrs	r2, r1
 800310e:	3306      	adds	r3, #6
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	18c3      	adds	r3, r0, r3
 8003114:	3304      	adds	r3, #4
 8003116:	601a      	str	r2, [r3, #0]
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b003      	add	sp, #12
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	045b      	lsls	r3, r3, #17
 8003138:	429a      	cmp	r2, r3
 800313a:	d301      	bcc.n	8003140 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313c:	2301      	movs	r3, #1
 800313e:	e010      	b.n	8003162 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <SysTick_Config+0x44>)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	3a01      	subs	r2, #1
 8003146:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003148:	2301      	movs	r3, #1
 800314a:	425b      	negs	r3, r3
 800314c:	2103      	movs	r1, #3
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff ff7c 	bl	800304c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x44>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x44>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	210f      	movs	r1, #15
 800317c:	187b      	adds	r3, r7, r1
 800317e:	1c02      	adds	r2, r0, #0
 8003180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	187b      	adds	r3, r7, r1
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b25b      	sxtb	r3, r3
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f7ff ff5d 	bl	800304c <__NVIC_SetPriority>
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	0002      	movs	r2, r0
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff ff33 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff ffaf 	bl	8003128 <SysTick_Config>
 80031ca:	0003      	movs	r3, r0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	e14f      	b.n	8003484 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4091      	lsls	r1, r2
 80031ee:	000a      	movs	r2, r1
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d100      	bne.n	80031fc <HAL_GPIO_Init+0x28>
 80031fa:	e140      	b.n	800347e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	4013      	ands	r3, r2
 8003204:	2b01      	cmp	r3, #1
 8003206:	d005      	beq.n	8003214 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003210:	2b02      	cmp	r3, #2
 8003212:	d130      	bne.n	8003276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	43da      	mvns	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800324a:	2201      	movs	r2, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	43da      	mvns	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	2201      	movs	r2, #1
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	4013      	ands	r3, r2
 800327e:	2b03      	cmp	r3, #3
 8003280:	d017      	beq.n	80032b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	409a      	lsls	r2, r3
 8003290:	0013      	movs	r3, r2
 8003292:	43da      	mvns	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d123      	bne.n	8003306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	08da      	lsrs	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3208      	adds	r2, #8
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	58d3      	ldr	r3, [r2, r3]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2207      	movs	r2, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	409a      	lsls	r2, r3
 80032d8:	0013      	movs	r3, r2
 80032da:	43da      	mvns	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2107      	movs	r1, #7
 80032ea:	400b      	ands	r3, r1
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	6939      	ldr	r1, [r7, #16]
 8003304:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	43da      	mvns	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2203      	movs	r2, #3
 8003324:	401a      	ands	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	23c0      	movs	r3, #192	; 0xc0
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	4013      	ands	r3, r2
 8003344:	d100      	bne.n	8003348 <HAL_GPIO_Init+0x174>
 8003346:	e09a      	b.n	800347e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003348:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_GPIO_Init+0x2c8>)
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_GPIO_Init+0x2c8>)
 800334e:	2101      	movs	r1, #1
 8003350:	430a      	orrs	r2, r1
 8003352:	619a      	str	r2, [r3, #24]
 8003354:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_GPIO_Init+0x2c8>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003360:	4a4f      	ldr	r2, [pc, #316]	; (80034a0 <HAL_GPIO_Init+0x2cc>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2203      	movs	r2, #3
 8003372:	4013      	ands	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	409a      	lsls	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	2390      	movs	r3, #144	; 0x90
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	429a      	cmp	r2, r3
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_Init+0x1e2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a44      	ldr	r2, [pc, #272]	; (80034a4 <HAL_GPIO_Init+0x2d0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_Init+0x1de>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a43      	ldr	r2, [pc, #268]	; (80034a8 <HAL_GPIO_Init+0x2d4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x1da>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a42      	ldr	r2, [pc, #264]	; (80034ac <HAL_GPIO_Init+0x2d8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_Init+0x1d6>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x1e4>
 80033aa:	2305      	movs	r3, #5
 80033ac:	e004      	b.n	80033b8 <HAL_GPIO_Init+0x1e4>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_Init+0x1e4>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x1e4>
 80033b6:	2300      	movs	r3, #0
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	2103      	movs	r1, #3
 80033bc:	400a      	ands	r2, r1
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	4093      	lsls	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033c8:	4935      	ldr	r1, [pc, #212]	; (80034a0 <HAL_GPIO_Init+0x2cc>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	3302      	adds	r3, #2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	4013      	ands	r3, r2
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43da      	mvns	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	4013      	ands	r3, r2
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43da      	mvns	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	035b      	lsls	r3, r3, #13
 8003442:	4013      	ands	r3, r2
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43da      	mvns	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	039b      	lsls	r3, r3, #14
 800346c:	4013      	ands	r3, r2
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_GPIO_Init+0x2dc>)
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	40da      	lsrs	r2, r3
 800348c:	1e13      	subs	r3, r2, #0
 800348e:	d000      	beq.n	8003492 <HAL_GPIO_Init+0x2be>
 8003490:	e6a8      	b.n	80031e4 <HAL_GPIO_Init+0x10>
  } 
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010000 	.word	0x40010000
 80034a4:	48000400 	.word	0x48000400
 80034a8:	48000800 	.word	0x48000800
 80034ac:	48000c00 	.word	0x48000c00
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	0002      	movs	r2, r0
 80034bc:	1dbb      	adds	r3, r7, #6
 80034be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	1dba      	adds	r2, r7, #6
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	d008      	beq.n	80034de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034ce:	1dba      	adds	r2, r7, #6
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	1dbb      	adds	r3, r7, #6
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff fb7f 	bl	8002bdc <HAL_GPIO_EXTI_Callback>
  }
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40010400 	.word	0x40010400

080034ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e082      	b.n	8003604 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2241      	movs	r2, #65	; 0x41
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fbbb 	bl	8002c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	2124      	movs	r1, #36	; 0x24
 8003520:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	438a      	bics	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4934      	ldr	r1, [pc, #208]	; (800360c <HAL_I2C_Init+0x120>)
 800353c:	400a      	ands	r2, r1
 800353e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4931      	ldr	r1, [pc, #196]	; (8003610 <HAL_I2C_Init+0x124>)
 800354c:	400a      	ands	r2, r1
 800354e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0209      	lsls	r1, r1, #8
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	e007      	b.n	800357a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2184      	movs	r1, #132	; 0x84
 8003574:	0209      	lsls	r1, r1, #8
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d104      	bne.n	800358c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	491f      	ldr	r1, [pc, #124]	; (8003614 <HAL_I2C_Init+0x128>)
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	491a      	ldr	r1, [pc, #104]	; (8003610 <HAL_I2C_Init+0x124>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69d9      	ldr	r1, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2241      	movs	r2, #65	; 0x41
 80035f0:	2120      	movs	r1, #32
 80035f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2242      	movs	r2, #66	; 0x42
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f0ffffff 	.word	0xf0ffffff
 8003610:	ffff7fff 	.word	0xffff7fff
 8003614:	02008000 	.word	0x02008000

08003618 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	0008      	movs	r0, r1
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	0019      	movs	r1, r3
 8003626:	230a      	movs	r3, #10
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	1c02      	adds	r2, r0, #0
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	2308      	movs	r3, #8
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	1c0a      	adds	r2, r1, #0
 8003634:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2241      	movs	r2, #65	; 0x41
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	d000      	beq.n	8003644 <HAL_I2C_Master_Transmit+0x2c>
 8003642:	e0e7      	b.n	8003814 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Master_Transmit+0x3a>
 800364e:	2302      	movs	r3, #2
 8003650:	e0e1      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800365a:	f7ff fcaf 	bl	8002fbc <HAL_GetTick>
 800365e:	0003      	movs	r3, r0
 8003660:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	0219      	lsls	r1, r3, #8
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2319      	movs	r3, #25
 800366e:	2201      	movs	r2, #1
 8003670:	f000 fb9a 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003674:	1e03      	subs	r3, r0, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0cc      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2241      	movs	r2, #65	; 0x41
 8003680:	2121      	movs	r1, #33	; 0x21
 8003682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2242      	movs	r2, #66	; 0x42
 8003688:	2110      	movs	r1, #16
 800368a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2208      	movs	r2, #8
 800369c:	18ba      	adds	r2, r7, r2
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2bff      	cmp	r3, #255	; 0xff
 80036b0:	d911      	bls.n	80036d6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	045c      	lsls	r4, r3, #17
 80036c2:	230a      	movs	r3, #10
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	8819      	ldrh	r1, [r3, #0]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	4b55      	ldr	r3, [pc, #340]	; (8003820 <HAL_I2C_Master_Transmit+0x208>)
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	0023      	movs	r3, r4
 80036d0:	f000 fd0a 	bl	80040e8 <I2C_TransferConfig>
 80036d4:	e075      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	049c      	lsls	r4, r3, #18
 80036ea:	230a      	movs	r3, #10
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_I2C_Master_Transmit+0x208>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	0023      	movs	r3, r4
 80036f8:	f000 fcf6 	bl	80040e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036fc:	e061      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fb8e 	bl	8003e26 <I2C_WaitOnTXISFlagUntilTimeout>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e081      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03a      	beq.n	80037c2 <HAL_I2C_Master_Transmit+0x1aa>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d136      	bne.n	80037c2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	0013      	movs	r3, r2
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	f000 fb21 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e053      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2bff      	cmp	r3, #255	; 0xff
 8003776:	d911      	bls.n	800379c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	045c      	lsls	r4, r3, #17
 8003788:	230a      	movs	r3, #10
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	8819      	ldrh	r1, [r3, #0]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	2300      	movs	r3, #0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	0023      	movs	r3, r4
 8003796:	f000 fca7 	bl	80040e8 <I2C_TransferConfig>
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	049c      	lsls	r4, r3, #18
 80037b0:	230a      	movs	r3, #10
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	8819      	ldrh	r1, [r3, #0]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	0023      	movs	r3, r4
 80037be:	f000 fc93 	bl	80040e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d198      	bne.n	80036fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 fb66 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e01a      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2220      	movs	r2, #32
 80037e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	490c      	ldr	r1, [pc, #48]	; (8003824 <HAL_I2C_Master_Transmit+0x20c>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2241      	movs	r2, #65	; 0x41
 80037fc:	2120      	movs	r1, #32
 80037fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2242      	movs	r2, #66	; 0x42
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b007      	add	sp, #28
 800381c:	bd90      	pop	{r4, r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	80002000 	.word	0x80002000
 8003824:	fe00e800 	.word	0xfe00e800

08003828 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	0008      	movs	r0, r1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	0019      	movs	r1, r3
 8003836:	230a      	movs	r3, #10
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	1c02      	adds	r2, r0, #0
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	2308      	movs	r3, #8
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	1c0a      	adds	r2, r1, #0
 8003844:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2241      	movs	r2, #65	; 0x41
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d000      	beq.n	8003854 <HAL_I2C_Master_Receive+0x2c>
 8003852:	e0e8      	b.n	8003a26 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_I2C_Master_Receive+0x3a>
 800385e:	2302      	movs	r3, #2
 8003860:	e0e2      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800386a:	f7ff fba7 	bl	8002fbc <HAL_GetTick>
 800386e:	0003      	movs	r3, r0
 8003870:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	0219      	lsls	r1, r3, #8
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2319      	movs	r3, #25
 800387e:	2201      	movs	r2, #1
 8003880:	f000 fa92 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0cd      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2241      	movs	r2, #65	; 0x41
 8003890:	2122      	movs	r1, #34	; 0x22
 8003892:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2242      	movs	r2, #66	; 0x42
 8003898:	2110      	movs	r1, #16
 800389a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2208      	movs	r2, #8
 80038ac:	18ba      	adds	r2, r7, r2
 80038ae:	8812      	ldrh	r2, [r2, #0]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2bff      	cmp	r3, #255	; 0xff
 80038c0:	d911      	bls.n	80038e6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	22ff      	movs	r2, #255	; 0xff
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	045c      	lsls	r4, r3, #17
 80038d2:	230a      	movs	r3, #10
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	8819      	ldrh	r1, [r3, #0]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <HAL_I2C_Master_Receive+0x208>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	0023      	movs	r3, r4
 80038e0:	f000 fc02 	bl	80040e8 <I2C_TransferConfig>
 80038e4:	e076      	b.n	80039d4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	049c      	lsls	r4, r3, #18
 80038fa:	230a      	movs	r3, #10
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	8819      	ldrh	r1, [r3, #0]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_I2C_Master_Receive+0x208>)
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	0023      	movs	r3, r4
 8003908:	f000 fbee 	bl	80040e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800390c:	e062      	b.n	80039d4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 fb01 	bl	8003f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e082      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03a      	beq.n	80039d4 <HAL_I2C_Master_Receive+0x1ac>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d136      	bne.n	80039d4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	0013      	movs	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	f000 fa18 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003978:	1e03      	subs	r3, r0, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e053      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2bff      	cmp	r3, #255	; 0xff
 8003988:	d911      	bls.n	80039ae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	b2da      	uxtb	r2, r3
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	045c      	lsls	r4, r3, #17
 800399a:	230a      	movs	r3, #10
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	8819      	ldrh	r1, [r3, #0]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	0023      	movs	r3, r4
 80039a8:	f000 fb9e 	bl	80040e8 <I2C_TransferConfig>
 80039ac:	e012      	b.n	80039d4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	049c      	lsls	r4, r3, #18
 80039c2:	230a      	movs	r3, #10
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	8819      	ldrh	r1, [r3, #0]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	2300      	movs	r3, #0
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	0023      	movs	r3, r4
 80039d0:	f000 fb8a 	bl	80040e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d197      	bne.n	800390e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 fa5d 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ea:	1e03      	subs	r3, r0, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01a      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2220      	movs	r2, #32
 80039f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	490b      	ldr	r1, [pc, #44]	; (8003a34 <HAL_I2C_Master_Receive+0x20c>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2241      	movs	r2, #65	; 0x41
 8003a0e:	2120      	movs	r1, #32
 8003a10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2242      	movs	r2, #66	; 0x42
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b007      	add	sp, #28
 8003a2e:	bd90      	pop	{r4, r7, pc}
 8003a30:	80002400 	.word	0x80002400
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	000c      	movs	r4, r1
 8003a42:	0010      	movs	r0, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	230a      	movs	r3, #10
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	1c22      	adds	r2, r4, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	2308      	movs	r3, #8
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	1c02      	adds	r2, r0, #0
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	1dbb      	adds	r3, r7, #6
 8003a58:	1c0a      	adds	r2, r1, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2241      	movs	r2, #65	; 0x41
 8003a60:	5c9b      	ldrb	r3, [r3, r2]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d000      	beq.n	8003a6a <HAL_I2C_Mem_Read+0x32>
 8003a68:	e110      	b.n	8003c8c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x42>
 8003a70:	232c      	movs	r3, #44	; 0x2c
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e103      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	5c9b      	ldrb	r3, [r3, r2]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2C_Mem_Read+0x5c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0fc      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2240      	movs	r2, #64	; 0x40
 8003a98:	2101      	movs	r1, #1
 8003a9a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a9c:	f7ff fa8e 	bl	8002fbc <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	0219      	lsls	r1, r3, #8
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2319      	movs	r3, #25
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f000 f979 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	1e03      	subs	r3, r0, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0e7      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2241      	movs	r2, #65	; 0x41
 8003ac2:	2122      	movs	r1, #34	; 0x22
 8003ac4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2242      	movs	r2, #66	; 0x42
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	222c      	movs	r2, #44	; 0x2c
 8003ade:	18ba      	adds	r2, r7, r2
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aea:	1dbb      	adds	r3, r7, #6
 8003aec:	881c      	ldrh	r4, [r3, #0]
 8003aee:	2308      	movs	r3, #8
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	230a      	movs	r3, #10
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	8819      	ldrh	r1, [r3, #0]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	0023      	movs	r3, r4
 8003b06:	f000 f8cb 	bl	8003ca0 <I2C_RequestMemoryRead>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0b9      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d911      	bls.n	8003b48 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	045c      	lsls	r4, r3, #17
 8003b34:	230a      	movs	r3, #10
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	8819      	ldrh	r1, [r3, #0]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_I2C_Mem_Read+0x260>)
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	0023      	movs	r3, r4
 8003b42:	f000 fad1 	bl	80040e8 <I2C_TransferConfig>
 8003b46:	e012      	b.n	8003b6e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	049c      	lsls	r4, r3, #18
 8003b5c:	230a      	movs	r3, #10
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	8819      	ldrh	r1, [r3, #0]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_I2C_Mem_Read+0x260>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	0023      	movs	r3, r4
 8003b6a:	f000 fabd 	bl	80040e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	0013      	movs	r3, r2
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	f000 f914 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e082      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d03a      	beq.n	8003c3a <HAL_I2C_Mem_Read+0x202>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d136      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	0013      	movs	r3, r2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	f000 f8e5 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e053      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2bff      	cmp	r3, #255	; 0xff
 8003bee:	d911      	bls.n	8003c14 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	045c      	lsls	r4, r3, #17
 8003c00:	230a      	movs	r3, #10
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	8819      	ldrh	r1, [r3, #0]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0023      	movs	r3, r4
 8003c0e:	f000 fa6b 	bl	80040e8 <I2C_TransferConfig>
 8003c12:	e012      	b.n	8003c3a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	049c      	lsls	r4, r3, #18
 8003c28:	230a      	movs	r3, #10
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	8819      	ldrh	r1, [r3, #0]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	2300      	movs	r3, #0
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0023      	movs	r3, r4
 8003c36:	f000 fa57 	bl	80040e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d194      	bne.n	8003b6e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 f92a 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c50:	1e03      	subs	r3, r0, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e01a      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	490c      	ldr	r1, [pc, #48]	; (8003c9c <HAL_I2C_Mem_Read+0x264>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2241      	movs	r2, #65	; 0x41
 8003c74:	2120      	movs	r1, #32
 8003c76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2242      	movs	r2, #66	; 0x42
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b007      	add	sp, #28
 8003c94:	bd90      	pop	{r4, r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	80002400 	.word	0x80002400
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ca0:	b5b0      	push	{r4, r5, r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	000c      	movs	r4, r1
 8003caa:	0010      	movs	r0, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	250a      	movs	r5, #10
 8003cb0:	197b      	adds	r3, r7, r5
 8003cb2:	1c22      	adds	r2, r4, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	1c02      	adds	r2, r0, #0
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	1dbb      	adds	r3, r7, #6
 8003cc0:	1c0a      	adds	r2, r1, #0
 8003cc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cc4:	1dbb      	adds	r3, r7, #6
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	197b      	adds	r3, r7, r5
 8003ccc:	8819      	ldrh	r1, [r3, #0]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <I2C_RequestMemoryRead+0xc0>)
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f000 fa07 	bl	80040e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	6a39      	ldr	r1, [r7, #32]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 f8a0 	bl	8003e26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e033      	b.n	8003d56 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cee:	1dbb      	adds	r3, r7, #6
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
 8003d04:	e019      	b.n	8003d3a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d06:	2308      	movs	r3, #8
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	6a39      	ldr	r1, [r7, #32]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 f881 	bl	8003e26 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d24:	1e03      	subs	r3, r0, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e014      	b.n	8003d56 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a3a      	ldr	r2, [r7, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	0013      	movs	r3, r2
 8003d44:	2200      	movs	r2, #0
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	f000 f82e 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	80002000 	.word	0x80002000

08003d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2202      	movs	r2, #2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d103      	bne.n	8003d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d007      	beq.n	8003da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
  }
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	1dfb      	adds	r3, r7, #7
 8003db6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db8:	e021      	b.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	d01e      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7ff f8fc 	bl	8002fbc <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d113      	bne.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	2220      	movs	r2, #32
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2241      	movs	r2, #65	; 0x41
 8003de6:	2120      	movs	r1, #32
 8003de8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2242      	movs	r2, #66	; 0x42
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2240      	movs	r2, #64	; 0x40
 8003df6:	2100      	movs	r1, #0
 8003df8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00f      	b.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	425a      	negs	r2, r3
 8003e0e:	4153      	adcs	r3, r2
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	001a      	movs	r2, r3
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d0ce      	beq.n	8003dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b004      	add	sp, #16
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e32:	e02b      	b.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 f8da 	bl	8003ff4 <I2C_IsAcknowledgeFailed>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e029      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	d01e      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7ff f8b5 	bl	8002fbc <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d113      	bne.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	2220      	movs	r2, #32
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2241      	movs	r2, #65	; 0x41
 8003e74:	2120      	movs	r1, #32
 8003e76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2242      	movs	r2, #66	; 0x42
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e007      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d1cc      	bne.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b004      	add	sp, #16
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb0:	e028      	b.n	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 f89b 	bl	8003ff4 <I2C_IsAcknowledgeFailed>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e026      	b.n	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7ff f879 	bl	8002fbc <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d113      	bne.n	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2241      	movs	r2, #65	; 0x41
 8003eec:	2120      	movs	r1, #32
 8003eee:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2242      	movs	r2, #66	; 0x42
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	2100      	movs	r1, #0
 8003efe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d1cf      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b004      	add	sp, #16
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f28:	e055      	b.n	8003fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f85f 	bl	8003ff4 <I2C_IsAcknowledgeFailed>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e053      	b.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2220      	movs	r2, #32
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d129      	bne.n	8003fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2204      	movs	r2, #4
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d105      	bne.n	8003f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e03f      	b.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	491d      	ldr	r1, [pc, #116]	; (8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2241      	movs	r2, #65	; 0x41
 8003f88:	2120      	movs	r1, #32
 8003f8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2242      	movs	r2, #66	; 0x42
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e022      	b.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7ff f80c 	bl	8002fbc <HAL_GetTick>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	2220      	movs	r2, #32
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2241      	movs	r2, #65	; 0x41
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e007      	b.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d1a2      	bne.n	8003f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	fe00e800 	.word	0xfe00e800

08003ff4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2210      	movs	r2, #16
 8004008:	4013      	ands	r3, r2
 800400a:	2b10      	cmp	r3, #16
 800400c:	d164      	bne.n	80040d8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	049b      	lsls	r3, r3, #18
 8004018:	401a      	ands	r2, r3
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	049b      	lsls	r3, r3, #18
 800401e:	429a      	cmp	r2, r3
 8004020:	d02b      	beq.n	800407a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	01c9      	lsls	r1, r1, #7
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e021      	b.n	800407a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	d01e      	beq.n	800407a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403c:	f7fe ffbe 	bl	8002fbc <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	d302      	bcc.n	8004052 <I2C_IsAcknowledgeFailed+0x5e>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d113      	bne.n	800407a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	2220      	movs	r2, #32
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2241      	movs	r2, #65	; 0x41
 8004062:	2120      	movs	r1, #32
 8004064:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2242      	movs	r2, #66	; 0x42
 800406a:	2100      	movs	r1, #0
 800406c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	2100      	movs	r1, #0
 8004074:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e02f      	b.n	80040da <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2220      	movs	r2, #32
 8004082:	4013      	ands	r3, r2
 8004084:	2b20      	cmp	r3, #32
 8004086:	d1d6      	bne.n	8004036 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2210      	movs	r2, #16
 800408e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2220      	movs	r2, #32
 8004096:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0018      	movs	r0, r3
 800409c:	f7ff fe62 	bl	8003d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	490e      	ldr	r1, [pc, #56]	; (80040e4 <I2C_IsAcknowledgeFailed+0xf0>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	2204      	movs	r2, #4
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2241      	movs	r2, #65	; 0x41
 80040c0:	2120      	movs	r1, #32
 80040c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2242      	movs	r2, #66	; 0x42
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	fe00e800 	.word	0xfe00e800

080040e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	0008      	movs	r0, r1
 80040f2:	0011      	movs	r1, r2
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	240a      	movs	r4, #10
 80040f8:	193b      	adds	r3, r7, r4
 80040fa:	1c02      	adds	r2, r0, #0
 80040fc:	801a      	strh	r2, [r3, #0]
 80040fe:	2009      	movs	r0, #9
 8004100:	183b      	adds	r3, r7, r0
 8004102:	1c0a      	adds	r2, r1, #0
 8004104:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	0d51      	lsrs	r1, r2, #21
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	00d2      	lsls	r2, r2, #3
 8004114:	400a      	ands	r2, r1
 8004116:	490e      	ldr	r1, [pc, #56]	; (8004150 <I2C_TransferConfig+0x68>)
 8004118:	430a      	orrs	r2, r1
 800411a:	43d2      	mvns	r2, r2
 800411c:	401a      	ands	r2, r3
 800411e:	0011      	movs	r1, r2
 8004120:	193b      	adds	r3, r7, r4
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	059b      	lsls	r3, r3, #22
 8004126:	0d9a      	lsrs	r2, r3, #22
 8004128:	183b      	adds	r3, r7, r0
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	0418      	lsls	r0, r3, #16
 800412e:	23ff      	movs	r3, #255	; 0xff
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	4003      	ands	r3, r0
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	431a      	orrs	r2, r3
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	431a      	orrs	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b005      	add	sp, #20
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	03ff63ff 	.word	0x03ff63ff

08004154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2241      	movs	r2, #65	; 0x41
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	d138      	bne.n	80041dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004174:	2302      	movs	r3, #2
 8004176:	e032      	b.n	80041de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2241      	movs	r2, #65	; 0x41
 8004184:	2124      	movs	r1, #36	; 0x24
 8004186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	438a      	bics	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4911      	ldr	r1, [pc, #68]	; (80041e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2101      	movs	r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2241      	movs	r2, #65	; 0x41
 80041cc:	2120      	movs	r1, #32
 80041ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2240      	movs	r2, #64	; 0x40
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	ffffefff 	.word	0xffffefff

080041ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2241      	movs	r2, #65	; 0x41
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d139      	bne.n	8004276 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420c:	2302      	movs	r3, #2
 800420e:	e033      	b.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	2101      	movs	r1, #1
 8004216:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2241      	movs	r2, #65	; 0x41
 800421c:	2124      	movs	r1, #36	; 0x24
 800421e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2101      	movs	r1, #1
 800422c:	438a      	bics	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2241      	movs	r2, #65	; 0x41
 8004266:	2120      	movs	r1, #32
 8004268:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}
 8004280:	fffff0ff 	.word	0xfffff0ff

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e301      	b.n	800489a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	4013      	ands	r3, r2
 800429e:	d100      	bne.n	80042a2 <HAL_RCC_OscConfig+0x1e>
 80042a0:	e08d      	b.n	80043be <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042a2:	4bc3      	ldr	r3, [pc, #780]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	220c      	movs	r2, #12
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d00e      	beq.n	80042cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ae:	4bc0      	ldr	r3, [pc, #768]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	220c      	movs	r2, #12
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d116      	bne.n	80042e8 <HAL_RCC_OscConfig+0x64>
 80042ba:	4bbd      	ldr	r3, [pc, #756]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	025b      	lsls	r3, r3, #9
 80042c2:	401a      	ands	r2, r3
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4bb8      	ldr	r3, [pc, #736]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	4013      	ands	r3, r2
 80042d6:	d100      	bne.n	80042da <HAL_RCC_OscConfig+0x56>
 80042d8:	e070      	b.n	80043bc <HAL_RCC_OscConfig+0x138>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <HAL_RCC_OscConfig+0x60>
 80042e2:	e06b      	b.n	80043bc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e2d8      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x7c>
 80042f0:	4baf      	ldr	r3, [pc, #700]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4bae      	ldr	r3, [pc, #696]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	0249      	lsls	r1, r1, #9
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e02f      	b.n	8004360 <HAL_RCC_OscConfig+0xdc>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_OscConfig+0x9e>
 8004308:	4ba9      	ldr	r3, [pc, #676]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4ba8      	ldr	r3, [pc, #672]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800430e:	49a9      	ldr	r1, [pc, #676]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004310:	400a      	ands	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	4ba6      	ldr	r3, [pc, #664]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4ba5      	ldr	r3, [pc, #660]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800431a:	49a7      	ldr	r1, [pc, #668]	; (80045b8 <HAL_RCC_OscConfig+0x334>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e01e      	b.n	8004360 <HAL_RCC_OscConfig+0xdc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10e      	bne.n	8004348 <HAL_RCC_OscConfig+0xc4>
 800432a:	4ba1      	ldr	r3, [pc, #644]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4ba0      	ldr	r3, [pc, #640]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	02c9      	lsls	r1, r1, #11
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	4b9d      	ldr	r3, [pc, #628]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b9c      	ldr	r3, [pc, #624]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	0249      	lsls	r1, r1, #9
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xdc>
 8004348:	4b99      	ldr	r3, [pc, #612]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b98      	ldr	r3, [pc, #608]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800434e:	4999      	ldr	r1, [pc, #612]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004350:	400a      	ands	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b96      	ldr	r3, [pc, #600]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b95      	ldr	r3, [pc, #596]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800435a:	4997      	ldr	r1, [pc, #604]	; (80045b8 <HAL_RCC_OscConfig+0x334>)
 800435c:	400a      	ands	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d014      	beq.n	8004392 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fe28 	bl	8002fbc <HAL_GetTick>
 800436c:	0003      	movs	r3, r0
 800436e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004372:	f7fe fe23 	bl	8002fbc <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e28a      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004384:	4b8a      	ldr	r3, [pc, #552]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	029b      	lsls	r3, r3, #10
 800438c:	4013      	ands	r3, r2
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0xee>
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fe13 	bl	8002fbc <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe fe0e 	bl	8002fbc <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e275      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	4b80      	ldr	r3, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x118>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2202      	movs	r2, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d100      	bne.n	80043ca <HAL_RCC_OscConfig+0x146>
 80043c8:	e069      	b.n	800449e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043ca:	4b79      	ldr	r3, [pc, #484]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	220c      	movs	r2, #12
 80043d0:	4013      	ands	r3, r2
 80043d2:	d00b      	beq.n	80043ec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043d4:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	220c      	movs	r2, #12
 80043da:	4013      	ands	r3, r2
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d11c      	bne.n	800441a <HAL_RCC_OscConfig+0x196>
 80043e0:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	025b      	lsls	r3, r3, #9
 80043e8:	4013      	ands	r3, r2
 80043ea:	d116      	bne.n	800441a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ec:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2202      	movs	r2, #2
 80043f2:	4013      	ands	r3, r2
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e24b      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b6b      	ldr	r3, [pc, #428]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22f8      	movs	r2, #248	; 0xf8
 8004408:	4393      	bics	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00da      	lsls	r2, r3, #3
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004418:	e041      	b.n	800449e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004428:	2101      	movs	r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fe fdc5 	bl	8002fbc <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004438:	f7fe fdc0 	bl	8002fbc <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e227      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	d0f1      	beq.n	8004438 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	22f8      	movs	r2, #248	; 0xf8
 800445a:	4393      	bics	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00da      	lsls	r2, r3, #3
 8004464:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e018      	b.n	800449e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b4f      	ldr	r3, [pc, #316]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004472:	2101      	movs	r1, #1
 8004474:	438a      	bics	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fda0 	bl	8002fbc <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe fd9b 	bl	8002fbc <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e202      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004494:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d1f1      	bne.n	8004482 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2208      	movs	r2, #8
 80044a4:	4013      	ands	r3, r2
 80044a6:	d036      	beq.n	8004516 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b0:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80044b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b4:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	430a      	orrs	r2, r1
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fe fd7e 	bl	8002fbc <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fe fd79 	bl	8002fbc <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1e0      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2202      	movs	r2, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d0f1      	beq.n	80044c6 <HAL_RCC_OscConfig+0x242>
 80044e2:	e018      	b.n	8004516 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fe fd64 	bl	8002fbc <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fe fd5f 	bl	8002fbc <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e1c6      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d1f1      	bne.n	80044fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	d100      	bne.n	8004522 <HAL_RCC_OscConfig+0x29e>
 8004520:	e0b4      	b.n	800468c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	201f      	movs	r0, #31
 8004524:	183b      	adds	r3, r7, r0
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	055b      	lsls	r3, r3, #21
 8004532:	4013      	ands	r3, r2
 8004534:	d110      	bne.n	8004558 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 800453c:	2180      	movs	r1, #128	; 0x80
 800453e:	0549      	lsls	r1, r1, #21
 8004540:	430a      	orrs	r2, r1
 8004542:	61da      	str	r2, [r3, #28]
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004552:	183b      	adds	r3, r7, r0
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_RCC_OscConfig+0x338>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4013      	ands	r3, r2
 8004562:	d11a      	bne.n	800459a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <HAL_RCC_OscConfig+0x338>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCC_OscConfig+0x338>)
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	0049      	lsls	r1, r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004572:	f7fe fd23 	bl	8002fbc <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fe fd1e 	bl	8002fbc <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e185      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_OscConfig+0x338>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4013      	ands	r3, r2
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10e      	bne.n	80045c0 <HAL_RCC_OscConfig+0x33c>
 80045a2:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <HAL_RCC_OscConfig+0x32c>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	621a      	str	r2, [r3, #32]
 80045ae:	e035      	b.n	800461c <HAL_RCC_OscConfig+0x398>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	fffeffff 	.word	0xfffeffff
 80045b8:	fffbffff 	.word	0xfffbffff
 80045bc:	40007000 	.word	0x40007000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCC_OscConfig+0x35e>
 80045c8:	4bb6      	ldr	r3, [pc, #728]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	4bb5      	ldr	r3, [pc, #724]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	438a      	bics	r2, r1
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	4bb3      	ldr	r3, [pc, #716]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	4bb2      	ldr	r3, [pc, #712]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045da:	2104      	movs	r1, #4
 80045dc:	438a      	bics	r2, r1
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	e01c      	b.n	800461c <HAL_RCC_OscConfig+0x398>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x380>
 80045ea:	4bae      	ldr	r3, [pc, #696]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	4bad      	ldr	r3, [pc, #692]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045f0:	2104      	movs	r1, #4
 80045f2:	430a      	orrs	r2, r1
 80045f4:	621a      	str	r2, [r3, #32]
 80045f6:	4bab      	ldr	r3, [pc, #684]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	4baa      	ldr	r3, [pc, #680]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80045fc:	2101      	movs	r1, #1
 80045fe:	430a      	orrs	r2, r1
 8004600:	621a      	str	r2, [r3, #32]
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0x398>
 8004604:	4ba7      	ldr	r3, [pc, #668]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	4ba6      	ldr	r3, [pc, #664]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800460a:	2101      	movs	r1, #1
 800460c:	438a      	bics	r2, r1
 800460e:	621a      	str	r2, [r3, #32]
 8004610:	4ba4      	ldr	r3, [pc, #656]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	4ba3      	ldr	r3, [pc, #652]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004616:	2104      	movs	r1, #4
 8004618:	438a      	bics	r2, r1
 800461a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d014      	beq.n	800464e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fe fcca 	bl	8002fbc <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e009      	b.n	8004642 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fcc5 	bl	8002fbc <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	4a9b      	ldr	r2, [pc, #620]	; (80048a8 <HAL_RCC_OscConfig+0x624>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e12b      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	4b98      	ldr	r3, [pc, #608]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x3aa>
 800464c:	e013      	b.n	8004676 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464e:	f7fe fcb5 	bl	8002fbc <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	e009      	b.n	800466c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fe fcb0 	bl	8002fbc <HAL_GetTick>
 800465c:	0002      	movs	r2, r0
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4a91      	ldr	r2, [pc, #580]	; (80048a8 <HAL_RCC_OscConfig+0x624>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e116      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466c:	4b8d      	ldr	r3, [pc, #564]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	2202      	movs	r2, #2
 8004672:	4013      	ands	r3, r2
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004676:	231f      	movs	r3, #31
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004686:	4989      	ldr	r1, [pc, #548]	; (80048ac <HAL_RCC_OscConfig+0x628>)
 8004688:	400a      	ands	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2210      	movs	r2, #16
 8004692:	4013      	ands	r3, r2
 8004694:	d063      	beq.n	800475e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d12a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800469e:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a2:	4b80      	ldr	r3, [pc, #512]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046a4:	2104      	movs	r1, #4
 80046a6:	430a      	orrs	r2, r1
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80046aa:	4b7e      	ldr	r3, [pc, #504]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ae:	4b7d      	ldr	r3, [pc, #500]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe fc81 	bl	8002fbc <HAL_GetTick>
 80046ba:	0003      	movs	r3, r0
 80046bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046c0:	f7fe fc7c 	bl	8002fbc <HAL_GetTick>
 80046c4:	0002      	movs	r2, r0
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0e3      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80046d2:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d0f1      	beq.n	80046c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046dc:	4b71      	ldr	r3, [pc, #452]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	22f8      	movs	r2, #248	; 0xf8
 80046e2:	4393      	bics	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	00da      	lsls	r2, r3, #3
 80046ec:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046ee:	430a      	orrs	r2, r1
 80046f0:	635a      	str	r2, [r3, #52]	; 0x34
 80046f2:	e034      	b.n	800475e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	3305      	adds	r3, #5
 80046fa:	d111      	bne.n	8004720 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80046fc:	4b69      	ldr	r3, [pc, #420]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80046fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004702:	2104      	movs	r1, #4
 8004704:	438a      	bics	r2, r1
 8004706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004708:	4b66      	ldr	r3, [pc, #408]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	22f8      	movs	r2, #248	; 0xf8
 800470e:	4393      	bics	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	00da      	lsls	r2, r3, #3
 8004718:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800471a:	430a      	orrs	r2, r1
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
 800471e:	e01e      	b.n	800475e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004720:	4b60      	ldr	r3, [pc, #384]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004726:	2104      	movs	r1, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800472e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004730:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fe fc40 	bl	8002fbc <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004742:	f7fe fc3b 	bl	8002fbc <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0a2      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004754:	4b53      	ldr	r3, [pc, #332]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d100      	bne.n	8004768 <HAL_RCC_OscConfig+0x4e4>
 8004766:	e097      	b.n	8004898 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	220c      	movs	r2, #12
 800476e:	4013      	ands	r3, r2
 8004770:	2b08      	cmp	r3, #8
 8004772:	d100      	bne.n	8004776 <HAL_RCC_OscConfig+0x4f2>
 8004774:	e06b      	b.n	800484e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d14c      	bne.n	8004818 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004784:	494a      	ldr	r1, [pc, #296]	; (80048b0 <HAL_RCC_OscConfig+0x62c>)
 8004786:	400a      	ands	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe fc17 	bl	8002fbc <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004794:	f7fe fc12 	bl	8002fbc <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e079      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	049b      	lsls	r3, r3, #18
 80047ae:	4013      	ands	r3, r2
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b2:	4b3c      	ldr	r3, [pc, #240]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	220f      	movs	r2, #15
 80047b8:	4393      	bics	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a3a      	ldr	r2, [pc, #232]	; (80048b4 <HAL_RCC_OscConfig+0x630>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	431a      	orrs	r2, r3
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	0449      	lsls	r1, r1, #17
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fe fbe5 	bl	8002fbc <HAL_GetTick>
 80047f2:	0003      	movs	r3, r0
 80047f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fe fbe0 	bl	8002fbc <HAL_GetTick>
 80047fc:	0002      	movs	r2, r0
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e047      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	049b      	lsls	r3, r3, #18
 8004812:	4013      	ands	r3, r2
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x574>
 8004816:	e03f      	b.n	8004898 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800481e:	4924      	ldr	r1, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x62c>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fe fbca 	bl	8002fbc <HAL_GetTick>
 8004828:	0003      	movs	r3, r0
 800482a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe fbc5 	bl	8002fbc <HAL_GetTick>
 8004832:	0002      	movs	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e02c      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	049b      	lsls	r3, r3, #18
 8004848:	4013      	ands	r3, r2
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x5aa>
 800484c:	e024      	b.n	8004898 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e01f      	b.n	800489a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCC_OscConfig+0x620>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	401a      	ands	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	429a      	cmp	r2, r3
 8004874:	d10e      	bne.n	8004894 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	220f      	movs	r2, #15
 800487a:	401a      	ands	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	23f0      	movs	r3, #240	; 0xf0
 8004888:	039b      	lsls	r3, r3, #14
 800488a:	401a      	ands	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b008      	add	sp, #32
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	40021000 	.word	0x40021000
 80048a8:	00001388 	.word	0x00001388
 80048ac:	efffffff 	.word	0xefffffff
 80048b0:	feffffff 	.word	0xfeffffff
 80048b4:	ffc2ffff 	.word	0xffc2ffff

080048b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0b3      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2201      	movs	r2, #1
 80048d2:	4013      	ands	r3, r2
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d911      	bls.n	80048fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4393      	bics	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	4b55      	ldr	r3, [pc, #340]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e09a      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d015      	beq.n	8004934 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2204      	movs	r2, #4
 800490e:	4013      	ands	r3, r2
 8004910:	d006      	beq.n	8004920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004912:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004918:	21e0      	movs	r1, #224	; 0xe0
 800491a:	00c9      	lsls	r1, r1, #3
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	22f0      	movs	r2, #240	; 0xf0
 8004926:	4393      	bics	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	4b44      	ldr	r3, [pc, #272]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	d040      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	4013      	ands	r3, r2
 8004950:	d114      	bne.n	800497c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06e      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	049b      	lsls	r3, r3, #18
 8004966:	4013      	ands	r3, r2
 8004968:	d108      	bne.n	800497c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e062      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b34      	ldr	r3, [pc, #208]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2202      	movs	r2, #2
 8004974:	4013      	ands	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e05b      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497c:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2203      	movs	r2, #3
 8004982:	4393      	bics	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fe fb14 	bl	8002fbc <HAL_GetTick>
 8004994:	0003      	movs	r3, r0
 8004996:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004998:	e009      	b.n	80049ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499a:	f7fe fb0f 	bl	8002fbc <HAL_GetTick>
 800499e:	0002      	movs	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <HAL_RCC_ClockConfig+0x18c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e042      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	220c      	movs	r2, #12
 80049b4:	401a      	ands	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1ec      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	4013      	ands	r3, r2
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d211      	bcs.n	80049f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2201      	movs	r2, #1
 80049d4:	4393      	bics	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_RCC_ClockConfig+0x184>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2201      	movs	r2, #1
 80049e6:	4013      	ands	r3, r2
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e020      	b.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2204      	movs	r2, #4
 80049f8:	4013      	ands	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <HAL_RCC_ClockConfig+0x190>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a10:	f000 f820 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a14:	0001      	movs	r1, r0
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_ClockConfig+0x188>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x194>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	000a      	movs	r2, r1
 8004a26:	40da      	lsrs	r2, r3
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x198>)
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fe fa7f 	bl	8002f30 <HAL_InitTick>
  
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	00001388 	.word	0x00001388
 8004a48:	fffff8ff 	.word	0xfffff8ff
 8004a4c:	08006348 	.word	0x08006348
 8004a50:	20000004 	.word	0x20000004

08004a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b08f      	sub	sp, #60	; 0x3c
 8004a58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004a5a:	2314      	movs	r3, #20
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a62:	c313      	stmia	r3!, {r0, r1, r4}
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a6e:	c313      	stmia	r3!, {r0, r1, r4}
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a78:	2300      	movs	r3, #0
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	220c      	movs	r2, #12
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d002      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x4a>
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d003      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x50>
 8004a9c:	e02d      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004aa2:	e02d      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	0c9b      	lsrs	r3, r3, #18
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2214      	movs	r2, #20
 8004aae:	18ba      	adds	r2, r7, r2
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	220f      	movs	r2, #15
 8004aba:	4013      	ands	r3, r2
 8004abc:	1d3a      	adds	r2, r7, #4
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	025b      	lsls	r3, r3, #9
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ace:	4812      	ldr	r0, [pc, #72]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ad0:	f7fb fb1a 	bl	8000108 <__udivsi3>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	4353      	muls	r3, r2
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ade:	e009      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ae2:	000a      	movs	r2, r1
 8004ae4:	0152      	lsls	r2, r2, #5
 8004ae6:	1a52      	subs	r2, r2, r1
 8004ae8:	0193      	lsls	r3, r2, #6
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	185b      	adds	r3, r3, r1
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004afe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b00f      	add	sp, #60	; 0x3c
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	080062a8 	.word	0x080062a8
 8004b10:	080062b8 	.word	0x080062b8
 8004b14:	40021000 	.word	0x40021000
 8004b18:	007a1200 	.word	0x007a1200

08004b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	025b      	lsls	r3, r3, #9
 8004b34:	4013      	ands	r3, r2
 8004b36:	d100      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b38:	e08e      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2017      	movs	r0, #23
 8004b3c:	183b      	adds	r3, r7, r0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b5f      	ldr	r3, [pc, #380]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	055b      	lsls	r3, r3, #21
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d110      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b5c      	ldr	r3, [pc, #368]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	0549      	lsls	r1, r1, #21
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
 8004b5c:	4b58      	ldr	r3, [pc, #352]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	055b      	lsls	r3, r3, #21
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6a:	183b      	adds	r3, r7, r0
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d11a      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7c:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b50      	ldr	r3, [pc, #320]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	0049      	lsls	r1, r1, #1
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fa17 	bl	8002fbc <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	e008      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b94:	f7fe fa12 	bl	8002fbc <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e087      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba6:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bb2:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	23c0      	movs	r3, #192	; 0xc0
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d034      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	23c0      	movs	r3, #192	; 0xc0
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d02c      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bde:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	0249      	lsls	r1, r1, #9
 8004be8:	430a      	orrs	r2, r1
 8004bea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	4b33      	ldr	r3, [pc, #204]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bf2:	4936      	ldr	r1, [pc, #216]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4013      	ands	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fe f9d9 	bl	8002fbc <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	e009      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fe f9d4 	bl	8002fbc <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e048      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c42:	2317      	movs	r3, #23
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c52:	4920      	ldr	r1, [pc, #128]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c54:	400a      	ands	r2, r1
 8004c56:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	2203      	movs	r2, #3
 8004c68:	4393      	bics	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c72:	430a      	orrs	r2, r1
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2210      	movs	r2, #16
 8004c86:	4393      	bics	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2240      	movs	r2, #64	; 0x40
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b006      	add	sp, #24
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	fffffcff 	.word	0xfffffcff
 8004ccc:	fffeffff 	.word	0xfffeffff
 8004cd0:	00001388 	.word	0x00001388
 8004cd4:	efffffff 	.word	0xefffffff

08004cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e042      	b.n	8004d70 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	223d      	movs	r2, #61	; 0x3d
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	223c      	movs	r2, #60	; 0x3c
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7fe f813 	bl	8002d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223d      	movs	r2, #61	; 0x3d
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	0019      	movs	r1, r3
 8004d18:	0010      	movs	r0, r2
 8004d1a:	f000 fc8d 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2246      	movs	r2, #70	; 0x46
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	223e      	movs	r2, #62	; 0x3e
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	223f      	movs	r2, #63	; 0x3f
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2240      	movs	r2, #64	; 0x40
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2241      	movs	r2, #65	; 0x41
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2242      	movs	r2, #66	; 0x42
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2243      	movs	r2, #67	; 0x43
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2244      	movs	r2, #68	; 0x44
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2245      	movs	r2, #69	; 0x45
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	223d      	movs	r2, #61	; 0x3d
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	223d      	movs	r2, #61	; 0x3d
 8004d84:	5c9b      	ldrb	r3, [r3, r2]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d001      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e03b      	b.n	8004e08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	223d      	movs	r2, #61	; 0x3d
 8004d94:	2102      	movs	r1, #2
 8004d96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2101      	movs	r1, #1
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIM_Base_Start_IT+0x98>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x5a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x5a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x5a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2207      	movs	r2, #7
 8004dda:	4013      	ands	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d010      	beq.n	8004e06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2101      	movs	r1, #1
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e007      	b.n	8004e06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b004      	add	sp, #16
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40014000 	.word	0x40014000

08004e1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2101      	movs	r1, #1
 8004e30:	438a      	bics	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <HAL_TIM_Base_Stop_IT+0x54>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d10d      	bne.n	8004e5c <HAL_TIM_Base_Stop_IT+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <HAL_TIM_Base_Stop_IT+0x58>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_Base_Stop_IT+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2101      	movs	r1, #1
 8004e58:	438a      	bics	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223d      	movs	r2, #61	; 0x3d
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	00001111 	.word	0x00001111
 8004e74:	00000444 	.word	0x00000444

08004e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e042      	b.n	8004f10 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	223d      	movs	r2, #61	; 0x3d
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223c      	movs	r2, #60	; 0x3c
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 f839 	bl	8004f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223d      	movs	r2, #61	; 0x3d
 8004eaa:	2102      	movs	r1, #2
 8004eac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	0010      	movs	r0, r2
 8004eba:	f000 fbbd 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2246      	movs	r2, #70	; 0x46
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	223e      	movs	r2, #62	; 0x3e
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	223f      	movs	r2, #63	; 0x3f
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2240      	movs	r2, #64	; 0x40
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2241      	movs	r2, #65	; 0x41
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2242      	movs	r2, #66	; 0x42
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2243      	movs	r2, #67	; 0x43
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2244      	movs	r2, #68	; 0x44
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2245      	movs	r2, #69	; 0x45
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	; 0x3d
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x22>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	223e      	movs	r2, #62	; 0x3e
 8004f3c:	5c9b      	ldrb	r3, [r3, r2]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	1e5a      	subs	r2, r3, #1
 8004f44:	4193      	sbcs	r3, r2
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e01f      	b.n	8004f8a <HAL_TIM_PWM_Start+0x62>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d108      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x3a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	223f      	movs	r2, #63	; 0x3f
 8004f54:	5c9b      	ldrb	r3, [r3, r2]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	1e5a      	subs	r2, r3, #1
 8004f5c:	4193      	sbcs	r3, r2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	e013      	b.n	8004f8a <HAL_TIM_PWM_Start+0x62>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d108      	bne.n	8004f7a <HAL_TIM_PWM_Start+0x52>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	5c9b      	ldrb	r3, [r3, r2]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	4193      	sbcs	r3, r2
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e007      	b.n	8004f8a <HAL_TIM_PWM_Start+0x62>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2241      	movs	r2, #65	; 0x41
 8004f7e:	5c9b      	ldrb	r3, [r3, r2]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	1e5a      	subs	r2, r3, #1
 8004f86:	4193      	sbcs	r3, r2
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e074      	b.n	800507c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x7a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	223e      	movs	r2, #62	; 0x3e
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	5499      	strb	r1, [r3, r2]
 8004fa0:	e013      	b.n	8004fca <HAL_TIM_PWM_Start+0xa2>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x8a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223f      	movs	r2, #63	; 0x3f
 8004fac:	2102      	movs	r1, #2
 8004fae:	5499      	strb	r1, [r3, r2]
 8004fb0:	e00b      	b.n	8004fca <HAL_TIM_PWM_Start+0xa2>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_PWM_Start+0x9a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	5499      	strb	r1, [r3, r2]
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_PWM_Start+0xa2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2241      	movs	r2, #65	; 0x41
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fe46 	bl	8005c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_TIM_PWM_Start+0x15c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_PWM_Start+0xd8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a28      	ldr	r2, [pc, #160]	; (8005088 <HAL_TIM_PWM_Start+0x160>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_PWM_Start+0xd8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a26      	ldr	r2, [pc, #152]	; (800508c <HAL_TIM_PWM_Start+0x164>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0xd8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a25      	ldr	r2, [pc, #148]	; (8005090 <HAL_TIM_PWM_Start+0x168>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_PWM_Start+0xdc>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0xde>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0209      	lsls	r1, r1, #8
 8005018:	430a      	orrs	r2, r1
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_TIM_PWM_Start+0x15c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <HAL_TIM_PWM_Start+0x11e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	05db      	lsls	r3, r3, #23
 800502e:	429a      	cmp	r2, r3
 8005030:	d009      	beq.n	8005046 <HAL_TIM_PWM_Start+0x11e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_TIM_PWM_Start+0x16c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_PWM_Start+0x11e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a11      	ldr	r2, [pc, #68]	; (8005088 <HAL_TIM_PWM_Start+0x160>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2207      	movs	r2, #7
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d010      	beq.n	800507a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e007      	b.n	800507a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2101      	movs	r1, #1
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b004      	add	sp, #16
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800
 8005094:	40000400 	.word	0x40000400

08005098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2202      	movs	r2, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d124      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d11d      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2203      	movs	r2, #3
 80050c2:	4252      	negs	r2, r2
 80050c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2203      	movs	r2, #3
 80050d4:	4013      	ands	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 fa94 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e007      	b.n	80050f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 fa87 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f000 fa93 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2204      	movs	r2, #4
 8005100:	4013      	ands	r3, r2
 8005102:	2b04      	cmp	r3, #4
 8005104:	d125      	bne.n	8005152 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2204      	movs	r2, #4
 800510e:	4013      	ands	r3, r2
 8005110:	2b04      	cmp	r3, #4
 8005112:	d11e      	bne.n	8005152 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2205      	movs	r2, #5
 800511a:	4252      	negs	r2, r2
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	23c0      	movs	r3, #192	; 0xc0
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4013      	ands	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f000 fa67 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 800513a:	e007      	b.n	800514c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 fa5a 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 fa66 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2208      	movs	r2, #8
 800515a:	4013      	ands	r3, r2
 800515c:	2b08      	cmp	r3, #8
 800515e:	d124      	bne.n	80051aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2208      	movs	r2, #8
 8005168:	4013      	ands	r3, r2
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11d      	bne.n	80051aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2209      	movs	r2, #9
 8005174:	4252      	negs	r2, r2
 8005176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	2203      	movs	r2, #3
 8005186:	4013      	ands	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fa3b 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 8005192:	e007      	b.n	80051a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 fa2e 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 fa3a 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d125      	bne.n	8005204 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2210      	movs	r2, #16
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d11e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2211      	movs	r2, #17
 80051cc:	4252      	negs	r2, r2
 80051ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2208      	movs	r2, #8
 80051d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	23c0      	movs	r3, #192	; 0xc0
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 fa0e 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e007      	b.n	80051fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 fa01 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 fa0d 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10f      	bne.n	8005232 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	4013      	ands	r3, r2
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2202      	movs	r2, #2
 8005226:	4252      	negs	r2, r2
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	0018      	movs	r0, r3
 800522e:	f7fd fce9 	bl	8002c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	4013      	ands	r3, r2
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d10f      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	4013      	ands	r3, r2
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d108      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2281      	movs	r2, #129	; 0x81
 8005254:	4252      	negs	r2, r2
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	0018      	movs	r0, r3
 800525c:	f000 fd8c 	bl	8005d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2240      	movs	r2, #64	; 0x40
 8005268:	4013      	ands	r3, r2
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d10f      	bne.n	800528e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2240      	movs	r2, #64	; 0x40
 8005276:	4013      	ands	r3, r2
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d108      	bne.n	800528e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2241      	movs	r2, #65	; 0x41
 8005282:	4252      	negs	r2, r2
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0018      	movs	r0, r3
 800528a:	f000 f9cd 	bl	8005628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2220      	movs	r2, #32
 8005296:	4013      	ands	r3, r2
 8005298:	2b20      	cmp	r3, #32
 800529a:	d10f      	bne.n	80052bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d108      	bne.n	80052bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2221      	movs	r2, #33	; 0x21
 80052b0:	4252      	negs	r2, r2
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 fd56 	bl	8005d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d0:	2317      	movs	r3, #23
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	223c      	movs	r2, #60	; 0x3c
 80052dc:	5c9b      	ldrb	r3, [r3, r2]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e0ad      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	223c      	movs	r2, #60	; 0x3c
 80052ea:	2101      	movs	r1, #1
 80052ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d100      	bne.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80052f4:	e076      	b.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d900      	bls.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80052fc:	e095      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x166>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d04e      	beq.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d900      	bls.n	800530c <HAL_TIM_PWM_ConfigChannel+0x48>
 800530a:	e08e      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x166>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_PWM_ConfigChannel+0x56>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d021      	beq.n	800535c <HAL_TIM_PWM_ConfigChannel+0x98>
 8005318:	e087      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	0011      	movs	r1, r2
 8005322:	0018      	movs	r0, r3
 8005324:	f000 fa08 	bl	8005738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2108      	movs	r1, #8
 8005334:	430a      	orrs	r2, r1
 8005336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2104      	movs	r1, #4
 8005344:	438a      	bics	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6999      	ldr	r1, [r3, #24]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	619a      	str	r2, [r3, #24]
      break;
 800535a:	e06b      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f000 fa6f 	bl	8005848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	0109      	lsls	r1, r1, #4
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4931      	ldr	r1, [pc, #196]	; (800544c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005388:	400a      	ands	r2, r1
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
      break;
 80053a0:	e048      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0011      	movs	r1, r2
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fad0 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2108      	movs	r1, #8
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2104      	movs	r1, #4
 80053cc:	438a      	bics	r2, r1
 80053ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69d9      	ldr	r1, [r3, #28]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	61da      	str	r2, [r3, #28]
      break;
 80053e2:	e027      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0011      	movs	r1, r2
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 fb35 	bl	8005a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	0109      	lsls	r1, r1, #4
 8005400:	430a      	orrs	r2, r1
 8005402:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	490f      	ldr	r1, [pc, #60]	; (800544c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005410:	400a      	ands	r2, r1
 8005412:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69d9      	ldr	r1, [r3, #28]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
      break;
 8005428:	e004      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800542a:	2317      	movs	r3, #23
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
      break;
 8005432:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	223c      	movs	r2, #60	; 0x3c
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]

  return status;
 800543c:	2317      	movs	r3, #23
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	781b      	ldrb	r3, [r3, #0]
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b006      	add	sp, #24
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	fffffbff 	.word	0xfffffbff

08005450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	230f      	movs	r3, #15
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	223c      	movs	r2, #60	; 0x3c
 8005466:	5c9b      	ldrb	r3, [r3, r2]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIM_ConfigClockSource+0x20>
 800546c:	2302      	movs	r3, #2
 800546e:	e0bc      	b.n	80055ea <HAL_TIM_ConfigClockSource+0x19a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223c      	movs	r2, #60	; 0x3c
 8005474:	2101      	movs	r1, #1
 8005476:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	223d      	movs	r2, #61	; 0x3d
 800547c:	2102      	movs	r1, #2
 800547e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2277      	movs	r2, #119	; 0x77
 800548c:	4393      	bics	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a58      	ldr	r2, [pc, #352]	; (80055f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005494:	4013      	ands	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	0192      	lsls	r2, r2, #6
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xde>
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	0192      	lsls	r2, r2, #6
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d900      	bls.n	80054b6 <HAL_TIM_ConfigClockSource+0x66>
 80054b4:	e088      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	0152      	lsls	r2, r2, #5
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d100      	bne.n	80054c0 <HAL_TIM_ConfigClockSource+0x70>
 80054be:	e088      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x182>
 80054c0:	2280      	movs	r2, #128	; 0x80
 80054c2:	0152      	lsls	r2, r2, #5
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d900      	bls.n	80054ca <HAL_TIM_ConfigClockSource+0x7a>
 80054c8:	e07e      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054ca:	2b70      	cmp	r3, #112	; 0x70
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0xb0>
 80054ce:	d900      	bls.n	80054d2 <HAL_TIM_ConfigClockSource+0x82>
 80054d0:	e07a      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054d2:	2b60      	cmp	r3, #96	; 0x60
 80054d4:	d04f      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x126>
 80054d6:	d900      	bls.n	80054da <HAL_TIM_ConfigClockSource+0x8a>
 80054d8:	e076      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054da:	2b50      	cmp	r3, #80	; 0x50
 80054dc:	d03b      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x106>
 80054de:	d900      	bls.n	80054e2 <HAL_TIM_ConfigClockSource+0x92>
 80054e0:	e072      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d057      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x146>
 80054e6:	d900      	bls.n	80054ea <HAL_TIM_ConfigClockSource+0x9a>
 80054e8:	e06e      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054ea:	2b30      	cmp	r3, #48	; 0x30
 80054ec:	d063      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x166>
 80054ee:	d86b      	bhi.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d060      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x166>
 80054f4:	d868      	bhi.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d05d      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x166>
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d05b      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x166>
 80054fe:	e063      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6899      	ldr	r1, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f000 fb88 	bl	8005c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2277      	movs	r2, #119	; 0x77
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e052      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f000 fb71 	bl	8005c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	01c9      	lsls	r1, r1, #7
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
      break;
 8005554:	e03e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	001a      	movs	r2, r3
 8005564:	f000 fae4 	bl	8005b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2150      	movs	r1, #80	; 0x50
 800556e:	0018      	movs	r0, r3
 8005570:	f000 fb3e 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 8005574:	e02e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	001a      	movs	r2, r3
 8005584:	f000 fb02 	bl	8005b8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2160      	movs	r1, #96	; 0x60
 800558e:	0018      	movs	r0, r3
 8005590:	f000 fb2e 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 8005594:	e01e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	001a      	movs	r2, r3
 80055a4:	f000 fac4 	bl	8005b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2140      	movs	r1, #64	; 0x40
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 fb1e 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e00e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	0019      	movs	r1, r3
 80055c0:	0010      	movs	r0, r2
 80055c2:	f000 fb15 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 80055c6:	e005      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80055c8:	230f      	movs	r3, #15
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80055d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	223d      	movs	r2, #61	; 0x3d
 80055d8:	2101      	movs	r1, #1
 80055da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	223c      	movs	r2, #60	; 0x3c
 80055e0:	2100      	movs	r1, #0
 80055e2:	5499      	strb	r1, [r3, r2]

  return status;
 80055e4:	230f      	movs	r3, #15
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	781b      	ldrb	r3, [r3, #0]
}
 80055ea:	0018      	movs	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	b004      	add	sp, #16
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	ffff00ff 	.word	0xffff00ff

080055f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <TIM_Base_SetConfig+0xe4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d008      	beq.n	8005662 <TIM_Base_SetConfig+0x2a>
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	05db      	lsls	r3, r3, #23
 8005656:	429a      	cmp	r2, r3
 8005658:	d003      	beq.n	8005662 <TIM_Base_SetConfig+0x2a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a30      	ldr	r2, [pc, #192]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d108      	bne.n	8005674 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2270      	movs	r2, #112	; 0x70
 8005666:	4393      	bics	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a29      	ldr	r2, [pc, #164]	; (800571c <TIM_Base_SetConfig+0xe4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	05db      	lsls	r3, r3, #23
 8005682:	429a      	cmp	r2, r3
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a25      	ldr	r2, [pc, #148]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <TIM_Base_SetConfig+0xec>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <TIM_Base_SetConfig+0xf4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x76>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a21      	ldr	r2, [pc, #132]	; (8005730 <TIM_Base_SetConfig+0xf8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <TIM_Base_SetConfig+0xfc>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2280      	movs	r2, #128	; 0x80
 80056c4:	4393      	bics	r3, r2
 80056c6:	001a      	movs	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a0c      	ldr	r2, [pc, #48]	; (800571c <TIM_Base_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xce>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xce>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a0c      	ldr	r2, [pc, #48]	; (800572c <TIM_Base_SetConfig+0xf4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xce>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <TIM_Base_SetConfig+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d103      	bne.n	800570e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	615a      	str	r2, [r3, #20]
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40000400 	.word	0x40000400
 8005724:	40002000 	.word	0x40002000
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800
 8005734:	fffffcff 	.word	0xfffffcff

08005738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	2201      	movs	r2, #1
 8005748:	4393      	bics	r3, r2
 800574a:	001a      	movs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2270      	movs	r2, #112	; 0x70
 8005766:	4393      	bics	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2203      	movs	r2, #3
 800576e:	4393      	bics	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2202      	movs	r2, #2
 8005780:	4393      	bics	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <TIM_OC1_SetConfig+0xf8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_OC1_SetConfig+0x76>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a26      	ldr	r2, [pc, #152]	; (8005834 <TIM_OC1_SetConfig+0xfc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_OC1_SetConfig+0x76>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a25      	ldr	r2, [pc, #148]	; (8005838 <TIM_OC1_SetConfig+0x100>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC1_SetConfig+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a24      	ldr	r2, [pc, #144]	; (800583c <TIM_OC1_SetConfig+0x104>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10c      	bne.n	80057c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2208      	movs	r2, #8
 80057b2:	4393      	bics	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2204      	movs	r2, #4
 80057c4:	4393      	bics	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <TIM_OC1_SetConfig+0xf8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_OC1_SetConfig+0xb0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_OC1_SetConfig+0xfc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_OC1_SetConfig+0xb0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC1_SetConfig+0x100>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC1_SetConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC1_SetConfig+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <TIM_OC1_SetConfig+0x108>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <TIM_OC1_SetConfig+0x10c>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b006      	add	sp, #24
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800
 8005840:	fffffeff 	.word	0xfffffeff
 8005844:	fffffdff 	.word	0xfffffdff

08005848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	2210      	movs	r2, #16
 8005858:	4393      	bics	r3, r2
 800585a:	001a      	movs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a2e      	ldr	r2, [pc, #184]	; (8005930 <TIM_OC2_SetConfig+0xe8>)
 8005876:	4013      	ands	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a2d      	ldr	r2, [pc, #180]	; (8005934 <TIM_OC2_SetConfig+0xec>)
 800587e:	4013      	ands	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2220      	movs	r2, #32
 8005892:	4393      	bics	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a24      	ldr	r2, [pc, #144]	; (8005938 <TIM_OC2_SetConfig+0xf0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10d      	bne.n	80058c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	4393      	bics	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	4393      	bics	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <TIM_OC2_SetConfig+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_OC2_SetConfig+0x9e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1a      	ldr	r2, [pc, #104]	; (800593c <TIM_OC2_SetConfig+0xf4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_OC2_SetConfig+0x9e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <TIM_OC2_SetConfig+0xf8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC2_SetConfig+0x9e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <TIM_OC2_SetConfig+0xfc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d113      	bne.n	800590e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC2_SetConfig+0x100>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC2_SetConfig+0x104>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b006      	add	sp, #24
 800592e:	bd80      	pop	{r7, pc}
 8005930:	ffff8fff 	.word	0xffff8fff
 8005934:	fffffcff 	.word	0xfffffcff
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	fffffbff 	.word	0xfffffbff
 800594c:	fffff7ff 	.word	0xfffff7ff

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	4a35      	ldr	r2, [pc, #212]	; (8005a34 <TIM_OC3_SetConfig+0xe4>)
 8005960:	401a      	ands	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2270      	movs	r2, #112	; 0x70
 800597c:	4393      	bics	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2203      	movs	r2, #3
 8005984:	4393      	bics	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <TIM_OC3_SetConfig+0xe8>)
 8005996:	4013      	ands	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <TIM_OC3_SetConfig+0xec>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10d      	bne.n	80059ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <TIM_OC3_SetConfig+0xf0>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <TIM_OC3_SetConfig+0xf4>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <TIM_OC3_SetConfig+0xec>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_OC3_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <TIM_OC3_SetConfig+0xf8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_OC3_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <TIM_OC3_SetConfig+0xfc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC3_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <TIM_OC3_SetConfig+0x100>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d113      	bne.n	8005a12 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <TIM_OC3_SetConfig+0x104>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <TIM_OC3_SetConfig+0x108>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b006      	add	sp, #24
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	fffffeff 	.word	0xfffffeff
 8005a38:	fffffdff 	.word	0xfffffdff
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	fffff7ff 	.word	0xfffff7ff
 8005a44:	fffffbff 	.word	0xfffffbff
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	ffffefff 	.word	0xffffefff
 8005a58:	ffffdfff 	.word	0xffffdfff

08005a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <TIM_OC4_SetConfig+0xb0>)
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <TIM_OC4_SetConfig+0xb4>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <TIM_OC4_SetConfig+0xb8>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <TIM_OC4_SetConfig+0xbc>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	031b      	lsls	r3, r3, #12
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <TIM_OC4_SetConfig+0xc0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x78>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <TIM_OC4_SetConfig+0xc4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x78>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <TIM_OC4_SetConfig+0xc8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC4_SetConfig+0x78>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <TIM_OC4_SetConfig+0xcc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d109      	bne.n	8005ae8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <TIM_OC4_SetConfig+0xd0>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b006      	add	sp, #24
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	ffffefff 	.word	0xffffefff
 8005b10:	ffff8fff 	.word	0xffff8fff
 8005b14:	fffffcff 	.word	0xfffffcff
 8005b18:	ffffdfff 	.word	0xffffdfff
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	ffffbfff 	.word	0xffffbfff

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4393      	bics	r3, r2
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	22f0      	movs	r2, #240	; 0xf0
 8005b5a:	4393      	bics	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b006      	add	sp, #24
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <TIM_TI2_ConfigInputStage+0x60>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	22a0      	movs	r2, #160	; 0xa0
 8005bc8:	4393      	bics	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b006      	add	sp, #24
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	ffff0fff 	.word	0xffff0fff

08005bf0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2270      	movs	r2, #112	; 0x70
 8005c04:	4393      	bics	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	2207      	movs	r2, #7
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	609a      	str	r2, [r3, #8]
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b004      	add	sp, #16
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <TIM_ETR_SetConfig+0x3c>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b006      	add	sp, #24
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	ffff00ff 	.word	0xffff00ff

08005c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	221f      	movs	r2, #31
 8005c74:	4013      	ands	r3, r2
 8005c76:	2201      	movs	r2, #1
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	0013      	movs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	43d2      	mvns	r2, r2
 8005c86:	401a      	ands	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	211f      	movs	r1, #31
 8005c94:	400b      	ands	r3, r1
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4099      	lsls	r1, r3
 8005c9a:	000b      	movs	r3, r1
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b006      	add	sp, #24
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	223c      	movs	r2, #60	; 0x3c
 8005cba:	5c9b      	ldrb	r3, [r3, r2]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e047      	b.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	223c      	movs	r2, #60	; 0x3c
 8005cc8:	2101      	movs	r1, #1
 8005cca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223d      	movs	r2, #61	; 0x3d
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2270      	movs	r2, #112	; 0x70
 8005ce8:	4393      	bics	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	05db      	lsls	r3, r3, #23
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d009      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10c      	bne.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	4393      	bics	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	223d      	movs	r2, #61	; 0x3d
 8005d46:	2101      	movs	r1, #1
 8005d48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	223c      	movs	r2, #60	; 0x3c
 8005d4e:	2100      	movs	r1, #0
 8005d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b004      	add	sp, #16
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40014000 	.word	0x40014000

08005d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b002      	add	sp, #8
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	4d0c      	ldr	r5, [pc, #48]	; (8005dc0 <__libc_init_array+0x38>)
 8005d8e:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <__libc_init_array+0x3c>)
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	2600      	movs	r6, #0
 8005d9a:	f000 fa55 	bl	8006248 <_init>
 8005d9e:	4d0a      	ldr	r5, [pc, #40]	; (8005dc8 <__libc_init_array+0x40>)
 8005da0:	4c0a      	ldr	r4, [pc, #40]	; (8005dcc <__libc_init_array+0x44>)
 8005da2:	1b64      	subs	r4, r4, r5
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	00b3      	lsls	r3, r6, #2
 8005dae:	58eb      	ldr	r3, [r5, r3]
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	00b3      	lsls	r3, r6, #2
 8005db8:	58eb      	ldr	r3, [r5, r3]
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	080063c8 	.word	0x080063c8
 8005dc4:	080063c8 	.word	0x080063c8
 8005dc8:	080063c8 	.word	0x080063c8
 8005dcc:	080063cc 	.word	0x080063cc

08005dd0 <memset>:
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	1882      	adds	r2, r0, r2
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d100      	bne.n	8005dda <memset+0xa>
 8005dd8:	4770      	bx	lr
 8005dda:	7019      	strb	r1, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	e7f9      	b.n	8005dd4 <memset+0x4>

08005de0 <atan2>:
 8005de0:	b510      	push	{r4, lr}
 8005de2:	f000 f801 	bl	8005de8 <__ieee754_atan2>
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <__ieee754_atan2>:
 8005de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dea:	0016      	movs	r6, r2
 8005dec:	001d      	movs	r5, r3
 8005dee:	005a      	lsls	r2, r3, #1
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4273      	negs	r3, r6
 8005df4:	4333      	orrs	r3, r6
 8005df6:	4f46      	ldr	r7, [pc, #280]	; (8005f10 <__ieee754_atan2+0x128>)
 8005df8:	0852      	lsrs	r2, r2, #1
 8005dfa:	0fdb      	lsrs	r3, r3, #31
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	42bb      	cmp	r3, r7
 8005e00:	d809      	bhi.n	8005e16 <__ieee754_atan2+0x2e>
 8005e02:	4244      	negs	r4, r0
 8005e04:	004b      	lsls	r3, r1, #1
 8005e06:	4304      	orrs	r4, r0
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	0fe4      	lsrs	r4, r4, #31
 8005e0c:	9100      	str	r1, [sp, #0]
 8005e0e:	9001      	str	r0, [sp, #4]
 8005e10:	431c      	orrs	r4, r3
 8005e12:	42bc      	cmp	r4, r7
 8005e14:	d905      	bls.n	8005e22 <__ieee754_atan2+0x3a>
 8005e16:	0032      	movs	r2, r6
 8005e18:	002b      	movs	r3, r5
 8005e1a:	f7fa fb29 	bl	8000470 <__aeabi_dadd>
 8005e1e:	b003      	add	sp, #12
 8005e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e22:	4c3c      	ldr	r4, [pc, #240]	; (8005f14 <__ieee754_atan2+0x12c>)
 8005e24:	192c      	adds	r4, r5, r4
 8005e26:	4334      	orrs	r4, r6
 8005e28:	d102      	bne.n	8005e30 <__ieee754_atan2+0x48>
 8005e2a:	f000 f889 	bl	8005f40 <atan>
 8005e2e:	e7f6      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005e30:	17ac      	asrs	r4, r5, #30
 8005e32:	46a4      	mov	ip, r4
 8005e34:	2402      	movs	r4, #2
 8005e36:	4667      	mov	r7, ip
 8005e38:	403c      	ands	r4, r7
 8005e3a:	9f00      	ldr	r7, [sp, #0]
 8005e3c:	0fff      	lsrs	r7, r7, #31
 8005e3e:	433c      	orrs	r4, r7
 8005e40:	9f01      	ldr	r7, [sp, #4]
 8005e42:	431f      	orrs	r7, r3
 8005e44:	d106      	bne.n	8005e54 <__ieee754_atan2+0x6c>
 8005e46:	2c02      	cmp	r4, #2
 8005e48:	d056      	beq.n	8005ef8 <__ieee754_atan2+0x110>
 8005e4a:	2c03      	cmp	r4, #3
 8005e4c:	d1e7      	bne.n	8005e1e <__ieee754_atan2+0x36>
 8005e4e:	4832      	ldr	r0, [pc, #200]	; (8005f18 <__ieee754_atan2+0x130>)
 8005e50:	4932      	ldr	r1, [pc, #200]	; (8005f1c <__ieee754_atan2+0x134>)
 8005e52:	e7e4      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005e54:	0017      	movs	r7, r2
 8005e56:	4337      	orrs	r7, r6
 8005e58:	d105      	bne.n	8005e66 <__ieee754_atan2+0x7e>
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	482e      	ldr	r0, [pc, #184]	; (8005f18 <__ieee754_atan2+0x130>)
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da53      	bge.n	8005f0a <__ieee754_atan2+0x122>
 8005e62:	492f      	ldr	r1, [pc, #188]	; (8005f20 <__ieee754_atan2+0x138>)
 8005e64:	e7db      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005e66:	4f2a      	ldr	r7, [pc, #168]	; (8005f10 <__ieee754_atan2+0x128>)
 8005e68:	42ba      	cmp	r2, r7
 8005e6a:	d10f      	bne.n	8005e8c <__ieee754_atan2+0xa4>
 8005e6c:	3c01      	subs	r4, #1
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d107      	bne.n	8005e82 <__ieee754_atan2+0x9a>
 8005e72:	2c02      	cmp	r4, #2
 8005e74:	d843      	bhi.n	8005efe <__ieee754_atan2+0x116>
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <__ieee754_atan2+0x13c>)
 8005e78:	00e4      	lsls	r4, r4, #3
 8005e7a:	191c      	adds	r4, r3, r4
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	6861      	ldr	r1, [r4, #4]
 8005e80:	e7cd      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005e82:	2c02      	cmp	r4, #2
 8005e84:	d83e      	bhi.n	8005f04 <__ieee754_atan2+0x11c>
 8005e86:	4b28      	ldr	r3, [pc, #160]	; (8005f28 <__ieee754_atan2+0x140>)
 8005e88:	00e4      	lsls	r4, r4, #3
 8005e8a:	e7f6      	b.n	8005e7a <__ieee754_atan2+0x92>
 8005e8c:	4f20      	ldr	r7, [pc, #128]	; (8005f10 <__ieee754_atan2+0x128>)
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	d0e3      	beq.n	8005e5a <__ieee754_atan2+0x72>
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	151b      	asrs	r3, r3, #20
 8005e96:	2b3c      	cmp	r3, #60	; 0x3c
 8005e98:	dc18      	bgt.n	8005ecc <__ieee754_atan2+0xe4>
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	da01      	bge.n	8005ea2 <__ieee754_atan2+0xba>
 8005e9e:	333c      	adds	r3, #60	; 0x3c
 8005ea0:	db17      	blt.n	8005ed2 <__ieee754_atan2+0xea>
 8005ea2:	0032      	movs	r2, r6
 8005ea4:	002b      	movs	r3, r5
 8005ea6:	f7fa fe1f 	bl	8000ae8 <__aeabi_ddiv>
 8005eaa:	f000 f9c9 	bl	8006240 <fabs>
 8005eae:	f000 f847 	bl	8005f40 <atan>
 8005eb2:	2c01      	cmp	r4, #1
 8005eb4:	d010      	beq.n	8005ed8 <__ieee754_atan2+0xf0>
 8005eb6:	2c02      	cmp	r4, #2
 8005eb8:	d013      	beq.n	8005ee2 <__ieee754_atan2+0xfa>
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	d0af      	beq.n	8005e1e <__ieee754_atan2+0x36>
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <__ieee754_atan2+0x144>)
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <__ieee754_atan2+0x148>)
 8005ec2:	f7fb fc7f 	bl	80017c4 <__aeabi_dsub>
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <__ieee754_atan2+0x130>)
 8005ec8:	4b1a      	ldr	r3, [pc, #104]	; (8005f34 <__ieee754_atan2+0x14c>)
 8005eca:	e012      	b.n	8005ef2 <__ieee754_atan2+0x10a>
 8005ecc:	4812      	ldr	r0, [pc, #72]	; (8005f18 <__ieee754_atan2+0x130>)
 8005ece:	491a      	ldr	r1, [pc, #104]	; (8005f38 <__ieee754_atan2+0x150>)
 8005ed0:	e7ef      	b.n	8005eb2 <__ieee754_atan2+0xca>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	e7ec      	b.n	8005eb2 <__ieee754_atan2+0xca>
 8005ed8:	2480      	movs	r4, #128	; 0x80
 8005eda:	0624      	lsls	r4, r4, #24
 8005edc:	190b      	adds	r3, r1, r4
 8005ede:	0019      	movs	r1, r3
 8005ee0:	e79d      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <__ieee754_atan2+0x144>)
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <__ieee754_atan2+0x148>)
 8005ee6:	f7fb fc6d 	bl	80017c4 <__aeabi_dsub>
 8005eea:	0002      	movs	r2, r0
 8005eec:	000b      	movs	r3, r1
 8005eee:	480a      	ldr	r0, [pc, #40]	; (8005f18 <__ieee754_atan2+0x130>)
 8005ef0:	4910      	ldr	r1, [pc, #64]	; (8005f34 <__ieee754_atan2+0x14c>)
 8005ef2:	f7fb fc67 	bl	80017c4 <__aeabi_dsub>
 8005ef6:	e792      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005ef8:	4807      	ldr	r0, [pc, #28]	; (8005f18 <__ieee754_atan2+0x130>)
 8005efa:	490e      	ldr	r1, [pc, #56]	; (8005f34 <__ieee754_atan2+0x14c>)
 8005efc:	e78f      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005efe:	4806      	ldr	r0, [pc, #24]	; (8005f18 <__ieee754_atan2+0x130>)
 8005f00:	490e      	ldr	r1, [pc, #56]	; (8005f3c <__ieee754_atan2+0x154>)
 8005f02:	e78c      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005f04:	2000      	movs	r0, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	e789      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005f0a:	490b      	ldr	r1, [pc, #44]	; (8005f38 <__ieee754_atan2+0x150>)
 8005f0c:	e787      	b.n	8005e1e <__ieee754_atan2+0x36>
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	7ff00000 	.word	0x7ff00000
 8005f14:	c0100000 	.word	0xc0100000
 8005f18:	54442d18 	.word	0x54442d18
 8005f1c:	c00921fb 	.word	0xc00921fb
 8005f20:	bff921fb 	.word	0xbff921fb
 8005f24:	08006358 	.word	0x08006358
 8005f28:	08006370 	.word	0x08006370
 8005f2c:	33145c07 	.word	0x33145c07
 8005f30:	3ca1a626 	.word	0x3ca1a626
 8005f34:	400921fb 	.word	0x400921fb
 8005f38:	3ff921fb 	.word	0x3ff921fb
 8005f3c:	3fe921fb 	.word	0x3fe921fb

08005f40 <atan>:
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	4b98      	ldr	r3, [pc, #608]	; (80061a4 <atan+0x264>)
 8005f44:	b085      	sub	sp, #20
 8005f46:	004e      	lsls	r6, r1, #1
 8005f48:	0004      	movs	r4, r0
 8005f4a:	000d      	movs	r5, r1
 8005f4c:	9103      	str	r1, [sp, #12]
 8005f4e:	0876      	lsrs	r6, r6, #1
 8005f50:	429e      	cmp	r6, r3
 8005f52:	dd18      	ble.n	8005f86 <atan+0x46>
 8005f54:	4b94      	ldr	r3, [pc, #592]	; (80061a8 <atan+0x268>)
 8005f56:	429e      	cmp	r6, r3
 8005f58:	dc02      	bgt.n	8005f60 <atan+0x20>
 8005f5a:	d10a      	bne.n	8005f72 <atan+0x32>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d008      	beq.n	8005f72 <atan+0x32>
 8005f60:	0022      	movs	r2, r4
 8005f62:	002b      	movs	r3, r5
 8005f64:	0020      	movs	r0, r4
 8005f66:	0029      	movs	r1, r5
 8005f68:	f7fa fa82 	bl	8000470 <__aeabi_dadd>
 8005f6c:	0004      	movs	r4, r0
 8005f6e:	000d      	movs	r5, r1
 8005f70:	e005      	b.n	8005f7e <atan+0x3e>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	4c8d      	ldr	r4, [pc, #564]	; (80061ac <atan+0x26c>)
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd00      	ble.n	8005f7c <atan+0x3c>
 8005f7a:	e110      	b.n	800619e <atan+0x25e>
 8005f7c:	4d8c      	ldr	r5, [pc, #560]	; (80061b0 <atan+0x270>)
 8005f7e:	0020      	movs	r0, r4
 8005f80:	0029      	movs	r1, r5
 8005f82:	b005      	add	sp, #20
 8005f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f86:	4b8b      	ldr	r3, [pc, #556]	; (80061b4 <atan+0x274>)
 8005f88:	429e      	cmp	r6, r3
 8005f8a:	dc0f      	bgt.n	8005fac <atan+0x6c>
 8005f8c:	4b8a      	ldr	r3, [pc, #552]	; (80061b8 <atan+0x278>)
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	dc09      	bgt.n	8005fa6 <atan+0x66>
 8005f92:	4a8a      	ldr	r2, [pc, #552]	; (80061bc <atan+0x27c>)
 8005f94:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <atan+0x280>)
 8005f96:	f7fa fa6b 	bl	8000470 <__aeabi_dadd>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	4b89      	ldr	r3, [pc, #548]	; (80061c4 <atan+0x284>)
 8005f9e:	f7fa fa53 	bl	8000448 <__aeabi_dcmpgt>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d1eb      	bne.n	8005f7e <atan+0x3e>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	425b      	negs	r3, r3
 8005faa:	e025      	b.n	8005ff8 <atan+0xb8>
 8005fac:	f000 f948 	bl	8006240 <fabs>
 8005fb0:	4b85      	ldr	r3, [pc, #532]	; (80061c8 <atan+0x288>)
 8005fb2:	0004      	movs	r4, r0
 8005fb4:	000d      	movs	r5, r1
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	dd00      	ble.n	8005fbc <atan+0x7c>
 8005fba:	e0aa      	b.n	8006112 <atan+0x1d2>
 8005fbc:	4b83      	ldr	r3, [pc, #524]	; (80061cc <atan+0x28c>)
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	dd00      	ble.n	8005fc4 <atan+0x84>
 8005fc2:	e090      	b.n	80060e6 <atan+0x1a6>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	000b      	movs	r3, r1
 8005fc8:	f7fa fa52 	bl	8000470 <__aeabi_dadd>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4b7d      	ldr	r3, [pc, #500]	; (80061c4 <atan+0x284>)
 8005fd0:	f7fb fbf8 	bl	80017c4 <__aeabi_dsub>
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	0006      	movs	r6, r0
 8005fd8:	000f      	movs	r7, r1
 8005fda:	2200      	movs	r2, #0
 8005fdc:	0020      	movs	r0, r4
 8005fde:	0029      	movs	r1, r5
 8005fe0:	05db      	lsls	r3, r3, #23
 8005fe2:	f7fa fa45 	bl	8000470 <__aeabi_dadd>
 8005fe6:	000b      	movs	r3, r1
 8005fe8:	0002      	movs	r2, r0
 8005fea:	0039      	movs	r1, r7
 8005fec:	0030      	movs	r0, r6
 8005fee:	f7fa fd7b 	bl	8000ae8 <__aeabi_ddiv>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	0004      	movs	r4, r0
 8005ff6:	000d      	movs	r5, r1
 8005ff8:	0022      	movs	r2, r4
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	0020      	movs	r0, r4
 8005ffe:	002b      	movs	r3, r5
 8006000:	0029      	movs	r1, r5
 8006002:	f7fb f973 	bl	80012ec <__aeabi_dmul>
 8006006:	0002      	movs	r2, r0
 8006008:	000b      	movs	r3, r1
 800600a:	9000      	str	r0, [sp, #0]
 800600c:	9101      	str	r1, [sp, #4]
 800600e:	f7fb f96d 	bl	80012ec <__aeabi_dmul>
 8006012:	0006      	movs	r6, r0
 8006014:	000f      	movs	r7, r1
 8006016:	4a6e      	ldr	r2, [pc, #440]	; (80061d0 <atan+0x290>)
 8006018:	4b6e      	ldr	r3, [pc, #440]	; (80061d4 <atan+0x294>)
 800601a:	f7fb f967 	bl	80012ec <__aeabi_dmul>
 800601e:	4a6e      	ldr	r2, [pc, #440]	; (80061d8 <atan+0x298>)
 8006020:	4b6e      	ldr	r3, [pc, #440]	; (80061dc <atan+0x29c>)
 8006022:	f7fa fa25 	bl	8000470 <__aeabi_dadd>
 8006026:	0032      	movs	r2, r6
 8006028:	003b      	movs	r3, r7
 800602a:	f7fb f95f 	bl	80012ec <__aeabi_dmul>
 800602e:	4a6c      	ldr	r2, [pc, #432]	; (80061e0 <atan+0x2a0>)
 8006030:	4b6c      	ldr	r3, [pc, #432]	; (80061e4 <atan+0x2a4>)
 8006032:	f7fa fa1d 	bl	8000470 <__aeabi_dadd>
 8006036:	0032      	movs	r2, r6
 8006038:	003b      	movs	r3, r7
 800603a:	f7fb f957 	bl	80012ec <__aeabi_dmul>
 800603e:	4a6a      	ldr	r2, [pc, #424]	; (80061e8 <atan+0x2a8>)
 8006040:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <atan+0x2ac>)
 8006042:	f7fa fa15 	bl	8000470 <__aeabi_dadd>
 8006046:	0032      	movs	r2, r6
 8006048:	003b      	movs	r3, r7
 800604a:	f7fb f94f 	bl	80012ec <__aeabi_dmul>
 800604e:	4a68      	ldr	r2, [pc, #416]	; (80061f0 <atan+0x2b0>)
 8006050:	4b68      	ldr	r3, [pc, #416]	; (80061f4 <atan+0x2b4>)
 8006052:	f7fa fa0d 	bl	8000470 <__aeabi_dadd>
 8006056:	0032      	movs	r2, r6
 8006058:	003b      	movs	r3, r7
 800605a:	f7fb f947 	bl	80012ec <__aeabi_dmul>
 800605e:	4a66      	ldr	r2, [pc, #408]	; (80061f8 <atan+0x2b8>)
 8006060:	4b66      	ldr	r3, [pc, #408]	; (80061fc <atan+0x2bc>)
 8006062:	f7fa fa05 	bl	8000470 <__aeabi_dadd>
 8006066:	9a00      	ldr	r2, [sp, #0]
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	f7fb f93f 	bl	80012ec <__aeabi_dmul>
 800606e:	4a64      	ldr	r2, [pc, #400]	; (8006200 <atan+0x2c0>)
 8006070:	9000      	str	r0, [sp, #0]
 8006072:	9101      	str	r1, [sp, #4]
 8006074:	4b63      	ldr	r3, [pc, #396]	; (8006204 <atan+0x2c4>)
 8006076:	0030      	movs	r0, r6
 8006078:	0039      	movs	r1, r7
 800607a:	f7fb f937 	bl	80012ec <__aeabi_dmul>
 800607e:	4a62      	ldr	r2, [pc, #392]	; (8006208 <atan+0x2c8>)
 8006080:	4b62      	ldr	r3, [pc, #392]	; (800620c <atan+0x2cc>)
 8006082:	f7fb fb9f 	bl	80017c4 <__aeabi_dsub>
 8006086:	0032      	movs	r2, r6
 8006088:	003b      	movs	r3, r7
 800608a:	f7fb f92f 	bl	80012ec <__aeabi_dmul>
 800608e:	4a60      	ldr	r2, [pc, #384]	; (8006210 <atan+0x2d0>)
 8006090:	4b60      	ldr	r3, [pc, #384]	; (8006214 <atan+0x2d4>)
 8006092:	f7fb fb97 	bl	80017c4 <__aeabi_dsub>
 8006096:	0032      	movs	r2, r6
 8006098:	003b      	movs	r3, r7
 800609a:	f7fb f927 	bl	80012ec <__aeabi_dmul>
 800609e:	4a5e      	ldr	r2, [pc, #376]	; (8006218 <atan+0x2d8>)
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <atan+0x2dc>)
 80060a2:	f7fb fb8f 	bl	80017c4 <__aeabi_dsub>
 80060a6:	0032      	movs	r2, r6
 80060a8:	003b      	movs	r3, r7
 80060aa:	f7fb f91f 	bl	80012ec <__aeabi_dmul>
 80060ae:	4a5c      	ldr	r2, [pc, #368]	; (8006220 <atan+0x2e0>)
 80060b0:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <atan+0x2e4>)
 80060b2:	f7fb fb87 	bl	80017c4 <__aeabi_dsub>
 80060b6:	0032      	movs	r2, r6
 80060b8:	003b      	movs	r3, r7
 80060ba:	f7fb f917 	bl	80012ec <__aeabi_dmul>
 80060be:	0002      	movs	r2, r0
 80060c0:	000b      	movs	r3, r1
 80060c2:	9800      	ldr	r0, [sp, #0]
 80060c4:	9901      	ldr	r1, [sp, #4]
 80060c6:	f7fa f9d3 	bl	8000470 <__aeabi_dadd>
 80060ca:	002b      	movs	r3, r5
 80060cc:	0022      	movs	r2, r4
 80060ce:	f7fb f90d 	bl	80012ec <__aeabi_dmul>
 80060d2:	9b02      	ldr	r3, [sp, #8]
 80060d4:	3301      	adds	r3, #1
 80060d6:	d143      	bne.n	8006160 <atan+0x220>
 80060d8:	0002      	movs	r2, r0
 80060da:	000b      	movs	r3, r1
 80060dc:	0020      	movs	r0, r4
 80060de:	0029      	movs	r1, r5
 80060e0:	f7fb fb70 	bl	80017c4 <__aeabi_dsub>
 80060e4:	e742      	b.n	8005f6c <atan+0x2c>
 80060e6:	2200      	movs	r2, #0
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <atan+0x284>)
 80060ea:	f7fb fb6b 	bl	80017c4 <__aeabi_dsub>
 80060ee:	2200      	movs	r2, #0
 80060f0:	0006      	movs	r6, r0
 80060f2:	000f      	movs	r7, r1
 80060f4:	0020      	movs	r0, r4
 80060f6:	0029      	movs	r1, r5
 80060f8:	4b32      	ldr	r3, [pc, #200]	; (80061c4 <atan+0x284>)
 80060fa:	f7fa f9b9 	bl	8000470 <__aeabi_dadd>
 80060fe:	000b      	movs	r3, r1
 8006100:	0002      	movs	r2, r0
 8006102:	0039      	movs	r1, r7
 8006104:	0030      	movs	r0, r6
 8006106:	f7fa fcef 	bl	8000ae8 <__aeabi_ddiv>
 800610a:	2301      	movs	r3, #1
 800610c:	0004      	movs	r4, r0
 800610e:	000d      	movs	r5, r1
 8006110:	e772      	b.n	8005ff8 <atan+0xb8>
 8006112:	4b45      	ldr	r3, [pc, #276]	; (8006228 <atan+0x2e8>)
 8006114:	429e      	cmp	r6, r3
 8006116:	dc19      	bgt.n	800614c <atan+0x20c>
 8006118:	2200      	movs	r2, #0
 800611a:	4b44      	ldr	r3, [pc, #272]	; (800622c <atan+0x2ec>)
 800611c:	f7fb fb52 	bl	80017c4 <__aeabi_dsub>
 8006120:	2200      	movs	r2, #0
 8006122:	0006      	movs	r6, r0
 8006124:	000f      	movs	r7, r1
 8006126:	0020      	movs	r0, r4
 8006128:	0029      	movs	r1, r5
 800612a:	4b40      	ldr	r3, [pc, #256]	; (800622c <atan+0x2ec>)
 800612c:	f7fb f8de 	bl	80012ec <__aeabi_dmul>
 8006130:	2200      	movs	r2, #0
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <atan+0x284>)
 8006134:	f7fa f99c 	bl	8000470 <__aeabi_dadd>
 8006138:	000b      	movs	r3, r1
 800613a:	0002      	movs	r2, r0
 800613c:	0039      	movs	r1, r7
 800613e:	0030      	movs	r0, r6
 8006140:	f7fa fcd2 	bl	8000ae8 <__aeabi_ddiv>
 8006144:	2302      	movs	r3, #2
 8006146:	0004      	movs	r4, r0
 8006148:	000d      	movs	r5, r1
 800614a:	e755      	b.n	8005ff8 <atan+0xb8>
 800614c:	000b      	movs	r3, r1
 800614e:	0002      	movs	r2, r0
 8006150:	4937      	ldr	r1, [pc, #220]	; (8006230 <atan+0x2f0>)
 8006152:	2000      	movs	r0, #0
 8006154:	f7fa fcc8 	bl	8000ae8 <__aeabi_ddiv>
 8006158:	2303      	movs	r3, #3
 800615a:	0004      	movs	r4, r0
 800615c:	000d      	movs	r5, r1
 800615e:	e74b      	b.n	8005ff8 <atan+0xb8>
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	4f34      	ldr	r7, [pc, #208]	; (8006234 <atan+0x2f4>)
 8006164:	00de      	lsls	r6, r3, #3
 8006166:	4b34      	ldr	r3, [pc, #208]	; (8006238 <atan+0x2f8>)
 8006168:	19bf      	adds	r7, r7, r6
 800616a:	199e      	adds	r6, r3, r6
 800616c:	6832      	ldr	r2, [r6, #0]
 800616e:	6873      	ldr	r3, [r6, #4]
 8006170:	f7fb fb28 	bl	80017c4 <__aeabi_dsub>
 8006174:	0022      	movs	r2, r4
 8006176:	002b      	movs	r3, r5
 8006178:	f7fb fb24 	bl	80017c4 <__aeabi_dsub>
 800617c:	000b      	movs	r3, r1
 800617e:	0002      	movs	r2, r0
 8006180:	6838      	ldr	r0, [r7, #0]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	f7fb fb1e 	bl	80017c4 <__aeabi_dsub>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	0004      	movs	r4, r0
 800618c:	000d      	movs	r5, r1
 800618e:	2b00      	cmp	r3, #0
 8006190:	db00      	blt.n	8006194 <atan+0x254>
 8006192:	e6f4      	b.n	8005f7e <atan+0x3e>
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	0609      	lsls	r1, r1, #24
 8006198:	186b      	adds	r3, r5, r1
 800619a:	001d      	movs	r5, r3
 800619c:	e6ef      	b.n	8005f7e <atan+0x3e>
 800619e:	4d27      	ldr	r5, [pc, #156]	; (800623c <atan+0x2fc>)
 80061a0:	e6ed      	b.n	8005f7e <atan+0x3e>
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	440fffff 	.word	0x440fffff
 80061a8:	7ff00000 	.word	0x7ff00000
 80061ac:	54442d18 	.word	0x54442d18
 80061b0:	bff921fb 	.word	0xbff921fb
 80061b4:	3fdbffff 	.word	0x3fdbffff
 80061b8:	3e1fffff 	.word	0x3e1fffff
 80061bc:	8800759c 	.word	0x8800759c
 80061c0:	7e37e43c 	.word	0x7e37e43c
 80061c4:	3ff00000 	.word	0x3ff00000
 80061c8:	3ff2ffff 	.word	0x3ff2ffff
 80061cc:	3fe5ffff 	.word	0x3fe5ffff
 80061d0:	e322da11 	.word	0xe322da11
 80061d4:	3f90ad3a 	.word	0x3f90ad3a
 80061d8:	24760deb 	.word	0x24760deb
 80061dc:	3fa97b4b 	.word	0x3fa97b4b
 80061e0:	a0d03d51 	.word	0xa0d03d51
 80061e4:	3fb10d66 	.word	0x3fb10d66
 80061e8:	c54c206e 	.word	0xc54c206e
 80061ec:	3fb745cd 	.word	0x3fb745cd
 80061f0:	920083ff 	.word	0x920083ff
 80061f4:	3fc24924 	.word	0x3fc24924
 80061f8:	5555550d 	.word	0x5555550d
 80061fc:	3fd55555 	.word	0x3fd55555
 8006200:	2c6a6c2f 	.word	0x2c6a6c2f
 8006204:	bfa2b444 	.word	0xbfa2b444
 8006208:	52defd9a 	.word	0x52defd9a
 800620c:	3fadde2d 	.word	0x3fadde2d
 8006210:	af749a6d 	.word	0xaf749a6d
 8006214:	3fb3b0f2 	.word	0x3fb3b0f2
 8006218:	fe231671 	.word	0xfe231671
 800621c:	3fbc71c6 	.word	0x3fbc71c6
 8006220:	9998ebc4 	.word	0x9998ebc4
 8006224:	3fc99999 	.word	0x3fc99999
 8006228:	40037fff 	.word	0x40037fff
 800622c:	3ff80000 	.word	0x3ff80000
 8006230:	bff00000 	.word	0xbff00000
 8006234:	08006388 	.word	0x08006388
 8006238:	080063a8 	.word	0x080063a8
 800623c:	3ff921fb 	.word	0x3ff921fb

08006240 <fabs>:
 8006240:	004b      	lsls	r3, r1, #1
 8006242:	0859      	lsrs	r1, r3, #1
 8006244:	4770      	bx	lr
	...

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
