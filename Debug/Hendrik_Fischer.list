
Hendrik_Fischer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b8  080037b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b8  080037b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080037cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080037cc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be3a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7c  00000000  00000000  0002be6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a08  00000000  00000000  0002f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f115  00000000  00000000  00041d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006da2f  00000000  00000000  00050e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  000be8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003700 	.word	0x08003700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003700 	.word	0x08003700

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <InitialisiereGyro>:
#include <stdio.h>
#include <string.h>
#include <gyro.h>


int InitialisiereGyro(){
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[15];
	//konfiguriere Control Register 1

	buf[0] = CTRL_REG1;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2213      	movs	r2, #19
 80003fe:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00001111; //Unused	Reset 0/1	SelfTest 0/1	Output Data Rate 011 für 100 Hz	Active Mode gewählt mit 11
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	220f      	movs	r2, #15
 8000404:	705a      	strb	r2, [r3, #1]
	//buf[1] = 0b11101110; //invertiert
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 8000406:	2315      	movs	r3, #21
 8000408:	18fc      	adds	r4, r7, r3
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	4834      	ldr	r0, [pc, #208]	; (80004e0 <InitialisiereGyro+0xec>)
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2302      	movs	r3, #2
 8000416:	2142      	movs	r1, #66	; 0x42
 8000418:	f001 f8ea 	bl	80015f0 <HAL_I2C_Master_Transmit>
 800041c:	0003      	movs	r3, r0
 800041e:	7023      	strb	r3, [r4, #0]
	HAL_Delay(80);
 8000420:	2050      	movs	r0, #80	; 0x50
 8000422:	f000 fdc1 	bl	8000fa8 <HAL_Delay>



	uint8_t GDI;
	uint8_t x;
	for (x=0; x<=3; x++){
 8000426:	2316      	movs	r3, #22
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	e04a      	b.n	80004c6 <InitialisiereGyro+0xd2>
 	buf[0] = WHO_AM_I_Gyro_Reg;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	220c      	movs	r2, #12
 8000434:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, 1000);
 8000436:	2515      	movs	r5, #21
 8000438:	197c      	adds	r4, r7, r5
 800043a:	1d3a      	adds	r2, r7, #4
 800043c:	4828      	ldr	r0, [pc, #160]	; (80004e0 <InitialisiereGyro+0xec>)
 800043e:	23fa      	movs	r3, #250	; 0xfa
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2301      	movs	r3, #1
 8000446:	2142      	movs	r1, #66	; 0x42
 8000448:	f001 f8d2 	bl	80015f0 <HAL_I2C_Master_Transmit>
 800044c:	0003      	movs	r3, r0
 800044e:	7023      	strb	r3, [r4, #0]
	HAL_Delay(80);
 8000450:	2050      	movs	r0, #80	; 0x50
 8000452:	f000 fda9 	bl	8000fa8 <HAL_Delay>
	if ( ret == HAL_OK ) {
 8000456:	197b      	adds	r3, r7, r5
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d123      	bne.n	80004a6 <InitialisiereGyro+0xb2>

		ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*empfange den Device Identifier*/
 800045e:	197c      	adds	r4, r7, r5
 8000460:	1d3a      	adds	r2, r7, #4
 8000462:	481f      	ldr	r0, [pc, #124]	; (80004e0 <InitialisiereGyro+0xec>)
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2301      	movs	r3, #1
 800046c:	2142      	movs	r1, #66	; 0x42
 800046e:	f001 f9c7 	bl	8001800 <HAL_I2C_Master_Receive>
 8000472:	0003      	movs	r3, r0
 8000474:	7023      	strb	r3, [r4, #0]
		HAL_Delay(80);
 8000476:	2050      	movs	r0, #80	; 0x50
 8000478:	f000 fd96 	bl	8000fa8 <HAL_Delay>
		if ( ret == HAL_OK ) {
 800047c:	197b      	adds	r3, r7, r5
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d105      	bne.n	8000490 <InitialisiereGyro+0x9c>
			GDI = buf[0];
 8000484:	2317      	movs	r3, #23
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	1d3a      	adds	r2, r7, #4
 800048a:	7812      	ldrb	r2, [r2, #0]
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	e014      	b.n	80004ba <InitialisiereGyro+0xc6>
		}else{
			strcpy((char*)buf, "INIT ERR Read");
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <InitialisiereGyro+0xf0>)
 8000494:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000496:	c313      	stmia	r3!, {r0, r1, r4}
 8000498:	8812      	ldrh	r2, [r2, #0]
 800049a:	801a      	strh	r2, [r3, #0]
			GDI = 0x01;
 800049c:	2317      	movs	r3, #23
 800049e:	18fb      	adds	r3, r7, r3
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e009      	b.n	80004ba <InitialisiereGyro+0xc6>
		}

	}else{
		strcpy((char*)buf, "INIT ERR Send");
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <InitialisiereGyro+0xf4>)
 80004aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ac:	c313      	stmia	r3!, {r0, r1, r4}
 80004ae:	8812      	ldrh	r2, [r2, #0]
 80004b0:	801a      	strh	r2, [r3, #0]
		GDI = 0x01;
 80004b2:	2317      	movs	r3, #23
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
	for (x=0; x<=3; x++){
 80004ba:	2116      	movs	r1, #22
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	3201      	adds	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	2316      	movs	r3, #22
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d9af      	bls.n	8000430 <InitialisiereGyro+0x3c>
	}}
return GDI;
 80004d0:	2317      	movs	r3, #23
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	781b      	ldrb	r3, [r3, #0]
}
 80004d6:	0018      	movs	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	b006      	add	sp, #24
 80004dc:	bdb0      	pop	{r4, r5, r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	20000028 	.word	0x20000028
 80004e4:	08003718 	.word	0x08003718
 80004e8:	08003728 	.word	0x08003728

080004ec <gyroWerteAuslesen>:

void gyroWerteAuslesen (int16_t *x_axis, int16_t *y_axis, int16_t *z_axis){
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;



	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = Gyro_Status_REG;
 80004f8:	2510      	movs	r5, #16
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]



	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 8000500:	261f      	movs	r6, #31
 8000502:	19bc      	adds	r4, r7, r6
 8000504:	197a      	adds	r2, r7, r5
 8000506:	4831      	ldr	r0, [pc, #196]	; (80005cc <gyroWerteAuslesen+0xe0>)
 8000508:	2301      	movs	r3, #1
 800050a:	425b      	negs	r3, r3
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2142      	movs	r1, #66	; 0x42
 8000512:	f001 f86d 	bl	80015f0 <HAL_I2C_Master_Transmit>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(80);
 800051a:	2050      	movs	r0, #80	; 0x50
 800051c:	f000 fd44 	bl	8000fa8 <HAL_Delay>

	  if ( ret == HAL_OK ) {
 8000520:	19bb      	adds	r3, r7, r6
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d148      	bne.n	80005ba <gyroWerteAuslesen+0xce>
		  //Burst-Read
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 8000528:	19bc      	adds	r4, r7, r6
 800052a:	197a      	adds	r2, r7, r5
 800052c:	4827      	ldr	r0, [pc, #156]	; (80005cc <gyroWerteAuslesen+0xe0>)
 800052e:	2301      	movs	r3, #1
 8000530:	425b      	negs	r3, r3
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2307      	movs	r3, #7
 8000536:	2142      	movs	r1, #66	; 0x42
 8000538:	f001 f962 	bl	8001800 <HAL_I2C_Master_Receive>
 800053c:	0003      	movs	r3, r0
 800053e:	7023      	strb	r3, [r4, #0]
		  HAL_Delay(80);
 8000540:	2050      	movs	r0, #80	; 0x50
 8000542:	f000 fd31 	bl	8000fa8 <HAL_Delay>
		if ( ret == HAL_OK ) {
 8000546:	19bb      	adds	r3, r7, r6
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d12b      	bne.n	80005a6 <gyroWerteAuslesen+0xba>
			*x_axis = 0;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
			*x_axis = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 8000554:	197b      	adds	r3, r7, r5
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	197b      	adds	r3, r7, r5
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21a      	sxth	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	801a      	strh	r2, [r3, #0]
			*y_axis = 0;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
			*y_axis = (buf[3] << 8) | buf[4];
 8000570:	197b      	adds	r3, r7, r5
 8000572:	78db      	ldrb	r3, [r3, #3]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	b21a      	sxth	r2, r3
 8000578:	0029      	movs	r1, r5
 800057a:	197b      	adds	r3, r7, r5
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21a      	sxth	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	801a      	strh	r2, [r3, #0]
			*z_axis = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	801a      	strh	r2, [r3, #0]
			*z_axis = (buf[5] << 8) | buf[6];
 800058e:	187b      	adds	r3, r7, r1
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	b21a      	sxth	r2, r3
 8000596:	187b      	adds	r3, r7, r1
 8000598:	799b      	ldrb	r3, [r3, #6]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21a      	sxth	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 80005a4:	e00e      	b.n	80005c4 <gyroWerteAuslesen+0xd8>
			strcpy((char*)buf, "Error Read");
 80005a6:	2310      	movs	r3, #16
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <gyroWerteAuslesen+0xe4>)
 80005ac:	ca03      	ldmia	r2!, {r0, r1}
 80005ae:	c303      	stmia	r3!, {r0, r1}
 80005b0:	8811      	ldrh	r1, [r2, #0]
 80005b2:	8019      	strh	r1, [r3, #0]
 80005b4:	7892      	ldrb	r2, [r2, #2]
 80005b6:	709a      	strb	r2, [r3, #2]
}
 80005b8:	e004      	b.n	80005c4 <gyroWerteAuslesen+0xd8>
		  strcpy((char*)buf, "Error Write");
 80005ba:	2310      	movs	r3, #16
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <gyroWerteAuslesen+0xe8>)
 80005c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005c2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b009      	add	sp, #36	; 0x24
 80005ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	08003738 	.word	0x08003738
 80005d4:	08003744 	.word	0x08003744

080005d8 <InitialisiereMagnetometer>:
#include <stdio.h>
#include <string.h>
#include <Magnetometer.h>


int InitialisiereMagnetometer(){
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af02      	add	r7, sp, #8
	uint8_t buf[15];


	//Control Register 1
		//versetzt Sensor in Standby, da register bis auf Standy/Active Mode nur in Standby verändert werden kann
	buf[0] = FXOS8700CQ_CTRL_REG1;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	222a      	movs	r2, #42	; 0x2a
 80005e2:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80005ea:	2516      	movs	r5, #22
 80005ec:	197c      	adds	r4, r7, r5
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	4833      	ldr	r0, [pc, #204]	; (80006c0 <InitialisiereMagnetometer+0xe8>)
 80005f2:	2301      	movs	r3, #1
 80005f4:	425b      	negs	r3, r3
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	213e      	movs	r1, #62	; 0x3e
 80005fc:	f000 fff8 	bl	80015f0 <HAL_I2C_Master_Transmit>
 8000600:	0003      	movs	r3, r0
 8000602:	7023      	strb	r3, [r4, #0]

	HAL_Delay(80);
 8000604:	2050      	movs	r0, #80	; 0x50
 8000606:	f000 fccf 	bl	8000fa8 <HAL_Delay>
		//aktiviere Sensor und konfiguriere Control Register 1
	//Bit 7-6: auto-wake sample frequency; irrelevant (wähle 00)	Bit 5-3: Output data rate selection; wähle 010 für 200Hz mag only mode
	//bzw. 100 Hz hybrid mode	Bit 2: Inoise; wähle 0 für Normal mode	Bit 1: Fast Read Mode; wähle 0 für Normal Mode	Bit 0: wähle 1
	//um Sensor aus Standby zu holen und zu aktivieren
	buf[1] = 0b00010001;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2211      	movs	r2, #17
 800060e:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 8000610:	197c      	adds	r4, r7, r5
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	482a      	ldr	r0, [pc, #168]	; (80006c0 <InitialisiereMagnetometer+0xe8>)
 8000616:	2301      	movs	r3, #1
 8000618:	425b      	negs	r3, r3
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2302      	movs	r3, #2
 800061e:	213e      	movs	r1, #62	; 0x3e
 8000620:	f000 ffe6 	bl	80015f0 <HAL_I2C_Master_Transmit>
 8000624:	0003      	movs	r3, r0
 8000626:	7023      	strb	r3, [r4, #0]


	uint8_t MagnetometerDeviceIdentifier;


	buf[0] = FXOS8700CQ_WHOAMI;
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	220d      	movs	r2, #13
 800062c:	701a      	strb	r2, [r3, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY);
 800062e:	197c      	adds	r4, r7, r5
 8000630:	1d3a      	adds	r2, r7, #4
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <InitialisiereMagnetometer+0xe8>)
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	213e      	movs	r1, #62	; 0x3e
 800063e:	f000 ffd7 	bl	80015f0 <HAL_I2C_Master_Transmit>
 8000642:	0003      	movs	r3, r0
 8000644:	7023      	strb	r3, [r4, #0]
		HAL_Delay(80);
 8000646:	2050      	movs	r0, #80	; 0x50
 8000648:	f000 fcae 	bl	8000fa8 <HAL_Delay>
		if ( ret == HAL_OK ) {
 800064c:	197b      	adds	r3, r7, r5
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d123      	bne.n	800069c <InitialisiereMagnetometer+0xc4>

			ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*empfange den Device Identifier*/
 8000654:	197c      	adds	r4, r7, r5
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <InitialisiereMagnetometer+0xe8>)
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	213e      	movs	r1, #62	; 0x3e
 8000664:	f001 f8cc 	bl	8001800 <HAL_I2C_Master_Receive>
 8000668:	0003      	movs	r3, r0
 800066a:	7023      	strb	r3, [r4, #0]
			HAL_Delay(80);
 800066c:	2050      	movs	r0, #80	; 0x50
 800066e:	f000 fc9b 	bl	8000fa8 <HAL_Delay>
			if ( ret == HAL_OK ) {
 8000672:	197b      	adds	r3, r7, r5
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d105      	bne.n	8000686 <InitialisiereMagnetometer+0xae>
				MagnetometerDeviceIdentifier = buf[0];
 800067a:	2317      	movs	r3, #23
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e014      	b.n	80006b0 <InitialisiereMagnetometer+0xd8>
			}else{
				strcpy((char*)buf, "INIT ERR Read");
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <InitialisiereMagnetometer+0xec>)
 800068a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800068c:	c313      	stmia	r3!, {r0, r1, r4}
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	801a      	strh	r2, [r3, #0]
				MagnetometerDeviceIdentifier = 0xFF;
 8000692:	2317      	movs	r3, #23
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e009      	b.n	80006b0 <InitialisiereMagnetometer+0xd8>
			}

		}else{
			strcpy((char*)buf, "INIT ERR Send");
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <InitialisiereMagnetometer+0xf0>)
 80006a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a2:	c313      	stmia	r3!, {r0, r1, r4}
 80006a4:	8812      	ldrh	r2, [r2, #0]
 80006a6:	801a      	strh	r2, [r3, #0]
			MagnetometerDeviceIdentifier = 0xFF;
 80006a8:	2317      	movs	r3, #23
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	701a      	strb	r2, [r3, #0]
		}

return MagnetometerDeviceIdentifier;
 80006b0:	2317      	movs	r3, #23
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	781b      	ldrb	r3, [r3, #0]
}
 80006b6:	0018      	movs	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b006      	add	sp, #24
 80006bc:	bdb0      	pop	{r4, r5, r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000028 	.word	0x20000028
 80006c4:	08003750 	.word	0x08003750
 80006c8:	08003760 	.word	0x08003760

080006cc <MagnetometerWerteAuslesen>:


void MagnetometerWerteAuslesen (int16_t *x_axis_Mag, int16_t *y_axis_Mag, int16_t *z_axis_Mag){
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	b08b      	sub	sp, #44	; 0x2c
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]




	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = FXOS8700CQ_STATUS;
 80006d8:	2510      	movs	r5, #16
 80006da:	197b      	adds	r3, r7, r5
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;


	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80006e0:	261f      	movs	r6, #31
 80006e2:	19bc      	adds	r4, r7, r6
 80006e4:	197a      	adds	r2, r7, r5
 80006e6:	4830      	ldr	r0, [pc, #192]	; (80007a8 <MagnetometerWerteAuslesen+0xdc>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	213e      	movs	r1, #62	; 0x3e
 80006f2:	f000 ff7d 	bl	80015f0 <HAL_I2C_Master_Transmit>
 80006f6:	0003      	movs	r3, r0
 80006f8:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(50);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fc54 	bl	8000fa8 <HAL_Delay>
	  if ( ret == HAL_OK ) {
 8000700:	19bb      	adds	r3, r7, r6
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d145      	bne.n	8000794 <MagnetometerWerteAuslesen+0xc8>
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 8000708:	19bc      	adds	r4, r7, r6
 800070a:	197a      	adds	r2, r7, r5
 800070c:	4826      	ldr	r0, [pc, #152]	; (80007a8 <MagnetometerWerteAuslesen+0xdc>)
 800070e:	2301      	movs	r3, #1
 8000710:	425b      	negs	r3, r3
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2307      	movs	r3, #7
 8000716:	213e      	movs	r1, #62	; 0x3e
 8000718:	f001 f872 	bl	8001800 <HAL_I2C_Master_Receive>
 800071c:	0003      	movs	r3, r0
 800071e:	7023      	strb	r3, [r4, #0]
		if ( ret == HAL_OK ) {
 8000720:	19bb      	adds	r3, r7, r6
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d12b      	bne.n	8000780 <MagnetometerWerteAuslesen+0xb4>
			*x_axis_Mag = 0;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2200      	movs	r2, #0
 800072c:	801a      	strh	r2, [r3, #0]
			*x_axis_Mag = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 800072e:	197b      	adds	r3, r7, r5
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	197b      	adds	r3, r7, r5
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	b21b      	sxth	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b21a      	sxth	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = 0;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = (buf[3] << 8) | buf[4];
 800074a:	197b      	adds	r3, r7, r5
 800074c:	78db      	ldrb	r3, [r3, #3]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	0029      	movs	r1, r5
 8000754:	197b      	adds	r3, r7, r5
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	b21b      	sxth	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b21a      	sxth	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = 0;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = (buf[5] << 8) | buf[6];
 8000768:	187b      	adds	r3, r7, r1
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21a      	sxth	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	799b      	ldrb	r3, [r3, #6]
 8000774:	b21b      	sxth	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b21a      	sxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 800077e:	e00e      	b.n	800079e <MagnetometerWerteAuslesen+0xd2>
			strcpy((char*)buf, "Error Read");
 8000780:	2310      	movs	r3, #16
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <MagnetometerWerteAuslesen+0xe0>)
 8000786:	ca03      	ldmia	r2!, {r0, r1}
 8000788:	c303      	stmia	r3!, {r0, r1}
 800078a:	8811      	ldrh	r1, [r2, #0]
 800078c:	8019      	strh	r1, [r3, #0]
 800078e:	7892      	ldrb	r2, [r2, #2]
 8000790:	709a      	strb	r2, [r3, #2]
}
 8000792:	e004      	b.n	800079e <MagnetometerWerteAuslesen+0xd2>
		  strcpy((char*)buf, "Error Write");
 8000794:	2310      	movs	r3, #16
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <MagnetometerWerteAuslesen+0xe4>)
 800079a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800079c:	c313      	stmia	r3!, {r0, r1, r4}
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b009      	add	sp, #36	; 0x24
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000028 	.word	0x20000028
 80007ac:	08003770 	.word	0x08003770
 80007b0:	0800377c 	.word	0x0800377c

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80007ba:	f000 fb91 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f8c7 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f9f5 	bl	8000bb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c6:	f000 f925 	bl	8000a14 <MX_I2C1_Init>
  MX_TIM3_Init();
 80007ca:	f000 f963 	bl	8000a94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007ce:	4b5c      	ldr	r3, [pc, #368]	; (8000940 <main+0x18c>)
 80007d0:	2108      	movs	r1, #8
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 f97e 	bl	8002ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80007d8:	4b59      	ldr	r3, [pc, #356]	; (8000940 <main+0x18c>)
 80007da:	210c      	movs	r1, #12
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f979 	bl	8002ad4 <HAL_TIM_PWM_Start>
//Initialisiere die Sensoren

  uint8_t GyroDeviceIdentifier;
  uint8_t MagnetometerDeviceIdentifier;

  GyroDeviceIdentifier = InitialisiereGyro();
 80007e2:	f7ff fe07 	bl	80003f4 <InitialisiereGyro>
 80007e6:	0002      	movs	r2, r0
 80007e8:	2415      	movs	r4, #21
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	701a      	strb	r2, [r3, #0]


  MagnetometerDeviceIdentifier = InitialisiereMagnetometer();
 80007ee:	f7ff fef3 	bl	80005d8 <InitialisiereMagnetometer>
 80007f2:	0002      	movs	r2, r0
 80007f4:	2314      	movs	r3, #20
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	701a      	strb	r2, [r3, #0]


  if (GyroDeviceIdentifier == GyroDeviceID){
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2bd7      	cmp	r3, #215	; 0xd7
 8000800:	d11c      	bne.n	800083c <main+0x88>
	  //I2C-Kommunikation funktioniert
	  //blinke grüne LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 8000802:	2317      	movs	r3, #23
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e012      	b.n	8000832 <main+0x7e>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,511);
 800080c:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <main+0x18c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a4c      	ldr	r2, [pc, #304]	; (8000944 <main+0x190>)
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(1000);
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fbc5 	bl	8000fa8 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 800081e:	4b48      	ldr	r3, [pc, #288]	; (8000940 <main+0x18c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
	  for (x = 0; x <= 3; ++x){
 8000826:	2217      	movs	r2, #23
 8000828:	18bb      	adds	r3, r7, r2
 800082a:	18ba      	adds	r2, r7, r2
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	3201      	adds	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	2317      	movs	r3, #23
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d9e7      	bls.n	800080c <main+0x58>
		    }

  }

  if (MagnetometerDeviceIdentifier == FXOS8700CQ_WHOAMI_VAL){
 800083c:	2314      	movs	r3, #20
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2bc7      	cmp	r3, #199	; 0xc7
 8000844:	d11c      	bne.n	8000880 <main+0xcc>
	  //I2C-Kommunikation funktioniert
	  //blinke blaue LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 8000846:	2316      	movs	r3, #22
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e012      	b.n	8000876 <main+0xc2>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,511);
 8000850:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <main+0x18c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a3b      	ldr	r2, [pc, #236]	; (8000944 <main+0x190>)
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(1000);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fba3 	bl	8000fa8 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8000862:	4b37      	ldr	r3, [pc, #220]	; (8000940 <main+0x18c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	63da      	str	r2, [r3, #60]	; 0x3c
	  for (x = 0; x <= 3; ++x){
 800086a:	2216      	movs	r2, #22
 800086c:	18bb      	adds	r3, r7, r2
 800086e:	18ba      	adds	r2, r7, r2
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	3201      	adds	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	2316      	movs	r3, #22
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d9e7      	bls.n	8000850 <main+0x9c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 8000880:	1dba      	adds	r2, r7, #6
 8000882:	2308      	movs	r3, #8
 8000884:	18f9      	adds	r1, r7, r3
 8000886:	230a      	movs	r3, #10
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fe2e 	bl	80004ec <gyroWerteAuslesen>
	  HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f000 fb89 	bl	8000fa8 <HAL_Delay>
	  MagnetometerWerteAuslesen(&x_axis_Mag, &y_axis_Mag, &z_axis_Mag);
 8000896:	003a      	movs	r2, r7
 8000898:	1cb9      	adds	r1, r7, #2
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff15 	bl	80006cc <MagnetometerWerteAuslesen>
	  HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 fb80 	bl	8000fa8 <HAL_Delay>
	  HAL_Delay(5);
 80008a8:	2005      	movs	r0, #5
 80008aa:	f000 fb7d 	bl	8000fa8 <HAL_Delay>

	  if (z_axis >= 0){
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	2200      	movs	r2, #0
 80008b2:	5e9b      	ldrsh	r3, [r3, r2]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db21      	blt.n	80008fc <main+0x148>
		  // z-Achse wird GEGEN Uhrzeigersinn gedreht
		  int16_t z_axis_Max = 0x7FFF; //maximaler Wert eines 16-bit signed int
 80008b8:	210e      	movs	r1, #14
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <main+0x194>)
 80008be:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Max; //511 ist in der Konfiguration von Tim3 die Zahl, bis zu der gezählt wird.
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	2200      	movs	r2, #0
 80008c4:	5e9b      	ldrsh	r3, [r3, r2]
 80008c6:	001a      	movs	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2100      	movs	r1, #0
 80008d2:	5e5b      	ldrsh	r3, [r3, r1]
 80008d4:	0019      	movs	r1, r3
 80008d6:	0010      	movs	r0, r2
 80008d8:	f7ff fca0 	bl	800021c <__divsi3>
 80008dc:	0003      	movs	r3, r0
 80008de:	001a      	movs	r2, r3
 80008e0:	210c      	movs	r1, #12
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	801a      	strh	r2, [r3, #0]

		  //setzt Pulsweite für grüne LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,z);
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <main+0x18c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	2100      	movs	r1, #0
 80008ee:	5e52      	ldrsh	r2, [r2, r1]
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
		  //setzt Pulsweite für blaue LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0x18c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2200      	movs	r2, #0
 80008f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008fa:	e7c1      	b.n	8000880 <main+0xcc>

	  }else{
		  // z-Achse wird IM Uhrzeigersinn gedreht
		  int16_t z_axis_Min = -0x8000;	//minimaler Wert eines 16-bit signed int
 80008fc:	2112      	movs	r1, #18
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <main+0x198>)
 8000902:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Min;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	5e9b      	ldrsh	r3, [r3, r2]
 800090a:	001a      	movs	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	025b      	lsls	r3, r3, #9
 8000910:	1a9a      	subs	r2, r3, r2
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2100      	movs	r1, #0
 8000916:	5e5b      	ldrsh	r3, [r3, r1]
 8000918:	0019      	movs	r1, r3
 800091a:	0010      	movs	r0, r2
 800091c:	f7ff fc7e 	bl	800021c <__divsi3>
 8000920:	0003      	movs	r3, r0
 8000922:	001a      	movs	r2, r3
 8000924:	2110      	movs	r1, #16
 8000926:	187b      	adds	r3, r7, r1
 8000928:	801a      	strh	r2, [r3, #0]
		  //setzt Pulsweite für blaue LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,z);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <main+0x18c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	187a      	adds	r2, r7, r1
 8000930:	2100      	movs	r1, #0
 8000932:	5e52      	ldrsh	r2, [r2, r1]
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
		  //setzt Pulsweite für grüne LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8000936:	4b02      	ldr	r3, [pc, #8]	; (8000940 <main+0x18c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	641a      	str	r2, [r3, #64]	; 0x40
	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 800093e:	e79f      	b.n	8000880 <main+0xcc>
 8000940:	20000074 	.word	0x20000074
 8000944:	000001ff 	.word	0x000001ff
 8000948:	00007fff 	.word	0x00007fff
 800094c:	ffff8000 	.word	0xffff8000

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b097      	sub	sp, #92	; 0x5c
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	2428      	movs	r4, #40	; 0x28
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	2330      	movs	r3, #48	; 0x30
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f002 fec5 	bl	80036f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000966:	2318      	movs	r3, #24
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f002 febd 	bl	80036f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f002 feb6 	bl	80036f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	0021      	movs	r1, r4
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2202      	movs	r2, #2
 800098a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2201      	movs	r2, #1
 8000990:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2210      	movs	r2, #16
 8000996:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2202      	movs	r2, #2
 800099c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	22a0      	movs	r2, #160	; 0xa0
 80009a8:	0392      	lsls	r2, r2, #14
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fabb 	bl	8001f30 <HAL_RCC_OscConfig>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009be:	f000 f955 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	2118      	movs	r1, #24
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2207      	movs	r2, #7
 80009c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2101      	movs	r1, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fdbf 	bl	8002564 <HAL_RCC_ClockConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ea:	f000 f93f 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2220      	movs	r2, #32
 80009f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fee3 	bl	80027c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a06:	f000 f931 	bl	8000c6c <Error_Handler>
  }
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b017      	add	sp, #92	; 0x5c
 8000a10:	bd90      	pop	{r4, r7, pc}
	...

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fd37 	bl	80014c4 <HAL_I2C_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 f907 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 f9cc 	bl	8001e00 <HAL_I2CEx_ConfigAnalogFilter>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 f8fe 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fa0f 	bl	8001e98 <HAL_I2CEx_ConfigDigitalFilter>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8f5 	bl	8000c6c <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000028 	.word	0x20000028
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	0000020b 	.word	0x0000020b

08000a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	2328      	movs	r3, #40	; 0x28
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f002 fe23 	bl	80036f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	2320      	movs	r3, #32
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f002 fe1b 	bl	80036f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	0018      	movs	r0, r3
 8000abe:	231c      	movs	r3, #28
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 fe14 	bl	80036f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <MX_TIM3_Init+0x114>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000ace:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000ad0:	2264      	movs	r2, #100	; 0x64
 8000ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000adc:	4a33      	ldr	r2, [pc, #204]	; (8000bac <MX_TIM3_Init+0x118>)
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 ff48 	bl	8002984 <HAL_TIM_Base_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000af8:	f000 f8b8 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	2128      	movs	r1, #40	; 0x28
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	0152      	lsls	r2, r2, #5
 8000b04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f95f 	bl	8002dd0 <HAL_TIM_ConfigClockSource>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b16:	f000 f8a9 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 ff81 	bl	8002a24 <HAL_TIM_PWM_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b26:	f000 f8a1 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fd54 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b48:	f000 f890 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2260      	movs	r2, #96	; 0x60
 8000b50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2232      	movs	r2, #50	; 0x32
 8000b56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b68:	2208      	movs	r2, #8
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 f86a 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b74:	f000 f87a 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	22fa      	movs	r2, #250	; 0xfa
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b80:	1d39      	adds	r1, r7, #4
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b84:	220c      	movs	r2, #12
 8000b86:	0018      	movs	r0, r3
 8000b88:	f002 f85c 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000b90:	f000 f86c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <MX_TIM3_Init+0x110>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f8fe 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b00e      	add	sp, #56	; 0x38
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000074 	.word	0x20000074
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	000001ff 	.word	0x000001ff

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	240c      	movs	r4, #12
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f002 fd95 	bl	80036f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0289      	lsls	r1, r1, #10
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0309      	lsls	r1, r1, #12
 8000bec:	430a      	orrs	r2, r1
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	031b      	lsls	r3, r3, #12
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	02c9      	lsls	r1, r1, #11
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_GPIO_Init+0xa4>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	02db      	lsls	r3, r3, #11
 8000c14:	4013      	ands	r3, r2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2288      	movs	r2, #136	; 0x88
 8000c24:	0352      	lsls	r2, r2, #13
 8000c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	193a      	adds	r2, r7, r4
 8000c30:	2390      	movs	r3, #144	; 0x90
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fab8 	bl	80011ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2005      	movs	r0, #5
 8000c42:	f000 fa81 	bl	8001148 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f000 fa93 	bl	8001172 <HAL_NVIC_EnableIRQ>

}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b009      	add	sp, #36	; 0x24
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* Interrupt Funktionen */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	1dbb      	adds	r3, r7, #6
 8000c62:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
    {
   // HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_Channel_3);
    //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // Toggle The Output (LED) Pin
    }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	619a      	str	r2, [r3, #24]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0549      	lsls	r1, r1, #21
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	055b      	lsls	r3, r3, #21
 8000cac:	4013      	ands	r3, r2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f002 fd0c 	bl	80036f0 <memset>
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_I2C_MspInit+0x90>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d131      	bne.n	8000d46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	02c9      	lsls	r1, r1, #11
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	02db      	lsls	r3, r3, #11
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	0021      	movs	r1, r4
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	22c0      	movs	r2, #192	; 0xc0
 8000d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2212      	movs	r2, #18
 8000d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2203      	movs	r2, #3
 8000d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f000 fa41 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d2c:	69da      	ldr	r2, [r3, #28]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0389      	lsls	r1, r1, #14
 8000d34:	430a      	orrs	r2, r1
 8000d36:	61da      	str	r2, [r3, #28]
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000d3a:	69da      	ldr	r2, [r3, #28]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b00b      	add	sp, #44	; 0x2c
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_TIM_Base_MspInit+0x34>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10b      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_TIM_Base_MspInit+0x38>)
 8000d70:	69da      	ldr	r2, [r3, #28]
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_TIM_Base_MspInit+0x38>)
 8000d74:	2102      	movs	r1, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	61da      	str	r2, [r3, #28]
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_TIM_Base_MspInit+0x38>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40000400 	.word	0x40000400
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	240c      	movs	r4, #12
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	2314      	movs	r3, #20
 8000da8:	001a      	movs	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f002 fca0 	bl	80036f0 <memset>
  if(htim->Instance==TIM3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_TIM_MspPostInit+0xa0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d13a      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_TIM_MspPostInit+0xa4>)
 8000dbc:	695a      	ldr	r2, [r3, #20]
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <HAL_TIM_MspPostInit+0xa4>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0309      	lsls	r1, r1, #12
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_TIM_MspPostInit+0xa4>)
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	031b      	lsls	r3, r3, #12
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_Blue_LED_Pin;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2201      	movs	r2, #1
 8000df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH3_Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_TIM_MspPostInit+0xa8>)
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	f000 f9d5 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH4_Green_LED_Pin;
 8000e02:	0021      	movs	r1, r4
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2202      	movs	r2, #2
 8000e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH4_Green_LED_GPIO_Port, &GPIO_InitStruct);
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_TIM_MspPostInit+0xa8>)
 8000e28:	0019      	movs	r1, r3
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	f000 f9be 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b009      	add	sp, #36	; 0x24
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48000800 	.word	0x48000800

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f882 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fb08 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eb6:	f7ff ffe4 	bl	8000e82 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000eba:	f002 fbf5 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fc79 	bl	80007b4 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed0:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000ed4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed8:	200000c0 	.word	0x200000c0

08000edc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_COMP_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_Init+0x24>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_Init+0x24>)
 8000eea:	2110      	movs	r1, #16
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f809 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff febf 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	23fa      	movs	r3, #250	; 0xfa
 8000f1c:	0098      	lsls	r0, r3, #2
 8000f1e:	f7ff f8f3 	bl	8000108 <__udivsi3>
 8000f22:	0003      	movs	r3, r0
 8000f24:	0019      	movs	r1, r3
 8000f26:	0020      	movs	r0, r4
 8000f28:	f7ff f8ee 	bl	8000108 <__udivsi3>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f92f 	bl	8001192 <HAL_SYSTICK_Config>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e00f      	b.n	8000f5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d80b      	bhi.n	8000f5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f8fc 	bl	8001148 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_InitTick+0x64>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b003      	add	sp, #12
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	18d2      	adds	r2, r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200000bc 	.word	0x200000bc

08000f94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	200000bc 	.word	0x200000bc

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b7f      	cmp	r3, #127	; 0x7f
 8001002:	d809      	bhi.n	8001018 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	231f      	movs	r3, #31
 800100c:	401a      	ands	r2, r3
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_EnableIRQ+0x30>)
 8001010:	2101      	movs	r1, #1
 8001012:	4091      	lsls	r1, r2
 8001014:	000a      	movs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
  }
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	0002      	movs	r2, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b7f      	cmp	r3, #127	; 0x7f
 8001038:	d828      	bhi.n	800108c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	33c0      	adds	r3, #192	; 0xc0
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	589b      	ldr	r3, [r3, r2]
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	0011      	movs	r1, r2
 8001050:	2203      	movs	r2, #3
 8001052:	400a      	ands	r2, r1
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	21ff      	movs	r1, #255	; 0xff
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	43d2      	mvns	r2, r2
 800105e:	401a      	ands	r2, r3
 8001060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	401a      	ands	r2, r3
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	0018      	movs	r0, r3
 8001070:	2303      	movs	r3, #3
 8001072:	4003      	ands	r3, r0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	430a      	orrs	r2, r1
 8001084:	33c0      	adds	r3, #192	; 0xc0
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800108a:	e031      	b.n	80010f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <__NVIC_SetPriority+0xd8>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	0019      	movs	r1, r3
 8001094:	230f      	movs	r3, #15
 8001096:	400b      	ands	r3, r1
 8001098:	3b08      	subs	r3, #8
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3306      	adds	r3, #6
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <__NVIC_SetPriority+0xd8>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	001c      	movs	r4, r3
 80010dc:	230f      	movs	r3, #15
 80010de:	4023      	ands	r3, r4
 80010e0:	3b08      	subs	r3, #8
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	430a      	orrs	r2, r1
 80010e6:	3306      	adds	r3, #6
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	18c3      	adds	r3, r0, r3
 80010ec:	3304      	adds	r3, #4
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b003      	add	sp, #12
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	045b      	lsls	r3, r3, #17
 8001110:	429a      	cmp	r2, r3
 8001112:	d301      	bcc.n	8001118 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001114:	2301      	movs	r3, #1
 8001116:	e010      	b.n	800113a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <SysTick_Config+0x44>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	3a01      	subs	r2, #1
 800111e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001120:	2301      	movs	r3, #1
 8001122:	425b      	negs	r3, r3
 8001124:	2103      	movs	r1, #3
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ff7c 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x44>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	210f      	movs	r1, #15
 8001154:	187b      	adds	r3, r7, r1
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	187b      	adds	r3, r7, r1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	0002      	movs	r2, r0
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff33 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ffaf 	bl	8001100 <SysTick_Config>
 80011a2:	0003      	movs	r3, r0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e14f      	b.n	800145c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <HAL_GPIO_Init+0x28>
 80011d2:	e140      	b.n	8001456 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d130      	bne.n	800124e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001222:	2201      	movs	r2, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	2201      	movs	r2, #1
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	4013      	ands	r3, r2
 8001256:	2b03      	cmp	r3, #3
 8001258:	d017      	beq.n	800128a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d123      	bne.n	80012de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	58d3      	ldr	r3, [r2, r3]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2207      	movs	r2, #7
 80012a8:	4013      	ands	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2107      	movs	r1, #7
 80012c2:	400b      	ands	r3, r1
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	6939      	ldr	r1, [r7, #16]
 80012dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	401a      	ands	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	4013      	ands	r3, r2
 800131c:	d100      	bne.n	8001320 <HAL_GPIO_Init+0x174>
 800131e:	e09a      	b.n	8001456 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 8001326:	2101      	movs	r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	619a      	str	r2, [r3, #24]
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x2cc>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	589b      	ldr	r3, [r3, r2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2203      	movs	r2, #3
 800134a:	4013      	ands	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	2390      	movs	r3, #144	; 0x90
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	429a      	cmp	r2, r3
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x1e2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x1de>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a43      	ldr	r2, [pc, #268]	; (8001480 <HAL_GPIO_Init+0x2d4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x1da>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a42      	ldr	r2, [pc, #264]	; (8001484 <HAL_GPIO_Init+0x2d8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x1d6>
 800137e:	2303      	movs	r3, #3
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001382:	2305      	movs	r3, #5
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x1e4>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x1e4>
 800138e:	2300      	movs	r3, #0
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	2103      	movs	r1, #3
 8001394:	400a      	ands	r2, r1
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x2cc>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	029b      	lsls	r3, r3, #10
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	035b      	lsls	r3, r3, #13
 800141a:	4013      	ands	r3, r2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	039b      	lsls	r3, r3, #14
 8001444:	4013      	ands	r3, r2
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	40da      	lsrs	r2, r3
 8001464:	1e13      	subs	r3, r2, #0
 8001466:	d000      	beq.n	800146a <HAL_GPIO_Init+0x2be>
 8001468:	e6a8      	b.n	80011bc <HAL_GPIO_Init+0x10>
  } 
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b006      	add	sp, #24
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	1dbb      	adds	r3, r7, #6
 8001496:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	1dba      	adds	r2, r7, #6
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	4013      	ands	r3, r2
 80014a2:	d008      	beq.n	80014b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014a6:	1dba      	adds	r2, r7, #6
 80014a8:	8812      	ldrh	r2, [r2, #0]
 80014aa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	1dbb      	adds	r3, r7, #6
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fbd1 	bl	8000c58 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e082      	b.n	80015dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2241      	movs	r2, #65	; 0x41
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2240      	movs	r2, #64	; 0x40
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff fbe7 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2241      	movs	r2, #65	; 0x41
 80014f6:	2124      	movs	r1, #36	; 0x24
 80014f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	438a      	bics	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4934      	ldr	r1, [pc, #208]	; (80015e4 <HAL_I2C_Init+0x120>)
 8001514:	400a      	ands	r2, r1
 8001516:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4931      	ldr	r1, [pc, #196]	; (80015e8 <HAL_I2C_Init+0x124>)
 8001524:	400a      	ands	r2, r1
 8001526:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d108      	bne.n	8001542 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0209      	lsls	r1, r1, #8
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e007      	b.n	8001552 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2184      	movs	r1, #132	; 0x84
 800154c:	0209      	lsls	r1, r1, #8
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d104      	bne.n	8001564 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	491f      	ldr	r1, [pc, #124]	; (80015ec <HAL_I2C_Init+0x128>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	491a      	ldr	r1, [pc, #104]	; (80015e8 <HAL_I2C_Init+0x124>)
 8001580:	400a      	ands	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	431a      	orrs	r2, r3
 800158e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69d9      	ldr	r1, [r3, #28]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2241      	movs	r2, #65	; 0x41
 80015c8:	2120      	movs	r1, #32
 80015ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2242      	movs	r2, #66	; 0x42
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	f0ffffff 	.word	0xf0ffffff
 80015e8:	ffff7fff 	.word	0xffff7fff
 80015ec:	02008000 	.word	0x02008000

080015f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	0008      	movs	r0, r1
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	0019      	movs	r1, r3
 80015fe:	230a      	movs	r3, #10
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	1c02      	adds	r2, r0, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	2308      	movs	r3, #8
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	1c0a      	adds	r2, r1, #0
 800160c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2241      	movs	r2, #65	; 0x41
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	d000      	beq.n	800161c <HAL_I2C_Master_Transmit+0x2c>
 800161a:	e0e7      	b.n	80017ec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	5c9b      	ldrb	r3, [r3, r2]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_I2C_Master_Transmit+0x3a>
 8001626:	2302      	movs	r3, #2
 8001628:	e0e1      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001632:	f7ff fcaf 	bl	8000f94 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	0219      	lsls	r1, r3, #8
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2319      	movs	r3, #25
 8001646:	2201      	movs	r2, #1
 8001648:	f000 fa04 	bl	8001a54 <I2C_WaitOnFlagUntilTimeout>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2241      	movs	r2, #65	; 0x41
 8001658:	2121      	movs	r1, #33	; 0x21
 800165a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2242      	movs	r2, #66	; 0x42
 8001660:	2110      	movs	r1, #16
 8001662:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2208      	movs	r2, #8
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d911      	bls.n	80016ae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	22ff      	movs	r2, #255	; 0xff
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	b2da      	uxtb	r2, r3
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	045c      	lsls	r4, r3, #17
 800169a:	230a      	movs	r3, #10
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	8819      	ldrh	r1, [r3, #0]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <HAL_I2C_Master_Transmit+0x208>)
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	0023      	movs	r3, r4
 80016a8:	f000 fb74 	bl	8001d94 <I2C_TransferConfig>
 80016ac:	e075      	b.n	800179a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	049c      	lsls	r4, r3, #18
 80016c2:	230a      	movs	r3, #10
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	8819      	ldrh	r1, [r3, #0]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_I2C_Master_Transmit+0x208>)
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	0023      	movs	r3, r4
 80016d0:	f000 fb60 	bl	8001d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016d4:	e061      	b.n	800179a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f9f8 	bl	8001ad2 <I2C_WaitOnTXISFlagUntilTimeout>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e081      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d03a      	beq.n	800179a <HAL_I2C_Master_Transmit+0x1aa>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d136      	bne.n	800179a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0013      	movs	r3, r2
 8001736:	2200      	movs	r2, #0
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	f000 f98b 	bl	8001a54 <I2C_WaitOnFlagUntilTimeout>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e053      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d911      	bls.n	8001774 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	b2da      	uxtb	r2, r3
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	045c      	lsls	r4, r3, #17
 8001760:	230a      	movs	r3, #10
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 fb11 	bl	8001d94 <I2C_TransferConfig>
 8001772:	e012      	b.n	800179a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	049c      	lsls	r4, r3, #18
 8001788:	230a      	movs	r3, #10
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	8819      	ldrh	r1, [r3, #0]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	0023      	movs	r3, r4
 8001796:	f000 fafd 	bl	8001d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d198      	bne.n	80016d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f9d0 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01a      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <HAL_I2C_Master_Transmit+0x20c>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2241      	movs	r2, #65	; 0x41
 80017d4:	2120      	movs	r1, #32
 80017d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2242      	movs	r2, #66	; 0x42
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
  }
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b007      	add	sp, #28
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	80002000 	.word	0x80002000
 80017fc:	fe00e800 	.word	0xfe00e800

08001800 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	0008      	movs	r0, r1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	0019      	movs	r1, r3
 800180e:	230a      	movs	r3, #10
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	1c02      	adds	r2, r0, #0
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	2308      	movs	r3, #8
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	1c0a      	adds	r2, r1, #0
 800181c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2241      	movs	r2, #65	; 0x41
 8001822:	5c9b      	ldrb	r3, [r3, r2]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	d000      	beq.n	800182c <HAL_I2C_Master_Receive+0x2c>
 800182a:	e0e8      	b.n	80019fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_I2C_Master_Receive+0x3a>
 8001836:	2302      	movs	r3, #2
 8001838:	e0e2      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001842:	f7ff fba7 	bl	8000f94 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	0219      	lsls	r1, r3, #8
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2319      	movs	r3, #25
 8001856:	2201      	movs	r2, #1
 8001858:	f000 f8fc 	bl	8001a54 <I2C_WaitOnFlagUntilTimeout>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cd      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2241      	movs	r2, #65	; 0x41
 8001868:	2122      	movs	r1, #34	; 0x22
 800186a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2242      	movs	r2, #66	; 0x42
 8001870:	2110      	movs	r1, #16
 8001872:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2208      	movs	r2, #8
 8001884:	18ba      	adds	r2, r7, r2
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d911      	bls.n	80018be <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	045c      	lsls	r4, r3, #17
 80018aa:	230a      	movs	r3, #10
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	8819      	ldrh	r1, [r3, #0]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <HAL_I2C_Master_Receive+0x208>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	0023      	movs	r3, r4
 80018b8:	f000 fa6c 	bl	8001d94 <I2C_TransferConfig>
 80018bc:	e076      	b.n	80019ac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	049c      	lsls	r4, r3, #18
 80018d2:	230a      	movs	r3, #10
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	8819      	ldrh	r1, [r3, #0]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_I2C_Master_Receive+0x208>)
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	0023      	movs	r3, r4
 80018e0:	f000 fa58 	bl	8001d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018e4:	e062      	b.n	80019ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 f96b 	bl	8001bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e082      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d03a      	beq.n	80019ac <HAL_I2C_Master_Receive+0x1ac>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	d136      	bne.n	80019ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800193e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	0013      	movs	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	f000 f882 	bl	8001a54 <I2C_WaitOnFlagUntilTimeout>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e053      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d911      	bls.n	8001986 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	22ff      	movs	r2, #255	; 0xff
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	045c      	lsls	r4, r3, #17
 8001972:	230a      	movs	r3, #10
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	8819      	ldrh	r1, [r3, #0]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0023      	movs	r3, r4
 8001980:	f000 fa08 	bl	8001d94 <I2C_TransferConfig>
 8001984:	e012      	b.n	80019ac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001994:	b2da      	uxtb	r2, r3
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	049c      	lsls	r4, r3, #18
 800199a:	230a      	movs	r3, #10
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	0023      	movs	r3, r4
 80019a8:	f000 f9f4 	bl	8001d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d197      	bne.n	80018e6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 f8c7 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e01a      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2220      	movs	r2, #32
 80019d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	490b      	ldr	r1, [pc, #44]	; (8001a0c <HAL_I2C_Master_Receive+0x20c>)
 80019de:	400a      	ands	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2241      	movs	r2, #65	; 0x41
 80019e6:	2120      	movs	r1, #32
 80019e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2242      	movs	r2, #66	; 0x42
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
  }
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b007      	add	sp, #28
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	80002400 	.word	0x80002400
 8001a0c:	fe00e800 	.word	0xfe00e800

08001a10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d103      	bne.n	8001a2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d007      	beq.n	8001a4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	619a      	str	r2, [r3, #24]
  }
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a64:	e021      	b.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	d01e      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7ff fa92 	bl	8000f94 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d302      	bcc.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d113      	bne.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	2220      	movs	r2, #32
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2241      	movs	r2, #65	; 0x41
 8001a92:	2120      	movs	r1, #32
 8001a94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2242      	movs	r2, #66	; 0x42
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	425a      	negs	r2, r3
 8001aba:	4153      	adcs	r3, r2
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	001a      	movs	r2, r3
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d0ce      	beq.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ade:	e02b      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f8da 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e029      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	d01e      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7ff fa4b 	bl	8000f94 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d113      	bne.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	2220      	movs	r2, #32
 8001b16:	431a      	orrs	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2120      	movs	r1, #32
 8001b22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2242      	movs	r2, #66	; 0x42
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e007      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1cc      	bne.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5c:	e028      	b.n	8001bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 f89b 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e026      	b.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fa0f 	bl	8000f94 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d113      	bne.n	8001bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	2120      	movs	r1, #32
 8001b9a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2242      	movs	r2, #66	; 0x42
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2240      	movs	r2, #64	; 0x40
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e007      	b.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d1cf      	bne.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bd4:	e055      	b.n	8001c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f85f 	bl	8001ca0 <I2C_IsAcknowledgeFailed>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d001      	beq.n	8001bea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e053      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d129      	bne.n	8001c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d105      	bne.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e03f      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2220      	movs	r2, #32
 8001c18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	491d      	ldr	r1, [pc, #116]	; (8001c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2241      	movs	r2, #65	; 0x41
 8001c34:	2120      	movs	r1, #32
 8001c36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2242      	movs	r2, #66	; 0x42
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	2100      	movs	r1, #0
 8001c46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e022      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4c:	f7ff f9a2 	bl	8000f94 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d302      	bcc.n	8001c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	2220      	movs	r2, #32
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2241      	movs	r2, #65	; 0x41
 8001c72:	2120      	movs	r1, #32
 8001c74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e007      	b.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d1a2      	bne.n	8001bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	fe00e800 	.word	0xfe00e800

08001ca0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d164      	bne.n	8001d84 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	049b      	lsls	r3, r3, #18
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	049b      	lsls	r3, r3, #18
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d02b      	beq.n	8001d26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	01c9      	lsls	r1, r1, #7
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce0:	e021      	b.n	8001d26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	d01e      	beq.n	8001d26 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce8:	f7ff f954 	bl	8000f94 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <I2C_IsAcknowledgeFailed+0x5e>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d113      	bne.n	8001d26 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	2220      	movs	r2, #32
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2241      	movs	r2, #65	; 0x41
 8001d0e:	2120      	movs	r1, #32
 8001d10:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2242      	movs	r2, #66	; 0x42
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e02f      	b.n	8001d86 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d1d6      	bne.n	8001ce2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2220      	movs	r2, #32
 8001d42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff fe62 	bl	8001a10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	490e      	ldr	r1, [pc, #56]	; (8001d90 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	2204      	movs	r2, #4
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2241      	movs	r2, #65	; 0x41
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2242      	movs	r2, #66	; 0x42
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	fe00e800 	.word	0xfe00e800

08001d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	0008      	movs	r0, r1
 8001d9e:	0011      	movs	r1, r2
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	240a      	movs	r4, #10
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	1c02      	adds	r2, r0, #0
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	2009      	movs	r0, #9
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	1c0a      	adds	r2, r1, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	0d51      	lsrs	r1, r2, #21
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	00d2      	lsls	r2, r2, #3
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <I2C_TransferConfig+0x68>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	43d2      	mvns	r2, r2
 8001dc8:	401a      	ands	r2, r3
 8001dca:	0011      	movs	r1, r2
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	059b      	lsls	r3, r3, #22
 8001dd2:	0d9a      	lsrs	r2, r3, #22
 8001dd4:	183b      	adds	r3, r7, r0
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	0418      	lsls	r0, r3, #16
 8001dda:	23ff      	movs	r3, #255	; 0xff
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	4003      	ands	r3, r0
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b005      	add	sp, #20
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	03ff63ff 	.word	0x03ff63ff

08001e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2241      	movs	r2, #65	; 0x41
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d138      	bne.n	8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e032      	b.n	8001e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	2101      	movs	r1, #1
 8001e2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2241      	movs	r2, #65	; 0x41
 8001e30:	2124      	movs	r1, #36	; 0x24
 8001e32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4911      	ldr	r1, [pc, #68]	; (8001e94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2241      	movs	r2, #65	; 0x41
 8001e78:	2120      	movs	r1, #32
 8001e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	2100      	movs	r1, #0
 8001e82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	ffffefff 	.word	0xffffefff

08001e98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d139      	bne.n	8001f22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2240      	movs	r2, #64	; 0x40
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e033      	b.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2241      	movs	r2, #65	; 0x41
 8001ec8:	2124      	movs	r1, #36	; 0x24
 8001eca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	438a      	bics	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2241      	movs	r2, #65	; 0x41
 8001f12:	2120      	movs	r1, #32
 8001f14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	fffff0ff 	.word	0xfffff0ff

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e301      	b.n	8002546 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_OscConfig+0x1e>
 8001f4c:	e08d      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f4e:	4bc3      	ldr	r3, [pc, #780]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00e      	beq.n	8001f78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5a:	4bc0      	ldr	r3, [pc, #768]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x64>
 8001f66:	4bbd      	ldr	r3, [pc, #756]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	401a      	ands	r2, r3
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10d      	bne.n	8001f94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4bb8      	ldr	r3, [pc, #736]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_OscConfig+0x56>
 8001f84:	e070      	b.n	8002068 <HAL_RCC_OscConfig+0x138>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d000      	beq.n	8001f90 <HAL_RCC_OscConfig+0x60>
 8001f8e:	e06b      	b.n	8002068 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2d8      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x7c>
 8001f9c:	4baf      	ldr	r3, [pc, #700]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4bae      	ldr	r3, [pc, #696]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0249      	lsls	r1, r1, #9
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e02f      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x9e>
 8001fb4:	4ba9      	ldr	r3, [pc, #676]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4ba8      	ldr	r3, [pc, #672]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fba:	49a9      	ldr	r1, [pc, #676]	; (8002260 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4ba5      	ldr	r3, [pc, #660]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	49a7      	ldr	r1, [pc, #668]	; (8002264 <HAL_RCC_OscConfig+0x334>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e01e      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xc4>
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4ba0      	ldr	r3, [pc, #640]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	02c9      	lsls	r1, r1, #11
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b9d      	ldr	r3, [pc, #628]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b9c      	ldr	r3, [pc, #624]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	0249      	lsls	r1, r1, #9
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xdc>
 8001ff4:	4b99      	ldr	r3, [pc, #612]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b98      	ldr	r3, [pc, #608]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	4999      	ldr	r1, [pc, #612]	; (8002260 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4b96      	ldr	r3, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b95      	ldr	r3, [pc, #596]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002006:	4997      	ldr	r1, [pc, #604]	; (8002264 <HAL_RCC_OscConfig+0x334>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d014      	beq.n	800203e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ffbe 	bl	8000f94 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201e:	f7fe ffb9 	bl	8000f94 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e28a      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002030:	4b8a      	ldr	r3, [pc, #552]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	4013      	ands	r3, r2
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0xee>
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe ffa9 	bl	8000f94 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe ffa4 	bl	8000f94 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e275      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x118>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_RCC_OscConfig+0x146>
 8002074:	e069      	b.n	800214a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002076:	4b79      	ldr	r3, [pc, #484]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	220c      	movs	r2, #12
 800207c:	4013      	ands	r3, r2
 800207e:	d00b      	beq.n	8002098 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002080:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	220c      	movs	r2, #12
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d11c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x196>
 800208c:	4b73      	ldr	r3, [pc, #460]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	4013      	ands	r3, r2
 8002096:	d116      	bne.n	80020c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002098:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x17e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e24b      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	22f8      	movs	r2, #248	; 0xf8
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00da      	lsls	r2, r3, #3
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c4:	e041      	b.n	800214a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d024      	beq.n	8002118 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe ff5b 	bl	8000f94 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e4:	f7fe ff56 	bl	8000f94 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e227      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f1      	beq.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	22f8      	movs	r2, #248	; 0xf8
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00da      	lsls	r2, r3, #3
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e018      	b.n	800214a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b4f      	ldr	r3, [pc, #316]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe ff36 	bl	8000f94 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe ff31 	bl	8000f94 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e202      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2208      	movs	r2, #8
 8002150:	4013      	ands	r3, r2
 8002152:	d036      	beq.n	80021c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d019      	beq.n	8002190 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 800215e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002162:	2101      	movs	r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe ff14 	bl	8000f94 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe ff0f 	bl	8000f94 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1e0      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d0f1      	beq.n	8002172 <HAL_RCC_OscConfig+0x242>
 800218e:	e018      	b.n	80021c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002196:	2101      	movs	r1, #1
 8002198:	438a      	bics	r2, r1
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe fefa 	bl	8000f94 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe fef5 	bl	8000f94 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1c6      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f1      	bne.n	80021a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x29e>
 80021cc:	e0b4      	b.n	8002338 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	201f      	movs	r0, #31
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	055b      	lsls	r3, r3, #21
 80021de:	4013      	ands	r3, r2
 80021e0:	d110      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0549      	lsls	r1, r1, #21
 80021ec:	430a      	orrs	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021fe:	183b      	adds	r3, r7, r0
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4013      	ands	r3, r2
 800220e:	d11a      	bne.n	8002246 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCC_OscConfig+0x338>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_RCC_OscConfig+0x338>)
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0049      	lsls	r1, r1, #1
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe feb9 	bl	8000f94 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7fe feb4 	bl	8000f94 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e185      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x338>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10e      	bne.n	800226c <HAL_RCC_OscConfig+0x33c>
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_OscConfig+0x32c>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	621a      	str	r2, [r3, #32]
 800225a:	e035      	b.n	80022c8 <HAL_RCC_OscConfig+0x398>
 800225c:	40021000 	.word	0x40021000
 8002260:	fffeffff 	.word	0xfffeffff
 8002264:	fffbffff 	.word	0xfffbffff
 8002268:	40007000 	.word	0x40007000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x35e>
 8002274:	4bb6      	ldr	r3, [pc, #728]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4bb5      	ldr	r3, [pc, #724]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	621a      	str	r2, [r3, #32]
 8002280:	4bb3      	ldr	r3, [pc, #716]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	4bb2      	ldr	r3, [pc, #712]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002286:	2104      	movs	r1, #4
 8002288:	438a      	bics	r2, r1
 800228a:	621a      	str	r2, [r3, #32]
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x398>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x380>
 8002296:	4bae      	ldr	r3, [pc, #696]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	4bad      	ldr	r3, [pc, #692]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800229c:	2104      	movs	r1, #4
 800229e:	430a      	orrs	r2, r1
 80022a0:	621a      	str	r2, [r3, #32]
 80022a2:	4bab      	ldr	r3, [pc, #684]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	4baa      	ldr	r3, [pc, #680]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x398>
 80022b0:	4ba7      	ldr	r3, [pc, #668]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4ba6      	ldr	r3, [pc, #664]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	621a      	str	r2, [r3, #32]
 80022bc:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022c2:	2104      	movs	r1, #4
 80022c4:	438a      	bics	r2, r1
 80022c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d014      	beq.n	80022fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fe60 	bl	8000f94 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fe5b 	bl	8000f94 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a9b      	ldr	r2, [pc, #620]	; (8002554 <HAL_RCC_OscConfig+0x624>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e12b      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b98      	ldr	r3, [pc, #608]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x3aa>
 80022f8:	e013      	b.n	8002322 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7fe fe4b 	bl	8000f94 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e009      	b.n	8002318 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fe46 	bl	8000f94 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	4a91      	ldr	r2, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x624>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e116      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	4b87      	ldr	r3, [pc, #540]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002332:	4989      	ldr	r1, [pc, #548]	; (8002558 <HAL_RCC_OscConfig+0x628>)
 8002334:	400a      	ands	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d063      	beq.n	800240a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800234c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234e:	4b80      	ldr	r3, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002350:	2104      	movs	r1, #4
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002356:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fe17 	bl	8000f94 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800236c:	f7fe fe12 	bl	8000f94 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0e3      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d0f1      	beq.n	800236c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002388:	4b71      	ldr	r3, [pc, #452]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	22f8      	movs	r2, #248	; 0xf8
 800238e:	4393      	bics	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800239a:	430a      	orrs	r2, r1
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
 800239e:	e034      	b.n	800240a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	3305      	adds	r3, #5
 80023a6:	d111      	bne.n	80023cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	438a      	bics	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	22f8      	movs	r2, #248	; 0xf8
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023d2:	2104      	movs	r1, #4
 80023d4:	430a      	orrs	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023d8:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fdd6 	bl	8000f94 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ee:	f7fe fdd1 	bl	8000f94 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0a2      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002400:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d1f1      	bne.n	80023ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d100      	bne.n	8002414 <HAL_RCC_OscConfig+0x4e4>
 8002412:	e097      	b.n	8002544 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	220c      	movs	r2, #12
 800241a:	4013      	ands	r3, r2
 800241c:	2b08      	cmp	r3, #8
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x4f2>
 8002420:	e06b      	b.n	80024fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d14c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002430:	494a      	ldr	r1, [pc, #296]	; (800255c <HAL_RCC_OscConfig+0x62c>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fdad 	bl	8000f94 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fda8 	bl	8000f94 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e079      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	4013      	ands	r3, r2
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	220f      	movs	r2, #15
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <HAL_RCC_OscConfig+0x630>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	431a      	orrs	r2, r3
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0449      	lsls	r1, r1, #17
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fd7b 	bl	8000f94 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fd76 	bl	8000f94 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e047      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	049b      	lsls	r3, r3, #18
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x574>
 80024c2:	e03f      	b.n	8002544 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80024ca:	4924      	ldr	r1, [pc, #144]	; (800255c <HAL_RCC_OscConfig+0x62c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fd60 	bl	8000f94 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fd5b 	bl	8000f94 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e02c      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x5aa>
 80024f8:	e024      	b.n	8002544 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e01f      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_OscConfig+0x620>)
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	025b      	lsls	r3, r3, #9
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	429a      	cmp	r2, r3
 8002520:	d10e      	bne.n	8002540 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	220f      	movs	r2, #15
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	23f0      	movs	r3, #240	; 0xf0
 8002534:	039b      	lsls	r3, r3, #14
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b008      	add	sp, #32
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40021000 	.word	0x40021000
 8002554:	00001388 	.word	0x00001388
 8002558:	efffffff 	.word	0xefffffff
 800255c:	feffffff 	.word	0xfeffffff
 8002560:	ffc2ffff 	.word	0xffc2ffff

08002564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b3      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d911      	bls.n	80025aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09a      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d015      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2204      	movs	r2, #4
 80025ba:	4013      	ands	r3, r2
 80025bc:	d006      	beq.n	80025cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025c4:	21e0      	movs	r1, #224	; 0xe0
 80025c6:	00c9      	lsls	r1, r1, #3
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	22f0      	movs	r2, #240	; 0xf0
 80025d2:	4393      	bics	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d040      	beq.n	800266c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	d114      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d108      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e062      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e05b      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	4393      	bics	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fcaa 	bl	8000f94 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	e009      	b.n	800265a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002646:	f7fe fca5 	bl	8000f94 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x18c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e042      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	220c      	movs	r2, #12
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1ec      	bne.n	8002646 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d211      	bcs.n	800269e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x184>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e020      	b.n	80026e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_RCC_ClockConfig+0x190>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026bc:	f000 f820 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026c0:	0001      	movs	r1, r0
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x188>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	220f      	movs	r2, #15
 80026ca:	4013      	ands	r3, r2
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x194>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	000a      	movs	r2, r1
 80026d2:	40da      	lsrs	r2, r3
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x198>)
 80026d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fc15 	bl	8000f08 <HAL_InitTick>
  
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b004      	add	sp, #16
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	00001388 	.word	0x00001388
 80026f4:	fffff8ff 	.word	0xfffff8ff
 80026f8:	080037a8 	.word	0x080037a8
 80026fc:	20000000 	.word	0x20000000

08002700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08f      	sub	sp, #60	; 0x3c
 8002704:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002706:	2314      	movs	r3, #20
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800270e:	c313      	stmia	r3!, {r0, r1, r4}
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	4a29      	ldr	r2, [pc, #164]	; (80027bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002718:	ca13      	ldmia	r2!, {r0, r1, r4}
 800271a:	c313      	stmia	r3!, {r0, r1, r4}
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	220c      	movs	r2, #12
 800273e:	4013      	ands	r3, r2
 8002740:	2b04      	cmp	r3, #4
 8002742:	d002      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x4a>
 8002744:	2b08      	cmp	r3, #8
 8002746:	d003      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x50>
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800274e:	e02d      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	220f      	movs	r2, #15
 8002756:	4013      	ands	r3, r2
 8002758:	2214      	movs	r2, #20
 800275a:	18ba      	adds	r2, r7, r2
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	220f      	movs	r2, #15
 8002766:	4013      	ands	r3, r2
 8002768:	1d3a      	adds	r2, r7, #4
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800276e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	025b      	lsls	r3, r3, #9
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277a:	4812      	ldr	r0, [pc, #72]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800277c:	f7fd fcc4 	bl	8000108 <__udivsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	001a      	movs	r2, r3
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	4353      	muls	r3, r2
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
 800278a:	e009      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800278c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278e:	000a      	movs	r2, r1
 8002790:	0152      	lsls	r2, r2, #5
 8002792:	1a52      	subs	r2, r2, r1
 8002794:	0193      	lsls	r3, r2, #6
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	185b      	adds	r3, r3, r1
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027a4:	e002      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b00f      	add	sp, #60	; 0x3c
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	08003788 	.word	0x08003788
 80027bc:	08003798 	.word	0x08003798
 80027c0:	40021000 	.word	0x40021000
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	025b      	lsls	r3, r3, #9
 80027e0:	4013      	ands	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027e4:	e08e      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2017      	movs	r0, #23
 80027e8:	183b      	adds	r3, r7, r0
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	055b      	lsls	r3, r3, #21
 80027f6:	4013      	ands	r3, r2
 80027f8:	d110      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0549      	lsls	r1, r1, #21
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]
 8002808:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	055b      	lsls	r3, r3, #21
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	183b      	adds	r3, r7, r0
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4013      	ands	r3, r2
 8002826:	d11a      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	0049      	lsls	r1, r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe fbad 	bl	8000f94 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	e008      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe fba8 	bl	8000f94 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d0f0      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4013      	ands	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d034      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	23c0      	movs	r3, #192	; 0xc0
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4013      	ands	r3, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d02c      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a3b      	ldr	r2, [pc, #236]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	0249      	lsls	r1, r1, #9
 8002894:	430a      	orrs	r2, r1
 8002896:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	4b33      	ldr	r3, [pc, #204]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800289e:	4936      	ldr	r1, [pc, #216]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe fb6f 	bl	8000f94 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e009      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fb6a 	bl	8000f94 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	4a2d      	ldr	r2, [pc, #180]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e048      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ee:	2317      	movs	r3, #23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002900:	400a      	ands	r2, r1
 8002902:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	2203      	movs	r2, #3
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	2210      	movs	r2, #16
 8002932:	4393      	bics	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800293c:	430a      	orrs	r2, r1
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4013      	ands	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800295c:	430a      	orrs	r2, r1
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b006      	add	sp, #24
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
 8002974:	fffffcff 	.word	0xfffffcff
 8002978:	fffeffff 	.word	0xfffeffff
 800297c:	00001388 	.word	0x00001388
 8002980:	efffffff 	.word	0xefffffff

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e042      	b.n	8002a1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	223d      	movs	r2, #61	; 0x3d
 800299a:	5c9b      	ldrb	r3, [r3, r2]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	223c      	movs	r2, #60	; 0x3c
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fe f9d5 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223d      	movs	r2, #61	; 0x3d
 80029b6:	2102      	movs	r1, #2
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f000 fad7 	bl	8002f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2246      	movs	r2, #70	; 0x46
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	223e      	movs	r2, #62	; 0x3e
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	223f      	movs	r2, #63	; 0x3f
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2241      	movs	r2, #65	; 0x41
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2242      	movs	r2, #66	; 0x42
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2243      	movs	r2, #67	; 0x43
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2244      	movs	r2, #68	; 0x44
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2245      	movs	r2, #69	; 0x45
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223d      	movs	r2, #61	; 0x3d
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e042      	b.n	8002abc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	223d      	movs	r2, #61	; 0x3d
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223c      	movs	r2, #60	; 0x3c
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 f839 	bl	8002ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	223d      	movs	r2, #61	; 0x3d
 8002a56:	2102      	movs	r1, #2
 8002a58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	0019      	movs	r1, r3
 8002a64:	0010      	movs	r0, r2
 8002a66:	f000 fa87 	bl	8002f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2246      	movs	r2, #70	; 0x46
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	223e      	movs	r2, #62	; 0x3e
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	223f      	movs	r2, #63	; 0x3f
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2240      	movs	r2, #64	; 0x40
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2241      	movs	r2, #65	; 0x41
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2242      	movs	r2, #66	; 0x42
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2243      	movs	r2, #67	; 0x43
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2244      	movs	r2, #68	; 0x44
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2245      	movs	r2, #69	; 0x45
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	; 0x3d
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d108      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x22>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	223e      	movs	r2, #62	; 0x3e
 8002ae8:	5c9b      	ldrb	r3, [r3, r2]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	4193      	sbcs	r3, r2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e01f      	b.n	8002b36 <HAL_TIM_PWM_Start+0x62>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d108      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x3a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	223f      	movs	r2, #63	; 0x3f
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	4193      	sbcs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e013      	b.n	8002b36 <HAL_TIM_PWM_Start+0x62>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d108      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x52>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	5c9b      	ldrb	r3, [r3, r2]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	4193      	sbcs	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	e007      	b.n	8002b36 <HAL_TIM_PWM_Start+0x62>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	; 0x41
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	4193      	sbcs	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e074      	b.n	8002c28 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x7a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	223e      	movs	r2, #62	; 0x3e
 8002b48:	2102      	movs	r1, #2
 8002b4a:	5499      	strb	r1, [r3, r2]
 8002b4c:	e013      	b.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x8a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	223f      	movs	r2, #63	; 0x3f
 8002b58:	2102      	movs	r1, #2
 8002b5a:	5499      	strb	r1, [r3, r2]
 8002b5c:	e00b      	b.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x9a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	2102      	movs	r1, #2
 8002b6a:	5499      	strb	r1, [r3, r2]
 8002b6c:	e003      	b.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2241      	movs	r2, #65	; 0x41
 8002b72:	2102      	movs	r1, #2
 8002b74:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fd10 	bl	80035a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_TIM_PWM_Start+0x15c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_PWM_Start+0xd8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_TIM_PWM_Start+0x160>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_TIM_PWM_Start+0xd8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <HAL_TIM_PWM_Start+0x164>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_TIM_PWM_Start+0xd8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HAL_TIM_PWM_Start+0x168>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0xdc>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xde>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0209      	lsls	r1, r1, #8
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_PWM_Start+0x15c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00f      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_TIM_PWM_Start+0x16c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_TIM_PWM_Start+0x160>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d010      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	e007      	b.n	8002c26 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40014800 	.word	0x40014800
 8002c40:	40000400 	.word	0x40000400

08002c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2317      	movs	r3, #23
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	223c      	movs	r2, #60	; 0x3c
 8002c5c:	5c9b      	ldrb	r3, [r3, r2]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ad      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	223c      	movs	r2, #60	; 0x3c
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d100      	bne.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c74:	e076      	b.n	8002d64 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d900      	bls.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c7c:	e095      	b.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d04e      	beq.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d900      	bls.n	8002c8c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c8a:	e08e      	b.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d021      	beq.n	8002cdc <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c98:	e087      	b.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f9e8 	bl	8003078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	619a      	str	r2, [r3, #24]
      break;
 8002cda:	e06b      	b.n	8002db4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fa4f 	bl	8003188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0109      	lsls	r1, r1, #4
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4931      	ldr	r1, [pc, #196]	; (8002dcc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6999      	ldr	r1, [r3, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	021a      	lsls	r2, r3, #8
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	619a      	str	r2, [r3, #24]
      break;
 8002d20:	e048      	b.n	8002db4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fab0 	bl	8003290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69d9      	ldr	r1, [r3, #28]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	61da      	str	r2, [r3, #28]
      break;
 8002d62:	e027      	b.n	8002db4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fb15 	bl	800339c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0109      	lsls	r1, r1, #4
 8002d80:	430a      	orrs	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	490f      	ldr	r1, [pc, #60]	; (8002dcc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69d9      	ldr	r1, [r3, #28]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
      break;
 8002da8:	e004      	b.n	8002db4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002daa:	2317      	movs	r3, #23
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      break;
 8002db2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	223c      	movs	r2, #60	; 0x3c
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

  return status;
 8002dbc:	2317      	movs	r3, #23
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fffffbff 	.word	0xfffffbff

08002dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	230f      	movs	r3, #15
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223c      	movs	r2, #60	; 0x3c
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIM_ConfigClockSource+0x20>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0bc      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x19a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	; 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223d      	movs	r2, #61	; 0x3d
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2277      	movs	r2, #119	; 0x77
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0192      	lsls	r2, r2, #6
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xde>
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	0192      	lsls	r2, r2, #6
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d900      	bls.n	8002e36 <HAL_TIM_ConfigClockSource+0x66>
 8002e34:	e088      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0152      	lsls	r2, r2, #5
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d100      	bne.n	8002e40 <HAL_TIM_ConfigClockSource+0x70>
 8002e3e:	e088      	b.n	8002f52 <HAL_TIM_ConfigClockSource+0x182>
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	0152      	lsls	r2, r2, #5
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d900      	bls.n	8002e4a <HAL_TIM_ConfigClockSource+0x7a>
 8002e48:	e07e      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e4a:	2b70      	cmp	r3, #112	; 0x70
 8002e4c:	d018      	beq.n	8002e80 <HAL_TIM_ConfigClockSource+0xb0>
 8002e4e:	d900      	bls.n	8002e52 <HAL_TIM_ConfigClockSource+0x82>
 8002e50:	e07a      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e52:	2b60      	cmp	r3, #96	; 0x60
 8002e54:	d04f      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x126>
 8002e56:	d900      	bls.n	8002e5a <HAL_TIM_ConfigClockSource+0x8a>
 8002e58:	e076      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e5a:	2b50      	cmp	r3, #80	; 0x50
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x106>
 8002e5e:	d900      	bls.n	8002e62 <HAL_TIM_ConfigClockSource+0x92>
 8002e60:	e072      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d057      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x146>
 8002e66:	d900      	bls.n	8002e6a <HAL_TIM_ConfigClockSource+0x9a>
 8002e68:	e06e      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e6a:	2b30      	cmp	r3, #48	; 0x30
 8002e6c:	d063      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x166>
 8002e6e:	d86b      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d060      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x166>
 8002e74:	d868      	bhi.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d05d      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x166>
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d05b      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x166>
 8002e7e:	e063      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6899      	ldr	r1, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f000 fb68 	bl	8003564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2277      	movs	r2, #119	; 0x77
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
      break;
 8002eac:	e052      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f000 fb51 	bl	8003564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	01c9      	lsls	r1, r1, #7
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
      break;
 8002ed4:	e03e      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	f000 fac4 	bl	8003470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2150      	movs	r1, #80	; 0x50
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fb1e 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e02e      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	001a      	movs	r2, r3
 8002f04:	f000 fae2 	bl	80034cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2160      	movs	r1, #96	; 0x60
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 fb0e 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002f14:	e01e      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	001a      	movs	r2, r3
 8002f24:	f000 faa4 	bl	8003470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fafe 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002f34:	e00e      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0019      	movs	r1, r3
 8002f40:	0010      	movs	r0, r2
 8002f42:	f000 faf5 	bl	8003530 <TIM_ITRx_SetConfig>
      break;
 8002f46:	e005      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f48:	230f      	movs	r3, #15
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
      break;
 8002f50:	e000      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	223d      	movs	r2, #61	; 0x3d
 8002f58:	2101      	movs	r1, #1
 8002f5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	223c      	movs	r2, #60	; 0x3c
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

  return status;
 8002f64:	230f      	movs	r3, #15
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	ffff00ff 	.word	0xffff00ff

08002f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a34      	ldr	r2, [pc, #208]	; (800305c <TIM_Base_SetConfig+0xe4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d008      	beq.n	8002fa2 <TIM_Base_SetConfig+0x2a>
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d003      	beq.n	8002fa2 <TIM_Base_SetConfig+0x2a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <TIM_Base_SetConfig+0xe8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d108      	bne.n	8002fb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2270      	movs	r2, #112	; 0x70
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a29      	ldr	r2, [pc, #164]	; (800305c <TIM_Base_SetConfig+0xe4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d013      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <TIM_Base_SetConfig+0xe8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <TIM_Base_SetConfig+0xec>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <TIM_Base_SetConfig+0xf0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <TIM_Base_SetConfig+0xf4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x76>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <TIM_Base_SetConfig+0xf8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <TIM_Base_SetConfig+0xfc>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	4393      	bics	r3, r2
 8003006:	001a      	movs	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a0c      	ldr	r2, [pc, #48]	; (800305c <TIM_Base_SetConfig+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00b      	beq.n	8003046 <TIM_Base_SetConfig+0xce>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <TIM_Base_SetConfig+0xf0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <TIM_Base_SetConfig+0xce>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <TIM_Base_SetConfig+0xf4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0xce>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <TIM_Base_SetConfig+0xf8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d103      	bne.n	800304e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	615a      	str	r2, [r3, #20]
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b004      	add	sp, #16
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40002000 	.word	0x40002000
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	fffffcff 	.word	0xfffffcff

08003078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	2201      	movs	r2, #1
 8003088:	4393      	bics	r3, r2
 800308a:	001a      	movs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2270      	movs	r2, #112	; 0x70
 80030a6:	4393      	bics	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2203      	movs	r2, #3
 80030ae:	4393      	bics	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2202      	movs	r2, #2
 80030c0:	4393      	bics	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <TIM_OC1_SetConfig+0xf8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00b      	beq.n	80030ee <TIM_OC1_SetConfig+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <TIM_OC1_SetConfig+0xfc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <TIM_OC1_SetConfig+0x76>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a25      	ldr	r2, [pc, #148]	; (8003178 <TIM_OC1_SetConfig+0x100>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <TIM_OC1_SetConfig+0x76>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a24      	ldr	r2, [pc, #144]	; (800317c <TIM_OC1_SetConfig+0x104>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10c      	bne.n	8003108 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4393      	bics	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2204      	movs	r2, #4
 8003104:	4393      	bics	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <TIM_OC1_SetConfig+0xf8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_OC1_SetConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <TIM_OC1_SetConfig+0xfc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_OC1_SetConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a17      	ldr	r2, [pc, #92]	; (8003178 <TIM_OC1_SetConfig+0x100>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_OC1_SetConfig+0xb0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <TIM_OC1_SetConfig+0x104>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d111      	bne.n	800314c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4a15      	ldr	r2, [pc, #84]	; (8003180 <TIM_OC1_SetConfig+0x108>)
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <TIM_OC1_SetConfig+0x10c>)
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b006      	add	sp, #24
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800
 8003180:	fffffeff 	.word	0xfffffeff
 8003184:	fffffdff 	.word	0xfffffdff

08003188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	2210      	movs	r2, #16
 8003198:	4393      	bics	r3, r2
 800319a:	001a      	movs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <TIM_OC2_SetConfig+0xe8>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <TIM_OC2_SetConfig+0xec>)
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4393      	bics	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a24      	ldr	r2, [pc, #144]	; (8003278 <TIM_OC2_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10d      	bne.n	8003206 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	4393      	bics	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4393      	bics	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <TIM_OC2_SetConfig+0xf0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_OC2_SetConfig+0x9e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1a      	ldr	r2, [pc, #104]	; (800327c <TIM_OC2_SetConfig+0xf4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_OC2_SetConfig+0x9e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <TIM_OC2_SetConfig+0xf8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC2_SetConfig+0x9e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <TIM_OC2_SetConfig+0xfc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d113      	bne.n	800324e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <TIM_OC2_SetConfig+0x100>)
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <TIM_OC2_SetConfig+0x104>)
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b006      	add	sp, #24
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffff8fff 	.word	0xffff8fff
 8003274:	fffffcff 	.word	0xfffffcff
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800
 8003288:	fffffbff 	.word	0xfffffbff
 800328c:	fffff7ff 	.word	0xfffff7ff

08003290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a35      	ldr	r2, [pc, #212]	; (8003374 <TIM_OC3_SetConfig+0xe4>)
 80032a0:	401a      	ands	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2270      	movs	r2, #112	; 0x70
 80032bc:	4393      	bics	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2203      	movs	r2, #3
 80032c4:	4393      	bics	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <TIM_OC3_SetConfig+0xe8>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <TIM_OC3_SetConfig+0xec>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10d      	bne.n	800330a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <TIM_OC3_SetConfig+0xf0>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <TIM_OC3_SetConfig+0xf4>)
 8003306:	4013      	ands	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <TIM_OC3_SetConfig+0xec>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_OC3_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <TIM_OC3_SetConfig+0xf8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_OC3_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <TIM_OC3_SetConfig+0xfc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_OC3_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <TIM_OC3_SetConfig+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d113      	bne.n	8003352 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <TIM_OC3_SetConfig+0x104>)
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <TIM_OC3_SetConfig+0x108>)
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b006      	add	sp, #24
 8003372:	bd80      	pop	{r7, pc}
 8003374:	fffffeff 	.word	0xfffffeff
 8003378:	fffffdff 	.word	0xfffffdff
 800337c:	40012c00 	.word	0x40012c00
 8003380:	fffff7ff 	.word	0xfffff7ff
 8003384:	fffffbff 	.word	0xfffffbff
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800
 8003394:	ffffefff 	.word	0xffffefff
 8003398:	ffffdfff 	.word	0xffffdfff

0800339c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a28      	ldr	r2, [pc, #160]	; (800344c <TIM_OC4_SetConfig+0xb0>)
 80033ac:	401a      	ands	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <TIM_OC4_SetConfig+0xb4>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <TIM_OC4_SetConfig+0xb8>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <TIM_OC4_SetConfig+0xbc>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	031b      	lsls	r3, r3, #12
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a19      	ldr	r2, [pc, #100]	; (800345c <TIM_OC4_SetConfig+0xc0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_OC4_SetConfig+0x78>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <TIM_OC4_SetConfig+0xc4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <TIM_OC4_SetConfig+0x78>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <TIM_OC4_SetConfig+0xc8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_OC4_SetConfig+0x78>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <TIM_OC4_SetConfig+0xcc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d109      	bne.n	8003428 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4a15      	ldr	r2, [pc, #84]	; (800346c <TIM_OC4_SetConfig+0xd0>)
 8003418:	4013      	ands	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	ffffefff 	.word	0xffffefff
 8003450:	ffff8fff 	.word	0xffff8fff
 8003454:	fffffcff 	.word	0xfffffcff
 8003458:	ffffdfff 	.word	0xffffdfff
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400
 8003468:	40014800 	.word	0x40014800
 800346c:	ffffbfff 	.word	0xffffbfff

08003470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2201      	movs	r2, #1
 8003488:	4393      	bics	r3, r2
 800348a:	001a      	movs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	22f0      	movs	r2, #240	; 0xf0
 800349a:	4393      	bics	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	220a      	movs	r2, #10
 80034ac:	4393      	bics	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}

080034cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	2210      	movs	r2, #16
 80034de:	4393      	bics	r3, r2
 80034e0:	001a      	movs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a0d      	ldr	r2, [pc, #52]	; (800352c <TIM_TI2_ConfigInputStage+0x60>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	22a0      	movs	r2, #160	; 0xa0
 8003508:	4393      	bics	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b006      	add	sp, #24
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	ffff0fff 	.word	0xffff0fff

08003530 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2270      	movs	r2, #112	; 0x70
 8003544:	4393      	bics	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	2207      	movs	r2, #7
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <TIM_ETR_SetConfig+0x3c>)
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	021a      	lsls	r2, r3, #8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	431a      	orrs	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b006      	add	sp, #24
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	ffff00ff 	.word	0xffff00ff

080035a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	221f      	movs	r2, #31
 80035b4:	4013      	ands	r3, r2
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	0013      	movs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	43d2      	mvns	r2, r2
 80035c6:	401a      	ands	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	211f      	movs	r1, #31
 80035d4:	400b      	ands	r3, r1
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4099      	lsls	r1, r3
 80035da:	000b      	movs	r3, r1
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b006      	add	sp, #24
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223c      	movs	r2, #60	; 0x3c
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003600:	2302      	movs	r3, #2
 8003602:	e047      	b.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	223c      	movs	r2, #60	; 0x3c
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223d      	movs	r2, #61	; 0x3d
 8003610:	2102      	movs	r1, #2
 8003612:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2270      	movs	r2, #112	; 0x70
 8003628:	4393      	bics	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00f      	beq.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	05db      	lsls	r3, r3, #23
 8003650:	429a      	cmp	r2, r3
 8003652:	d009      	beq.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a11      	ldr	r2, [pc, #68]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10c      	bne.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	4393      	bics	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	223d      	movs	r2, #61	; 0x3d
 8003686:	2101      	movs	r1, #1
 8003688:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40014000 	.word	0x40014000

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	2600      	movs	r6, #0
 80036ac:	4d0c      	ldr	r5, [pc, #48]	; (80036e0 <__libc_init_array+0x38>)
 80036ae:	4c0d      	ldr	r4, [pc, #52]	; (80036e4 <__libc_init_array+0x3c>)
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	2600      	movs	r6, #0
 80036ba:	f000 f821 	bl	8003700 <_init>
 80036be:	4d0a      	ldr	r5, [pc, #40]	; (80036e8 <__libc_init_array+0x40>)
 80036c0:	4c0a      	ldr	r4, [pc, #40]	; (80036ec <__libc_init_array+0x44>)
 80036c2:	1b64      	subs	r4, r4, r5
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	00b3      	lsls	r3, r6, #2
 80036ce:	58eb      	ldr	r3, [r5, r3]
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	00b3      	lsls	r3, r6, #2
 80036d8:	58eb      	ldr	r3, [r5, r3]
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	080037b8 	.word	0x080037b8
 80036e4:	080037b8 	.word	0x080037b8
 80036e8:	080037b8 	.word	0x080037b8
 80036ec:	080037bc 	.word	0x080037bc

080036f0 <memset>:
 80036f0:	0003      	movs	r3, r0
 80036f2:	1882      	adds	r2, r0, r2
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	7019      	strb	r1, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
