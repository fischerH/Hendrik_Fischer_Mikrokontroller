
Hendrik_Fischer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003b24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003b24  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be8e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6b  00000000  00000000  0002bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a1c  00000000  00000000  0002f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f16f  00000000  00000000  00041da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006da7c  00000000  00000000  00050f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be98f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000be9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a80 	.word	0x08003a80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a80 	.word	0x08003a80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <InitialisiereGyro>:
#include <string.h>
#include <gyro.h>
#include <stdbool.h>


bool InitialisiereGyro(){
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[15];
	buf[0] = CTRL_REG1;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2213      	movs	r2, #19
 80003fe:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	705a      	strb	r2, [r3, #1]

	//konfiguriere Control Register 1
		//versetze Sensor in Standby, um Control Register 1 ändern zu können ohne die Genauigkeit der Output Daten zu gefähreden -> Data Sheet S.45
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 8000406:	250f      	movs	r5, #15
 8000408:	197c      	adds	r4, r7, r5
 800040a:	003a      	movs	r2, r7
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <InitialisiereGyro+0xd0>)
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2302      	movs	r3, #2
 8000416:	2142      	movs	r1, #66	; 0x42
 8000418:	f001 f914 	bl	8001644 <HAL_I2C_Master_Transmit>
 800041c:	0003      	movs	r3, r0
 800041e:	7023      	strb	r3, [r4, #0]

		//konfiguriere Wert, der in CTRL_REG1 geschrieben werden soll
	buf[1] = 0b00001111; //Bit7: Unused		Bit6: Reset 0/1		Bit5: SelfTest 0/1		Bit4-2: Output Data Rate 011 für 100 Hz gewählt		Bit 1-0: Active Mode gewählt mit 11
 8000420:	003b      	movs	r3, r7
 8000422:	220f      	movs	r2, #15
 8000424:	705a      	strb	r2, [r3, #1]


	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 2, HAL_MAX_DELAY);
 8000426:	197c      	adds	r4, r7, r5
 8000428:	003a      	movs	r2, r7
 800042a:	4826      	ldr	r0, [pc, #152]	; (80004c4 <InitialisiereGyro+0xd0>)
 800042c:	2301      	movs	r3, #1
 800042e:	425b      	negs	r3, r3
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2302      	movs	r3, #2
 8000434:	2142      	movs	r1, #66	; 0x42
 8000436:	f001 f905 	bl	8001644 <HAL_I2C_Master_Transmit>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]

	HAL_Delay(80);
 800043e:	2050      	movs	r0, #80	; 0x50
 8000440:	f000 fddc 	bl	8000ffc <HAL_Delay>
	//überprüfe, ob Control Register 1 richtig konfiguriert wurde

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Gyro, CTRL_REG1, 1, buf, 1, 1000);
 8000444:	197c      	adds	r4, r7, r5
 8000446:	481f      	ldr	r0, [pc, #124]	; (80004c4 <InitialisiereGyro+0xd0>)
 8000448:	23fa      	movs	r3, #250	; 0xfa
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	9302      	str	r3, [sp, #8]
 800044e:	2301      	movs	r3, #1
 8000450:	9301      	str	r3, [sp, #4]
 8000452:	003b      	movs	r3, r7
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2213      	movs	r2, #19
 800045a:	2142      	movs	r1, #66	; 0x42
 800045c:	f001 fb02 	bl	8001a64 <HAL_I2C_Mem_Read>
 8000460:	0003      	movs	r3, r0
 8000462:	7023      	strb	r3, [r4, #0]
	//Kopiere Inhalt von buf[0] in buf[1]

	buf[1] = buf [0];
 8000464:	003b      	movs	r3, r7
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	003b      	movs	r3, r7
 800046a:	705a      	strb	r2, [r3, #1]

	//lese Device Identifier

 	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Gyro, WHO_AM_I_Gyro_Reg, 1, buf, 1, 1000);
 800046c:	197c      	adds	r4, r7, r5
 800046e:	4815      	ldr	r0, [pc, #84]	; (80004c4 <InitialisiereGyro+0xd0>)
 8000470:	23fa      	movs	r3, #250	; 0xfa
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	9302      	str	r3, [sp, #8]
 8000476:	2301      	movs	r3, #1
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	003b      	movs	r3, r7
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	220c      	movs	r2, #12
 8000482:	2142      	movs	r1, #66	; 0x42
 8000484:	f001 faee 	bl	8001a64 <HAL_I2C_Mem_Read>
 8000488:	0003      	movs	r3, r0
 800048a:	7023      	strb	r3, [r4, #0]



		if ( ret == HAL_OK && buf[0] == GyroDeviceID && buf[1] == 0b00001111) {
 800048c:	197b      	adds	r3, r7, r5
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d109      	bne.n	80004a8 <InitialisiereGyro+0xb4>
 8000494:	003b      	movs	r3, r7
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2bd7      	cmp	r3, #215	; 0xd7
 800049a:	d105      	bne.n	80004a8 <InitialisiereGyro+0xb4>
 800049c:	003b      	movs	r3, r7
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	d101      	bne.n	80004a8 <InitialisiereGyro+0xb4>
			//kein Hal-Fehler, GyroDeviceID ist korrekt, CTRL-Reg 1 hat richtige Werte
			return true;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e008      	b.n	80004ba <InitialisiereGyro+0xc6>

		}else{
			strcpy((char*)buf, "INIT ERROR");
 80004a8:	003b      	movs	r3, r7
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <InitialisiereGyro+0xd4>)
 80004ac:	ca03      	ldmia	r2!, {r0, r1}
 80004ae:	c303      	stmia	r3!, {r0, r1}
 80004b0:	8811      	ldrh	r1, [r2, #0]
 80004b2:	8019      	strh	r1, [r3, #0]
 80004b4:	7892      	ldrb	r2, [r2, #2]
 80004b6:	709a      	strb	r2, [r3, #2]
			return false;
 80004b8:	2300      	movs	r3, #0
		}

}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bdb0      	pop	{r4, r5, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000028 	.word	0x20000028
 80004c8:	08003a98 	.word	0x08003a98

080004cc <gyroWerteAuslesen>:



void gyroWerteAuslesen (int16_t *x_axis, int16_t *y_axis, int16_t *z_axis){
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;



	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = Gyro_Status_REG;
 80004d8:	2510      	movs	r5, #16
 80004da:	197b      	adds	r3, r7, r5
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]



	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Gyro, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 80004e0:	261f      	movs	r6, #31
 80004e2:	19bc      	adds	r4, r7, r6
 80004e4:	197a      	adds	r2, r7, r5
 80004e6:	4831      	ldr	r0, [pc, #196]	; (80005ac <gyroWerteAuslesen+0xe0>)
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2142      	movs	r1, #66	; 0x42
 80004f2:	f001 f8a7 	bl	8001644 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(80);
 80004fa:	2050      	movs	r0, #80	; 0x50
 80004fc:	f000 fd7e 	bl	8000ffc <HAL_Delay>

	  if ( ret == HAL_OK ) {
 8000500:	19bb      	adds	r3, r7, r6
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d148      	bne.n	800059a <gyroWerteAuslesen+0xce>
		  //Burst-Read
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Gyro, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 8000508:	19bc      	adds	r4, r7, r6
 800050a:	197a      	adds	r2, r7, r5
 800050c:	4827      	ldr	r0, [pc, #156]	; (80005ac <gyroWerteAuslesen+0xe0>)
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2307      	movs	r3, #7
 8000516:	2142      	movs	r1, #66	; 0x42
 8000518:	f001 f99c 	bl	8001854 <HAL_I2C_Master_Receive>
 800051c:	0003      	movs	r3, r0
 800051e:	7023      	strb	r3, [r4, #0]
		  HAL_Delay(80);
 8000520:	2050      	movs	r0, #80	; 0x50
 8000522:	f000 fd6b 	bl	8000ffc <HAL_Delay>
		if ( ret == HAL_OK ) {
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d12b      	bne.n	8000586 <gyroWerteAuslesen+0xba>
			*x_axis = 0;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]
			*x_axis = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 8000534:	197b      	adds	r3, r7, r5
 8000536:	785b      	ldrb	r3, [r3, #1]
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	b21a      	sxth	r2, r3
 800053c:	197b      	adds	r3, r7, r5
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	b21b      	sxth	r3, r3
 8000542:	4313      	orrs	r3, r2
 8000544:	b21a      	sxth	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	801a      	strh	r2, [r3, #0]
			*y_axis = 0;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
			*y_axis = (buf[3] << 8) | buf[4];
 8000550:	197b      	adds	r3, r7, r5
 8000552:	78db      	ldrb	r3, [r3, #3]
 8000554:	021b      	lsls	r3, r3, #8
 8000556:	b21a      	sxth	r2, r3
 8000558:	0029      	movs	r1, r5
 800055a:	197b      	adds	r3, r7, r5
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	b21b      	sxth	r3, r3
 8000560:	4313      	orrs	r3, r2
 8000562:	b21a      	sxth	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	801a      	strh	r2, [r3, #0]
			*z_axis = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	801a      	strh	r2, [r3, #0]
			*z_axis = (buf[5] << 8) | buf[6];
 800056e:	187b      	adds	r3, r7, r1
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	187b      	adds	r3, r7, r1
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21a      	sxth	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 8000584:	e00e      	b.n	80005a4 <gyroWerteAuslesen+0xd8>
			strcpy((char*)buf, "Error Read");
 8000586:	2310      	movs	r3, #16
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <gyroWerteAuslesen+0xe4>)
 800058c:	ca03      	ldmia	r2!, {r0, r1}
 800058e:	c303      	stmia	r3!, {r0, r1}
 8000590:	8811      	ldrh	r1, [r2, #0]
 8000592:	8019      	strh	r1, [r3, #0]
 8000594:	7892      	ldrb	r2, [r2, #2]
 8000596:	709a      	strb	r2, [r3, #2]
}
 8000598:	e004      	b.n	80005a4 <gyroWerteAuslesen+0xd8>
		  strcpy((char*)buf, "Error Write");
 800059a:	2310      	movs	r3, #16
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <gyroWerteAuslesen+0xe8>)
 80005a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80005a2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b009      	add	sp, #36	; 0x24
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	20000028 	.word	0x20000028
 80005b0:	08003aa4 	.word	0x08003aa4
 80005b4:	08003ab0 	.word	0x08003ab0

080005b8 <InitialisiereMagnetometer>:
#include <string.h>
#include <Magnetometer.h>
#include <stdbool.h>


bool InitialisiereMagnetometer(){
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af04      	add	r7, sp, #16
	uint8_t buf[15];


	//Versetze Sensor zur Konfiguration in Standby

	buf[0] = FXOS8700CQ_CTRL_REG1;
 80005be:	003b      	movs	r3, r7
 80005c0:	222a      	movs	r2, #42	; 0x2a
 80005c2:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00000000; //letztes Bit gibt Standby-Modus an
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80005ca:	250f      	movs	r5, #15
 80005cc:	197c      	adds	r4, r7, r5
 80005ce:	003a      	movs	r2, r7
 80005d0:	484d      	ldr	r0, [pc, #308]	; (8000708 <InitialisiereMagnetometer+0x150>)
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2302      	movs	r3, #2
 80005da:	213e      	movs	r1, #62	; 0x3e
 80005dc:	f001 f832 	bl	8001644 <HAL_I2C_Master_Transmit>
 80005e0:	0003      	movs	r3, r0
 80005e2:	7023      	strb	r3, [r4, #0]

	//konfiguriere M_CTRL_REG1
	buf[0] = FXOS8700CQ_M_CTRL_REG1;
 80005e4:	003b      	movs	r3, r7
 80005e6:	225b      	movs	r2, #91	; 0x5b
 80005e8:	701a      	strb	r2, [r3, #0]

			//Bit 7: Auto Calibration On/[Off]	Bit 6: One-shot magnetic reset On/[Off]
			//Bit 5: One-shot triggered Magnetic measurement mode On/[Off]
			//Bit 4-2: Oversample ratio (OSR) (Datasheet S.99) wähle 111 für OSR = 8 bei 200 Hz ODR
			//Bit 1-0:	11 gewählt für Hybrid Mode
	buf[1] = 0b00011111;
 80005ea:	003b      	movs	r3, r7
 80005ec:	221f      	movs	r2, #31
 80005ee:	705a      	strb	r2, [r3, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 80005f0:	197c      	adds	r4, r7, r5
 80005f2:	003a      	movs	r2, r7
 80005f4:	4844      	ldr	r0, [pc, #272]	; (8000708 <InitialisiereMagnetometer+0x150>)
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2302      	movs	r3, #2
 80005fe:	213e      	movs	r1, #62	; 0x3e
 8000600:	f001 f820 	bl	8001644 <HAL_I2C_Master_Transmit>
 8000604:	0003      	movs	r3, r0
 8000606:	7023      	strb	r3, [r4, #0]

		//prüfe, ob M_CTRL_REG1 korrekt konfiguriert ist

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_M_CTRL_REG1, 1, buf, 1, 1000);
 8000608:	197c      	adds	r4, r7, r5
 800060a:	483f      	ldr	r0, [pc, #252]	; (8000708 <InitialisiereMagnetometer+0x150>)
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2301      	movs	r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	003b      	movs	r3, r7
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	225b      	movs	r2, #91	; 0x5b
 800061e:	213e      	movs	r1, #62	; 0x3e
 8000620:	f001 fa20 	bl	8001a64 <HAL_I2C_Mem_Read>
 8000624:	0003      	movs	r3, r0
 8000626:	7023      	strb	r3, [r4, #0]

			if (ret != HAL_OK || buf[0] != 0b00011111){
 8000628:	197b      	adds	r3, r7, r5
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d103      	bne.n	8000638 <InitialisiereMagnetometer+0x80>
 8000630:	003b      	movs	r3, r7
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b1f      	cmp	r3, #31
 8000636:	d009      	beq.n	800064c <InitialisiereMagnetometer+0x94>
				//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die M_CTRL-REG1-Werte richtig sind
				strcpy((char*)buf, "INIT ERROR");
 8000638:	003b      	movs	r3, r7
 800063a:	4a34      	ldr	r2, [pc, #208]	; (800070c <InitialisiereMagnetometer+0x154>)
 800063c:	ca03      	ldmia	r2!, {r0, r1}
 800063e:	c303      	stmia	r3!, {r0, r1}
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	8019      	strh	r1, [r3, #0]
 8000644:	7892      	ldrb	r2, [r2, #2]
 8000646:	709a      	strb	r2, [r3, #2]
				return false;
 8000648:	2300      	movs	r3, #0
 800064a:	e058      	b.n	80006fe <InitialisiereMagnetometer+0x146>

	//aktiviere Sensor und konfiguriere Control Register 1
		//Bit 7-6: auto-wake sample frequency; irrelevant (wähle 00)	Bit 5-3: Output data rate selection; wähle 010 für 200Hz mag only mode
		//bzw. 100 Hz hybrid mode	Bit 2: Inoise; wähle 0 für Normal mode	Bit 1: Fast Read Mode; wähle 0 für Normal Mode	Bit 0: wähle 1
		//um Sensor aus Standby zu holen und zu aktivieren
	buf[0] = FXOS8700CQ_CTRL_REG1;
 800064c:	003b      	movs	r3, r7
 800064e:	222a      	movs	r2, #42	; 0x2a
 8000650:	701a      	strb	r2, [r3, #0]
	buf[1] = 0b00010001;
 8000652:	003b      	movs	r3, r7
 8000654:	2211      	movs	r2, #17
 8000656:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 2, HAL_MAX_DELAY);
 8000658:	250f      	movs	r5, #15
 800065a:	197c      	adds	r4, r7, r5
 800065c:	003a      	movs	r2, r7
 800065e:	482a      	ldr	r0, [pc, #168]	; (8000708 <InitialisiereMagnetometer+0x150>)
 8000660:	2301      	movs	r3, #1
 8000662:	425b      	negs	r3, r3
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2302      	movs	r3, #2
 8000668:	213e      	movs	r1, #62	; 0x3e
 800066a:	f000 ffeb 	bl	8001644 <HAL_I2C_Master_Transmit>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
		//prüfe, ob CTRL_REG1 richtig konfiguriert wurde
	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_CTRL_REG1, 1, buf, 1, 1000);
 8000672:	197c      	adds	r4, r7, r5
 8000674:	4824      	ldr	r0, [pc, #144]	; (8000708 <InitialisiereMagnetometer+0x150>)
 8000676:	23fa      	movs	r3, #250	; 0xfa
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	003b      	movs	r3, r7
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	222a      	movs	r2, #42	; 0x2a
 8000688:	213e      	movs	r1, #62	; 0x3e
 800068a:	f001 f9eb 	bl	8001a64 <HAL_I2C_Mem_Read>
 800068e:	0003      	movs	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]

		if (ret != HAL_OK || buf[0] != 0b00010001){
 8000692:	197b      	adds	r3, r7, r5
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d103      	bne.n	80006a2 <InitialisiereMagnetometer+0xea>
 800069a:	003b      	movs	r3, r7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b11      	cmp	r3, #17
 80006a0:	d009      	beq.n	80006b6 <InitialisiereMagnetometer+0xfe>
			//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die CTRL-REG1-Werte richtig sind
			strcpy((char*)buf, "INIT ERROR");
 80006a2:	003b      	movs	r3, r7
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <InitialisiereMagnetometer+0x154>)
 80006a6:	ca03      	ldmia	r2!, {r0, r1}
 80006a8:	c303      	stmia	r3!, {r0, r1}
 80006aa:	8811      	ldrh	r1, [r2, #0]
 80006ac:	8019      	strh	r1, [r3, #0]
 80006ae:	7892      	ldrb	r2, [r2, #2]
 80006b0:	709a      	strb	r2, [r3, #2]
			return false;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e023      	b.n	80006fe <InitialisiereMagnetometer+0x146>
		}


	//checke den Device Identifier

	ret = HAL_I2C_Mem_Read(&hi2c1, ADDR_Magnetometer, FXOS8700CQ_WHOAMI, 1, buf, 1, 1000);
 80006b6:	250f      	movs	r5, #15
 80006b8:	197c      	adds	r4, r7, r5
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <InitialisiereMagnetometer+0x150>)
 80006bc:	23fa      	movs	r3, #250	; 0xfa
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	003b      	movs	r3, r7
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	220d      	movs	r2, #13
 80006ce:	213e      	movs	r1, #62	; 0x3e
 80006d0:	f001 f9c8 	bl	8001a64 <HAL_I2C_Mem_Read>
 80006d4:	0003      	movs	r3, r0
 80006d6:	7023      	strb	r3, [r4, #0]

		if ( ret != HAL_OK || buf[0] != FXOS8700CQ_WHOAMI_VAL) {
 80006d8:	197b      	adds	r3, r7, r5
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d103      	bne.n	80006e8 <InitialisiereMagnetometer+0x130>
 80006e0:	003b      	movs	r3, r7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2bc7      	cmp	r3, #199	; 0xc7
 80006e6:	d009      	beq.n	80006fc <InitialisiereMagnetometer+0x144>
			//prüfe ob I2C-Kommunikation geklappt hat bzw. ob die Device-ID richtig ist
			strcpy((char*)buf, "INIT ERROR");
 80006e8:	003b      	movs	r3, r7
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <InitialisiereMagnetometer+0x154>)
 80006ec:	ca03      	ldmia	r2!, {r0, r1}
 80006ee:	c303      	stmia	r3!, {r0, r1}
 80006f0:	8811      	ldrh	r1, [r2, #0]
 80006f2:	8019      	strh	r1, [r3, #0]
 80006f4:	7892      	ldrb	r2, [r2, #2]
 80006f6:	709a      	strb	r2, [r3, #2]
			return false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e000      	b.n	80006fe <InitialisiereMagnetometer+0x146>
	}
return true;
 80006fc:	2301      	movs	r3, #1
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bdb0      	pop	{r4, r5, r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000028 	.word	0x20000028
 800070c:	08003abc 	.word	0x08003abc

08000710 <MagnetometerWerteAuslesen>:


void MagnetometerWerteAuslesen (int16_t *x_axis_Mag, int16_t *y_axis_Mag, int16_t *z_axis_Mag){
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	b08b      	sub	sp, #44	; 0x2c
 8000714:	af02      	add	r7, sp, #8
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]




	uint8_t buf[12]; /*ein Buffer-Array*/
	buf[0] = M_DR_STATUS;
 800071c:	2510      	movs	r5, #16
 800071e:	197b      	adds	r3, r7, r5
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;


	  /*hier ist die I2C-Übertragung*/

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR_Magnetometer, buf, 1, HAL_MAX_DELAY); /*es wird ein byte gesendet, und zwar buf[0]*/
 8000724:	261f      	movs	r6, #31
 8000726:	19bc      	adds	r4, r7, r6
 8000728:	197a      	adds	r2, r7, r5
 800072a:	4830      	ldr	r0, [pc, #192]	; (80007ec <MagnetometerWerteAuslesen+0xdc>)
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	213e      	movs	r1, #62	; 0x3e
 8000736:	f000 ff85 	bl	8001644 <HAL_I2C_Master_Transmit>
 800073a:	0003      	movs	r3, r0
 800073c:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(50);
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 fc5c 	bl	8000ffc <HAL_Delay>
	  if ( ret == HAL_OK ) {
 8000744:	19bb      	adds	r3, r7, r6
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d145      	bne.n	80007d8 <MagnetometerWerteAuslesen+0xc8>
		  ret = HAL_I2C_Master_Receive(&hi2c1, ADDR_Magnetometer, buf, 7, HAL_MAX_DELAY); /*empfange alle 6 Bytes für die Gyrowerte*/
 800074c:	19bc      	adds	r4, r7, r6
 800074e:	197a      	adds	r2, r7, r5
 8000750:	4826      	ldr	r0, [pc, #152]	; (80007ec <MagnetometerWerteAuslesen+0xdc>)
 8000752:	2301      	movs	r3, #1
 8000754:	425b      	negs	r3, r3
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2307      	movs	r3, #7
 800075a:	213e      	movs	r1, #62	; 0x3e
 800075c:	f001 f87a 	bl	8001854 <HAL_I2C_Master_Receive>
 8000760:	0003      	movs	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
		if ( ret == HAL_OK ) {
 8000764:	19bb      	adds	r3, r7, r6
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12b      	bne.n	80007c4 <MagnetometerWerteAuslesen+0xb4>
			*x_axis_Mag = 0;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2200      	movs	r2, #0
 8000770:	801a      	strh	r2, [r3, #0]
			*x_axis_Mag = (buf[1] << 8) | buf[2]; /* buf[1] enthält x_MSB; buf[2] enthält x_LSB. Deshalb wird das MSB in die Variable eingesetzt, um 8 bits verschoben, und dann LSB mit logischem Oder verknüpft*/
 8000772:	197b      	adds	r3, r7, r5
 8000774:	785b      	ldrb	r3, [r3, #1]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	197b      	adds	r3, r7, r5
 800077c:	789b      	ldrb	r3, [r3, #2]
 800077e:	b21b      	sxth	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b21a      	sxth	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = 0;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
			*y_axis_Mag = (buf[3] << 8) | buf[4];
 800078e:	197b      	adds	r3, r7, r5
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	b21a      	sxth	r2, r3
 8000796:	0029      	movs	r1, r5
 8000798:	197b      	adds	r3, r7, r5
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = 0;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	801a      	strh	r2, [r3, #0]
			*z_axis_Mag = (buf[5] << 8) | buf[6];
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	799b      	ldrb	r3, [r3, #6]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b21a      	sxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	801a      	strh	r2, [r3, #0]
			strcpy((char*)buf, "Error Read");
		}
	  }else{
		  strcpy((char*)buf, "Error Write");
	  }
}
 80007c2:	e00e      	b.n	80007e2 <MagnetometerWerteAuslesen+0xd2>
			strcpy((char*)buf, "Error Read");
 80007c4:	2310      	movs	r3, #16
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <MagnetometerWerteAuslesen+0xe0>)
 80007ca:	ca03      	ldmia	r2!, {r0, r1}
 80007cc:	c303      	stmia	r3!, {r0, r1}
 80007ce:	8811      	ldrh	r1, [r2, #0]
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	7892      	ldrb	r2, [r2, #2]
 80007d4:	709a      	strb	r2, [r3, #2]
}
 80007d6:	e004      	b.n	80007e2 <MagnetometerWerteAuslesen+0xd2>
		  strcpy((char*)buf, "Error Write");
 80007d8:	2310      	movs	r3, #16
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <MagnetometerWerteAuslesen+0xe4>)
 80007de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007e0:	c313      	stmia	r3!, {r0, r1, r4}
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b009      	add	sp, #36	; 0x24
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000028 	.word	0x20000028
 80007f0:	08003ac8 	.word	0x08003ac8
 80007f4:	08003ad4 	.word	0x08003ad4

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b5b0      	push	{r4, r5, r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fb99 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8cf 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f9fd 	bl	8000c04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800080a:	f000 f92d 	bl	8000a68 <MX_I2C1_Init>
  MX_TIM3_Init();
 800080e:	f000 f96b 	bl	8000ae8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <main+0x19c>)
 8000814:	2108      	movs	r1, #8
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fb1c 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800081c:	4b5d      	ldr	r3, [pc, #372]	; (8000994 <main+0x19c>)
 800081e:	210c      	movs	r1, #12
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fb17 	bl	8002e54 <HAL_TIM_PWM_Start>
//Initialisiere die Sensoren

  bool Gyro_Init_Check;
  bool Magnetometer_Init_Check;

  Gyro_Init_Check = InitialisiereGyro();
 8000826:	2515      	movs	r5, #21
 8000828:	197c      	adds	r4, r7, r5
 800082a:	f7ff fde3 	bl	80003f4 <InitialisiereGyro>
 800082e:	0003      	movs	r3, r0
 8000830:	7023      	strb	r3, [r4, #0]


  Magnetometer_Init_Check = InitialisiereMagnetometer();
 8000832:	2314      	movs	r3, #20
 8000834:	18fc      	adds	r4, r7, r3
 8000836:	f7ff febf 	bl	80005b8 <InitialisiereMagnetometer>
 800083a:	0003      	movs	r3, r0
 800083c:	7023      	strb	r3, [r4, #0]


  if (Gyro_Init_Check == true){
 800083e:	197b      	adds	r3, r7, r5
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d021      	beq.n	800088a <main+0x92>
	  //I2C-Kommunikation funktioniert
	  //blinke grüne LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 8000846:	2317      	movs	r3, #23
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e017      	b.n	8000880 <main+0x88>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,511);
 8000850:	4b50      	ldr	r3, [pc, #320]	; (8000994 <main+0x19c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a50      	ldr	r2, [pc, #320]	; (8000998 <main+0x1a0>)
 8000856:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fbcd 	bl	8000ffc <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8000862:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <main+0x19c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(500);
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fbc4 	bl	8000ffc <HAL_Delay>
	  for (x = 0; x <= 3; ++x){
 8000874:	2217      	movs	r2, #23
 8000876:	18bb      	adds	r3, r7, r2
 8000878:	18ba      	adds	r2, r7, r2
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	3201      	adds	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	2317      	movs	r3, #23
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d9e2      	bls.n	8000850 <main+0x58>
		    }

  }

  if (Magnetometer_Init_Check == true){
 800088a:	2314      	movs	r3, #20
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d021      	beq.n	80008d8 <main+0xe0>
	  //I2C-Kommunikation funktioniert
	  //blinke blaue LED 3x
	  uint8_t x;
	  for (x = 0; x <= 3; ++x){
 8000894:	2316      	movs	r3, #22
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e017      	b.n	80008ce <main+0xd6>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,511);
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <main+0x19c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a3d      	ldr	r2, [pc, #244]	; (8000998 <main+0x1a0>)
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fba6 	bl	8000ffc <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <main+0x19c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(500);
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fb9d 	bl	8000ffc <HAL_Delay>
	  for (x = 0; x <= 3; ++x){
 80008c2:	2216      	movs	r2, #22
 80008c4:	18bb      	adds	r3, r7, r2
 80008c6:	18ba      	adds	r2, r7, r2
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	3201      	adds	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	2316      	movs	r3, #22
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d9e2      	bls.n	800089e <main+0xa6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 80008d8:	1dba      	adds	r2, r7, #6
 80008da:	2308      	movs	r3, #8
 80008dc:	18f9      	adds	r1, r7, r3
 80008de:	230a      	movs	r3, #10
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff fdf2 	bl	80004cc <gyroWerteAuslesen>
	  HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f000 fb87 	bl	8000ffc <HAL_Delay>
	  MagnetometerWerteAuslesen(&x_axis_Mag, &y_axis_Mag, &z_axis_Mag);
 80008ee:	003a      	movs	r2, r7
 80008f0:	1cb9      	adds	r1, r7, #2
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff0b 	bl	8000710 <MagnetometerWerteAuslesen>
	  HAL_Delay(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 fb7e 	bl	8000ffc <HAL_Delay>


	  if (z_axis >= 0){
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	2200      	movs	r2, #0
 8000904:	5e9b      	ldrsh	r3, [r3, r2]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db21      	blt.n	800094e <main+0x156>
		  // z-Achse wird GEGEN Uhrzeigersinn gedreht
		  int16_t z_axis_Max = 0x7FFF; //maximaler Wert eines 16-bit signed int
 800090a:	210e      	movs	r1, #14
 800090c:	187b      	adds	r3, r7, r1
 800090e:	4a23      	ldr	r2, [pc, #140]	; (800099c <main+0x1a4>)
 8000910:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Max; //511 ist in der Konfiguration von Tim3 die Zahl, bis zu der gezählt wird.
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	2200      	movs	r2, #0
 8000916:	5e9b      	ldrsh	r3, [r3, r2]
 8000918:	001a      	movs	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	025b      	lsls	r3, r3, #9
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2100      	movs	r1, #0
 8000924:	5e5b      	ldrsh	r3, [r3, r1]
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f7ff fc77 	bl	800021c <__divsi3>
 800092e:	0003      	movs	r3, r0
 8000930:	001a      	movs	r2, r3
 8000932:	210c      	movs	r1, #12
 8000934:	187b      	adds	r3, r7, r1
 8000936:	801a      	strh	r2, [r3, #0]

		  //setzt Pulsweite für grüne LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,z);
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <main+0x19c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	187a      	adds	r2, r7, r1
 800093e:	2100      	movs	r1, #0
 8000940:	5e52      	ldrsh	r2, [r2, r1]
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
		  //setzt Pulsweite für blaue LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <main+0x19c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	e7c4      	b.n	80008d8 <main+0xe0>

	  }else{
		  // z-Achse wird IM Uhrzeigersinn gedreht
		  int16_t z_axis_Min = -0x8000;	//minimaler Wert eines 16-bit signed int
 800094e:	2112      	movs	r1, #18
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <main+0x1a8>)
 8000954:	801a      	strh	r2, [r3, #0]
		  int16_t z = (z_axis*511)/z_axis_Min;
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	2200      	movs	r2, #0
 800095a:	5e9b      	ldrsh	r3, [r3, r2]
 800095c:	001a      	movs	r2, r3
 800095e:	0013      	movs	r3, r2
 8000960:	025b      	lsls	r3, r3, #9
 8000962:	1a9a      	subs	r2, r3, r2
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2100      	movs	r1, #0
 8000968:	5e5b      	ldrsh	r3, [r3, r1]
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f7ff fc55 	bl	800021c <__divsi3>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	2110      	movs	r1, #16
 8000978:	187b      	adds	r3, r7, r1
 800097a:	801a      	strh	r2, [r3, #0]
		  //setzt Pulsweite für blaue LEDauf berechneten %-Wert
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,z);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <main+0x19c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	187a      	adds	r2, r7, r1
 8000982:	2100      	movs	r1, #0
 8000984:	5e52      	ldrsh	r2, [r2, r1]
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
		  //setzt Pulsweite für grüne LED auf 0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <main+0x19c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2200      	movs	r2, #0
 800098e:	641a      	str	r2, [r3, #64]	; 0x40
	  gyroWerteAuslesen(&x_axis, &y_axis, &z_axis);
 8000990:	e7a2      	b.n	80008d8 <main+0xe0>
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000074 	.word	0x20000074
 8000998:	000001ff 	.word	0x000001ff
 800099c:	00007fff 	.word	0x00007fff
 80009a0:	ffff8000 	.word	0xffff8000

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b097      	sub	sp, #92	; 0x5c
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	2428      	movs	r4, #40	; 0x28
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2330      	movs	r3, #48	; 0x30
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 f85b 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	2318      	movs	r3, #24
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	2310      	movs	r3, #16
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 f853 	bl	8003a70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2314      	movs	r3, #20
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f003 f84c 	bl	8003a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	0021      	movs	r1, r4
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2201      	movs	r2, #1
 80009e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2210      	movs	r2, #16
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2202      	movs	r2, #2
 80009f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22a0      	movs	r2, #160	; 0xa0
 80009fc:	0392      	lsls	r2, r2, #14
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fc51 	bl	80022b0 <HAL_RCC_OscConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a12:	f000 f955 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	2118      	movs	r1, #24
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2202      	movs	r2, #2
 8000a22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2101      	movs	r1, #1
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 ff55 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a3e:	f000 f93f 	bl	8000cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2220      	movs	r2, #32
 8000a46:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 f879 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a5a:	f000 f931 	bl	8000cc0 <Error_Handler>
  }
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b017      	add	sp, #92	; 0x5c
 8000a64:	bd90      	pop	{r4, r7, pc}
	...

08000a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fd37 	bl	8001518 <HAL_I2C_Init>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f907 	bl	8000cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fb62 	bl	8002180 <HAL_I2CEx_ConfigAnalogFilter>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f8fe 	bl	8000cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fba5 	bl	8002218 <HAL_I2CEx_ConfigDigitalFilter>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f8f5 	bl	8000cc0 <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	0000020b 	.word	0x0000020b

08000ae8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	2328      	movs	r3, #40	; 0x28
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	0018      	movs	r0, r3
 8000af4:	2310      	movs	r3, #16
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f002 ffb9 	bl	8003a70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	2320      	movs	r3, #32
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	0018      	movs	r0, r3
 8000b04:	2308      	movs	r3, #8
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f002 ffb1 	bl	8003a70 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	0018      	movs	r0, r3
 8000b12:	231c      	movs	r3, #28
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f002 ffaa 	bl	8003a70 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b1e:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <MX_TIM3_Init+0x114>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b30:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <MX_TIM3_Init+0x118>)
 8000b32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 f8de 	bl	8002d04 <HAL_TIM_Base_Init>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b4c:	f000 f8b8 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	2128      	movs	r1, #40	; 0x28
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	0152      	lsls	r2, r2, #5
 8000b58:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b5a:	187a      	adds	r2, r7, r1
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 faf5 	bl	8003150 <HAL_TIM_ConfigClockSource>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b6a:	f000 f8a9 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 f917 	bl	8002da4 <HAL_TIM_PWM_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b7a:	f000 f8a1 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2120      	movs	r1, #32
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8c:	187a      	adds	r2, r7, r1
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 feea 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b9c:	f000 f890 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2260      	movs	r2, #96	; 0x60
 8000ba4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2232      	movs	r2, #50	; 0x32
 8000baa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb8:	1d39      	adds	r1, r7, #4
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fa00 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000bc8:	f000 f87a 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	22fa      	movs	r2, #250	; 0xfa
 8000bd0:	0052      	lsls	r2, r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd4:	1d39      	adds	r1, r7, #4
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000bd8:	220c      	movs	r2, #12
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f002 f9f2 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000be4:	f000 f86c 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <MX_TIM3_Init+0x110>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8fe 	bl	8000dec <HAL_TIM_MspPostInit>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00e      	add	sp, #56	; 0x38
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	000001ff 	.word	0x000001ff

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	240c      	movs	r4, #12
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2314      	movs	r3, #20
 8000c12:	001a      	movs	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	f002 ff2b 	bl	8003a70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0309      	lsls	r1, r1, #12
 8000c40:	430a      	orrs	r2, r1
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	02c9      	lsls	r1, r1, #11
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0xa4>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	02db      	lsls	r3, r3, #11
 8000c68:	4013      	ands	r3, r2
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2288      	movs	r2, #136	; 0x88
 8000c78:	0352      	lsls	r2, r2, #13
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	193a      	adds	r2, r7, r4
 8000c84:	2390      	movs	r3, #144	; 0x90
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fab8 	bl	8001200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2005      	movs	r0, #5
 8000c96:	f000 fa81 	bl	800119c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f000 fa93 	bl	80011c6 <HAL_NVIC_EnableIRQ>

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b009      	add	sp, #36	; 0x24
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* Interrupt Funktionen */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
    {
   // HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_Channel_3);
    //HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // Toggle The Output (LED) Pin
    }
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x44>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x44>)
 8000cec:	69da      	ldr	r2, [r3, #28]
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_MspInit+0x44>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0549      	lsls	r1, r1, #21
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_MspInit+0x44>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	055b      	lsls	r3, r3, #21
 8000d00:	4013      	ands	r3, r2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	2414      	movs	r4, #20
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2314      	movs	r3, #20
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f002 fea2 	bl	8003a70 <memset>
  if(hi2c->Instance==I2C1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_I2C_MspInit+0x90>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d131      	bne.n	8000d9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d38:	695a      	ldr	r2, [r3, #20]
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	02c9      	lsls	r1, r1, #11
 8000d40:	430a      	orrs	r2, r1
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	02db      	lsls	r3, r3, #11
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	0021      	movs	r1, r4
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	22c0      	movs	r2, #192	; 0xc0
 8000d58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2212      	movs	r2, #18
 8000d5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_I2C_MspInit+0x98>)
 8000d76:	0019      	movs	r1, r3
 8000d78:	0010      	movs	r0, r2
 8000d7a:	f000 fa41 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d80:	69da      	ldr	r2, [r3, #28]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0389      	lsls	r1, r1, #14
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	61da      	str	r2, [r3, #28]
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d8e:	69da      	ldr	r2, [r3, #28]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	039b      	lsls	r3, r3, #14
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b00b      	add	sp, #44	; 0x2c
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40005400 	.word	0x40005400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000400 	.word	0x48000400

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x34>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10b      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc4:	69da      	ldr	r2, [r3, #28]
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc8:	2102      	movs	r1, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40000400 	.word	0x40000400
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	240c      	movs	r4, #12
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f002 fe36 	bl	8003a70 <memset>
  if(htim->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_TIM_MspPostInit+0xa0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d13a      	bne.n	8000e84 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_TIM_MspPostInit+0xa4>)
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_TIM_MspPostInit+0xa4>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0309      	lsls	r1, r1, #12
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_TIM_MspPostInit+0xa4>)
 8000e1e:	695a      	ldr	r2, [r3, #20]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	031b      	lsls	r3, r3, #12
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_Blue_LED_Pin;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0052      	lsls	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2202      	movs	r2, #2
 8000e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2201      	movs	r2, #1
 8000e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH3_Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <HAL_TIM_MspPostInit+0xa8>)
 8000e4e:	0019      	movs	r1, r3
 8000e50:	0010      	movs	r0, r2
 8000e52:	f000 f9d5 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH4_Green_LED_Pin;
 8000e56:	0021      	movs	r1, r4
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM3_CH4_Green_LED_GPIO_Port, &GPIO_InitStruct);
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_TIM_MspPostInit+0xa8>)
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0010      	movs	r0, r2
 8000e80:	f000 f9be 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b009      	add	sp, #36	; 0x24
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f882 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f000 fb08 	bl	80014e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0a:	f7ff ffe4 	bl	8000ed6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f002 fd8b 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff fc71 	bl	80007f8 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f24:	08003b18 	.word	0x08003b18
  ldr r2, =_sbss
 8000f28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f2c:	200000c0 	.word	0x200000c0

08000f30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_COMP_IRQHandler>
	...

08000f34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_Init+0x24>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_Init+0x24>)
 8000f3e:	2110      	movs	r1, #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f809 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff febf 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	0098      	lsls	r0, r3, #2
 8000f72:	f7ff f8c9 	bl	8000108 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f7ff f8c4 	bl	8000108 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f92f 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00f      	b.n	8000fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d80b      	bhi.n	8000fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f8fc 	bl	800119c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_InitTick+0x64>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d2      	adds	r2, r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200000bc 	.word	0x200000bc

08000fe8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	200000bc 	.word	0x200000bc

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001a      	movs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	189b      	adds	r3, r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	0002      	movs	r2, r0
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b7f      	cmp	r3, #127	; 0x7f
 8001056:	d809      	bhi.n	800106c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	001a      	movs	r2, r3
 800105e:	231f      	movs	r3, #31
 8001060:	401a      	ands	r2, r3
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_EnableIRQ+0x30>)
 8001064:	2101      	movs	r1, #1
 8001066:	4091      	lsls	r1, r2
 8001068:	000a      	movs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
  }
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	d828      	bhi.n	80010e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108e:	4a2f      	ldr	r2, [pc, #188]	; (800114c <__NVIC_SetPriority+0xd4>)
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	33c0      	adds	r3, #192	; 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	589b      	ldr	r3, [r3, r2]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0011      	movs	r1, r2
 80010a4:	2203      	movs	r2, #3
 80010a6:	400a      	ands	r2, r1
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	21ff      	movs	r1, #255	; 0xff
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	401a      	ands	r2, r3
 80010b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	401a      	ands	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	2303      	movs	r3, #3
 80010c6:	4003      	ands	r3, r0
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <__NVIC_SetPriority+0xd4>)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	33c0      	adds	r3, #192	; 0xc0
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010de:	e031      	b.n	8001144 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0019      	movs	r1, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	400b      	ands	r3, r1
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3306      	adds	r3, #6
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	3304      	adds	r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	0011      	movs	r1, r2
 8001100:	2203      	movs	r2, #3
 8001102:	400a      	ands	r2, r1
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	21ff      	movs	r1, #255	; 0xff
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	401a      	ands	r2, r3
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4003      	ands	r3, r0
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	001c      	movs	r4, r3
 8001130:	230f      	movs	r3, #15
 8001132:	4023      	ands	r3, r4
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	430a      	orrs	r2, r1
 800113a:	3306      	adds	r3, #6
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	18c3      	adds	r3, r0, r3
 8001140:	3304      	adds	r3, #4
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b003      	add	sp, #12
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	045b      	lsls	r3, r3, #17
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001168:	2301      	movs	r3, #1
 800116a:	e010      	b.n	800118e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SysTick_Config+0x44>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	3a01      	subs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2103      	movs	r1, #3
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff7c 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x44>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x44>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	210f      	movs	r1, #15
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	0002      	movs	r2, r0
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff33 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ffaf 	bl	8001154 <SysTick_Config>
 80011f6:	0003      	movs	r3, r0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e14f      	b.n	80014b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x28>
 8001226:	e140      	b.n	80014aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	2b01      	cmp	r3, #1
 8001232:	d005      	beq.n	8001240 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800123c:	2b02      	cmp	r3, #2
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	409a      	lsls	r2, r3
 8001262:	0013      	movs	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	2201      	movs	r2, #1
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d017      	beq.n	80012de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d123      	bne.n	8001332 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	58d3      	ldr	r3, [r2, r3]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2207      	movs	r2, #7
 80012fc:	4013      	ands	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2107      	movs	r1, #7
 8001316:	400b      	ands	r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	6939      	ldr	r1, [r7, #16]
 8001330:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	401a      	ands	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	029b      	lsls	r3, r3, #10
 800136e:	4013      	ands	r3, r2
 8001370:	d100      	bne.n	8001374 <HAL_GPIO_Init+0x174>
 8001372:	e09a      	b.n	80014aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 800137a:	2101      	movs	r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	619a      	str	r2, [r3, #24]
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x2cc>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	589b      	ldr	r3, [r3, r2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	2390      	movs	r3, #144	; 0x90
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1e2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1de>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_GPIO_Init+0x2d4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1da>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <HAL_GPIO_Init+0x2d8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1d6>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013e2:	2300      	movs	r3, #0
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	2103      	movs	r1, #3
 80013e8:	400a      	ands	r2, r1
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x2cc>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	025b      	lsls	r3, r3, #9
 800141a:	4013      	ands	r3, r2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	4013      	ands	r3, r2
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	035b      	lsls	r3, r3, #13
 800146e:	4013      	ands	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	039b      	lsls	r3, r3, #14
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_GPIO_Init+0x2dc>)
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2be>
 80014bc:	e6a8      	b.n	8001210 <HAL_GPIO_Init+0x10>
  } 
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	48000800 	.word	0x48000800
 80014d8:	48000c00 	.word	0x48000c00
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0002      	movs	r2, r0
 80014e8:	1dbb      	adds	r3, r7, #6
 80014ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	1dba      	adds	r2, r7, #6
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4013      	ands	r3, r2
 80014f6:	d008      	beq.n	800150a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014fa:	1dba      	adds	r2, r7, #6
 80014fc:	8812      	ldrh	r2, [r2, #0]
 80014fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff fbd1 	bl	8000cac <HAL_GPIO_EXTI_Callback>
  }
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e082      	b.n	8001630 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fbe7 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	; 0x41
 800154a:	2124      	movs	r1, #36	; 0x24
 800154c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4934      	ldr	r1, [pc, #208]	; (8001638 <HAL_I2C_Init+0x120>)
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4931      	ldr	r1, [pc, #196]	; (800163c <HAL_I2C_Init+0x124>)
 8001578:	400a      	ands	r2, r1
 800157a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e007      	b.n	80015a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2184      	movs	r1, #132	; 0x84
 80015a0:	0209      	lsls	r1, r1, #8
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d104      	bne.n	80015b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <HAL_I2C_Init+0x128>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <HAL_I2C_Init+0x124>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69d9      	ldr	r1, [r3, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2241      	movs	r2, #65	; 0x41
 800161c:	2120      	movs	r1, #32
 800161e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	f0ffffff 	.word	0xf0ffffff
 800163c:	ffff7fff 	.word	0xffff7fff
 8001640:	02008000 	.word	0x02008000

08001644 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	0008      	movs	r0, r1
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	0019      	movs	r1, r3
 8001652:	230a      	movs	r3, #10
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	2308      	movs	r3, #8
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	1c0a      	adds	r2, r1, #0
 8001660:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	d000      	beq.n	8001670 <HAL_I2C_Master_Transmit+0x2c>
 800166e:	e0e7      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	5c9b      	ldrb	r3, [r3, r2]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_I2C_Master_Transmit+0x3a>
 800167a:	2302      	movs	r3, #2
 800167c:	e0e1      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001686:	f7ff fcaf 	bl	8000fe8 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	0219      	lsls	r1, r3, #8
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2319      	movs	r3, #25
 800169a:	2201      	movs	r2, #1
 800169c:	f000 fb9a 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2241      	movs	r2, #65	; 0x41
 80016ac:	2121      	movs	r1, #33	; 0x21
 80016ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2242      	movs	r2, #66	; 0x42
 80016b4:	2110      	movs	r1, #16
 80016b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2208      	movs	r2, #8
 80016c8:	18ba      	adds	r2, r7, r2
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d911      	bls.n	8001702 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	045c      	lsls	r4, r3, #17
 80016ee:	230a      	movs	r3, #10
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	8819      	ldrh	r1, [r3, #0]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_I2C_Master_Transmit+0x208>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0023      	movs	r3, r4
 80016fc:	f000 fd0a 	bl	8002114 <I2C_TransferConfig>
 8001700:	e075      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049c      	lsls	r4, r3, #18
 8001716:	230a      	movs	r3, #10
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	8819      	ldrh	r1, [r3, #0]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_I2C_Master_Transmit+0x208>)
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	0023      	movs	r3, r4
 8001724:	f000 fcf6 	bl	8002114 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001728:	e061      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0018      	movs	r0, r3
 8001732:	f000 fb8e 	bl	8001e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e081      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03a      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d136      	bne.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	0013      	movs	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	f000 fb21 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001792:	1e03      	subs	r3, r0, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e053      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2bff      	cmp	r3, #255	; 0xff
 80017a2:	d911      	bls.n	80017c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	045c      	lsls	r4, r3, #17
 80017b4:	230a      	movs	r3, #10
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0023      	movs	r3, r4
 80017c2:	f000 fca7 	bl	8002114 <I2C_TransferConfig>
 80017c6:	e012      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049c      	lsls	r4, r3, #18
 80017dc:	230a      	movs	r3, #10
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	8819      	ldrh	r1, [r3, #0]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0023      	movs	r3, r4
 80017ea:	f000 fc93 	bl	8002114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d198      	bne.n	800172a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 fb66 	bl	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2220      	movs	r2, #32
 8001812:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	490c      	ldr	r1, [pc, #48]	; (8001850 <HAL_I2C_Master_Transmit+0x20c>)
 8001820:	400a      	ands	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2241      	movs	r2, #65	; 0x41
 8001828:	2120      	movs	r1, #32
 800182a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2242      	movs	r2, #66	; 0x42
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b007      	add	sp, #28
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	80002000 	.word	0x80002000
 8001850:	fe00e800 	.word	0xfe00e800

08001854 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	0008      	movs	r0, r1
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	0019      	movs	r1, r3
 8001862:	230a      	movs	r3, #10
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	1c02      	adds	r2, r0, #0
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	2308      	movs	r3, #8
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	1c0a      	adds	r2, r1, #0
 8001870:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2241      	movs	r2, #65	; 0x41
 8001876:	5c9b      	ldrb	r3, [r3, r2]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	d000      	beq.n	8001880 <HAL_I2C_Master_Receive+0x2c>
 800187e:	e0e8      	b.n	8001a52 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2240      	movs	r2, #64	; 0x40
 8001884:	5c9b      	ldrb	r3, [r3, r2]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_I2C_Master_Receive+0x3a>
 800188a:	2302      	movs	r3, #2
 800188c:	e0e2      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001896:	f7ff fba7 	bl	8000fe8 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	0219      	lsls	r1, r3, #8
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2319      	movs	r3, #25
 80018aa:	2201      	movs	r2, #1
 80018ac:	f000 fa92 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cd      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	2122      	movs	r1, #34	; 0x22
 80018be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2242      	movs	r2, #66	; 0x42
 80018c4:	2110      	movs	r1, #16
 80018c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2208      	movs	r2, #8
 80018d8:	18ba      	adds	r2, r7, r2
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d911      	bls.n	8001912 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	22ff      	movs	r2, #255	; 0xff
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	045c      	lsls	r4, r3, #17
 80018fe:	230a      	movs	r3, #10
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	8819      	ldrh	r1, [r3, #0]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_I2C_Master_Receive+0x208>)
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	0023      	movs	r3, r4
 800190c:	f000 fc02 	bl	8002114 <I2C_TransferConfig>
 8001910:	e076      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049c      	lsls	r4, r3, #18
 8001926:	230a      	movs	r3, #10
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	8819      	ldrh	r1, [r3, #0]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_I2C_Master_Receive+0x208>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	0023      	movs	r3, r4
 8001934:	f000 fbee 	bl	8002114 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001938:	e062      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 fb01 	bl	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e082      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03a      	beq.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d136      	bne.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	0013      	movs	r3, r2
 800199c:	2200      	movs	r2, #0
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	f000 fa18 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e053      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d911      	bls.n	80019da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	045c      	lsls	r4, r3, #17
 80019c6:	230a      	movs	r3, #10
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	8819      	ldrh	r1, [r3, #0]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	0023      	movs	r3, r4
 80019d4:	f000 fb9e 	bl	8002114 <I2C_TransferConfig>
 80019d8:	e012      	b.n	8001a00 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049c      	lsls	r4, r3, #18
 80019ee:	230a      	movs	r3, #10
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	8819      	ldrh	r1, [r3, #0]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	0023      	movs	r3, r4
 80019fc:	f000 fb8a 	bl	8002114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d197      	bne.n	800193a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 fa5d 	bl	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01a      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2220      	movs	r2, #32
 8001a24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <HAL_I2C_Master_Receive+0x20c>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2241      	movs	r2, #65	; 0x41
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2242      	movs	r2, #66	; 0x42
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
  }
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b007      	add	sp, #28
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	80002400 	.word	0x80002400
 8001a60:	fe00e800 	.word	0xfe00e800

08001a64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	000c      	movs	r4, r1
 8001a6e:	0010      	movs	r0, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	230a      	movs	r3, #10
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	1c22      	adds	r2, r4, #0
 8001a78:	801a      	strh	r2, [r3, #0]
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	1c02      	adds	r2, r0, #0
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	1c0a      	adds	r2, r1, #0
 8001a86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2241      	movs	r2, #65	; 0x41
 8001a8c:	5c9b      	ldrb	r3, [r3, r2]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d000      	beq.n	8001a96 <HAL_I2C_Mem_Read+0x32>
 8001a94:	e110      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_I2C_Mem_Read+0x42>
 8001a9c:	232c      	movs	r3, #44	; 0x2c
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e103      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Mem_Read+0x5c>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0fc      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fa8e 	bl	8000fe8 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	0219      	lsls	r1, r3, #8
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2319      	movs	r3, #25
 8001adc:	2201      	movs	r2, #1
 8001ade:	f000 f979 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0e7      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2241      	movs	r2, #65	; 0x41
 8001aee:	2122      	movs	r1, #34	; 0x22
 8001af0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2242      	movs	r2, #66	; 0x42
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	222c      	movs	r2, #44	; 0x2c
 8001b0a:	18ba      	adds	r2, r7, r2
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	881c      	ldrh	r4, [r3, #0]
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	230a      	movs	r3, #10
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	8819      	ldrh	r1, [r3, #0]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	0023      	movs	r3, r4
 8001b32:	f000 f8cb 	bl	8001ccc <I2C_RequestMemoryRead>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0b9      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2bff      	cmp	r3, #255	; 0xff
 8001b4e:	d911      	bls.n	8001b74 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	22ff      	movs	r2, #255	; 0xff
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	045c      	lsls	r4, r3, #17
 8001b60:	230a      	movs	r3, #10
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	8819      	ldrh	r1, [r3, #0]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <HAL_I2C_Mem_Read+0x260>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	0023      	movs	r3, r4
 8001b6e:	f000 fad1 	bl	8002114 <I2C_TransferConfig>
 8001b72:	e012      	b.n	8001b9a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	049c      	lsls	r4, r3, #18
 8001b88:	230a      	movs	r3, #10
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	8819      	ldrh	r1, [r3, #0]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_I2C_Mem_Read+0x260>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	0023      	movs	r3, r4
 8001b96:	f000 fabd 	bl	8002114 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	f000 f914 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e082      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03a      	beq.n	8001c66 <HAL_I2C_Mem_Read+0x202>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d136      	bne.n	8001c66 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	0013      	movs	r3, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	f000 f8e5 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e053      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2bff      	cmp	r3, #255	; 0xff
 8001c1a:	d911      	bls.n	8001c40 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	22ff      	movs	r2, #255	; 0xff
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	045c      	lsls	r4, r3, #17
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	0023      	movs	r3, r4
 8001c3a:	f000 fa6b 	bl	8002114 <I2C_TransferConfig>
 8001c3e:	e012      	b.n	8001c66 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	049c      	lsls	r4, r3, #18
 8001c54:	230a      	movs	r3, #10
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	8819      	ldrh	r1, [r3, #0]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	0023      	movs	r3, r4
 8001c62:	f000 fa57 	bl	8002114 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d194      	bne.n	8001b9a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f92a 	bl	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e01a      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <HAL_I2C_Mem_Read+0x264>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2241      	movs	r2, #65	; 0x41
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2242      	movs	r2, #66	; 0x42
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b007      	add	sp, #28
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	80002400 	.word	0x80002400
 8001cc8:	fe00e800 	.word	0xfe00e800

08001ccc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	000c      	movs	r4, r1
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	250a      	movs	r5, #10
 8001cdc:	197b      	adds	r3, r7, r5
 8001cde:	1c22      	adds	r2, r4, #0
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	1c02      	adds	r2, r0, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	1dbb      	adds	r3, r7, #6
 8001cec:	1c0a      	adds	r2, r1, #0
 8001cee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cf0:	1dbb      	adds	r3, r7, #6
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	8819      	ldrh	r1, [r3, #0]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <I2C_RequestMemoryRead+0xc0>)
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	f000 fa07 	bl	8002114 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f8a0 	bl	8001e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e033      	b.n	8001d82 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d22:	2308      	movs	r3, #8
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d30:	e019      	b.n	8001d66 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d32:	2308      	movs	r3, #8
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 f881 	bl	8001e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e014      	b.n	8001d82 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d58:	2308      	movs	r3, #8
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	0013      	movs	r3, r2
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	f000 f82e 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	80002000 	.word	0x80002000

08001d90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d103      	bne.n	8001dae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d007      	beq.n	8001dcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
  }
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de4:	e021      	b.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	d01e      	beq.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dec:	f7ff f8fc 	bl	8000fe8 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d113      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	2220      	movs	r2, #32
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2241      	movs	r2, #65	; 0x41
 8001e12:	2120      	movs	r1, #32
 8001e14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2242      	movs	r2, #66	; 0x42
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2240      	movs	r2, #64	; 0x40
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	4013      	ands	r3, r2
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	425a      	negs	r2, r3
 8001e3a:	4153      	adcs	r3, r2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	001a      	movs	r2, r3
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d0ce      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e5e:	e02b      	b.n	8001eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f8da 	bl	8002020 <I2C_IsAcknowledgeFailed>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e029      	b.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3301      	adds	r3, #1
 8001e78:	d01e      	beq.n	8001eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7a:	f7ff f8b5 	bl	8000fe8 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d302      	bcc.n	8001e90 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d113      	bne.n	8001eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	2220      	movs	r2, #32
 8001e96:	431a      	orrs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2241      	movs	r2, #65	; 0x41
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2242      	movs	r2, #66	; 0x42
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e007      	b.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d1cc      	bne.n	8001e60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001edc:	e028      	b.n	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f89b 	bl	8002020 <I2C_IsAcknowledgeFailed>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e026      	b.n	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff f879 	bl	8000fe8 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d113      	bne.n	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2241      	movs	r2, #65	; 0x41
 8001f18:	2120      	movs	r1, #32
 8001f1a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2242      	movs	r2, #66	; 0x42
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d1cf      	bne.n	8001ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b004      	add	sp, #16
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f54:	e055      	b.n	8002002 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 f85f 	bl	8002020 <I2C_IsAcknowledgeFailed>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e053      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2220      	movs	r2, #32
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d129      	bne.n	8001fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d105      	bne.n	8001f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e03f      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2220      	movs	r2, #32
 8001f98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	491d      	ldr	r1, [pc, #116]	; (800201c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2241      	movs	r2, #65	; 0x41
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2242      	movs	r2, #66	; 0x42
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e022      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f80c 	bl	8000fe8 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2241      	movs	r2, #65	; 0x41
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2204      	movs	r2, #4
 800200a:	4013      	ands	r3, r2
 800200c:	2b04      	cmp	r3, #4
 800200e:	d1a2      	bne.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b004      	add	sp, #16
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	fe00e800 	.word	0xfe00e800

08002020 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2210      	movs	r2, #16
 8002034:	4013      	ands	r3, r2
 8002036:	2b10      	cmp	r3, #16
 8002038:	d164      	bne.n	8002104 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	049b      	lsls	r3, r3, #18
 8002044:	401a      	ands	r2, r3
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	049b      	lsls	r3, r3, #18
 800204a:	429a      	cmp	r2, r3
 800204c:	d02b      	beq.n	80020a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	01c9      	lsls	r1, r1, #7
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002060:	e021      	b.n	80020a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	d01e      	beq.n	80020a6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7fe ffbe 	bl	8000fe8 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <I2C_IsAcknowledgeFailed+0x5e>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	2220      	movs	r2, #32
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2241      	movs	r2, #65	; 0x41
 800208e:	2120      	movs	r1, #32
 8002090:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2242      	movs	r2, #66	; 0x42
 8002096:	2100      	movs	r1, #0
 8002098:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e02f      	b.n	8002106 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2220      	movs	r2, #32
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d1d6      	bne.n	8002062 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2210      	movs	r2, #16
 80020ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2220      	movs	r2, #32
 80020c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fe62 	bl	8001d90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <I2C_IsAcknowledgeFailed+0xf0>)
 80020d8:	400a      	ands	r2, r1
 80020da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	2204      	movs	r2, #4
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2241      	movs	r2, #65	; 0x41
 80020ec:	2120      	movs	r1, #32
 80020ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2242      	movs	r2, #66	; 0x42
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	fe00e800 	.word	0xfe00e800

08002114 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	0008      	movs	r0, r1
 800211e:	0011      	movs	r1, r2
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	240a      	movs	r4, #10
 8002124:	193b      	adds	r3, r7, r4
 8002126:	1c02      	adds	r2, r0, #0
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	2009      	movs	r0, #9
 800212c:	183b      	adds	r3, r7, r0
 800212e:	1c0a      	adds	r2, r1, #0
 8002130:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	0d51      	lsrs	r1, r2, #21
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	00d2      	lsls	r2, r2, #3
 8002140:	400a      	ands	r2, r1
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <I2C_TransferConfig+0x68>)
 8002144:	430a      	orrs	r2, r1
 8002146:	43d2      	mvns	r2, r2
 8002148:	401a      	ands	r2, r3
 800214a:	0011      	movs	r1, r2
 800214c:	193b      	adds	r3, r7, r4
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	059b      	lsls	r3, r3, #22
 8002152:	0d9a      	lsrs	r2, r3, #22
 8002154:	183b      	adds	r3, r7, r0
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	0418      	lsls	r0, r3, #16
 800215a:	23ff      	movs	r3, #255	; 0xff
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	4003      	ands	r3, r0
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b005      	add	sp, #20
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	03ff63ff 	.word	0x03ff63ff

08002180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2241      	movs	r2, #65	; 0x41
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	d138      	bne.n	8002208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e032      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	2124      	movs	r1, #36	; 0x24
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4911      	ldr	r1, [pc, #68]	; (8002214 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	ffffefff 	.word	0xffffefff

08002218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2241      	movs	r2, #65	; 0x41
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d139      	bne.n	80022a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002238:	2302      	movs	r3, #2
 800223a:	e033      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	2124      	movs	r1, #36	; 0x24
 800224a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	; 0x41
 8002292:	2120      	movs	r1, #32
 8002294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	fffff0ff 	.word	0xfffff0ff

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e301      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x1e>
 80022cc:	e08d      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ce:	4bc3      	ldr	r3, [pc, #780]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	220c      	movs	r2, #12
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00e      	beq.n	80022f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022da:	4bc0      	ldr	r3, [pc, #768]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	220c      	movs	r2, #12
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x64>
 80022e6:	4bbd      	ldr	r3, [pc, #756]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	401a      	ands	r2, r3
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	4bb8      	ldr	r3, [pc, #736]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x56>
 8002304:	e070      	b.n	80023e8 <HAL_RCC_OscConfig+0x138>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d000      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
 800230e:	e06b      	b.n	80023e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e2d8      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x7c>
 800231c:	4baf      	ldr	r3, [pc, #700]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4bae      	ldr	r3, [pc, #696]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	0249      	lsls	r1, r1, #9
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e02f      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x9e>
 8002334:	4ba9      	ldr	r3, [pc, #676]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4ba8      	ldr	r3, [pc, #672]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800233a:	49a9      	ldr	r1, [pc, #676]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4ba6      	ldr	r3, [pc, #664]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002346:	49a7      	ldr	r1, [pc, #668]	; (80025e4 <HAL_RCC_OscConfig+0x334>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e01e      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10e      	bne.n	8002374 <HAL_RCC_OscConfig+0xc4>
 8002356:	4ba1      	ldr	r3, [pc, #644]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4ba0      	ldr	r3, [pc, #640]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	02c9      	lsls	r1, r1, #11
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	4b9d      	ldr	r3, [pc, #628]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b9c      	ldr	r3, [pc, #624]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	0249      	lsls	r1, r1, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xdc>
 8002374:	4b99      	ldr	r3, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b98      	ldr	r3, [pc, #608]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800237a:	4999      	ldr	r1, [pc, #612]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	4b96      	ldr	r3, [pc, #600]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b95      	ldr	r3, [pc, #596]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002386:	4997      	ldr	r1, [pc, #604]	; (80025e4 <HAL_RCC_OscConfig+0x334>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d014      	beq.n	80023be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fe28 	bl	8000fe8 <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239e:	f7fe fe23 	bl	8000fe8 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e28a      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b0:	4b8a      	ldr	r3, [pc, #552]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0xee>
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fe13 	bl	8000fe8 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fe0e 	bl	8000fe8 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e275      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b80      	ldr	r3, [pc, #512]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x118>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x146>
 80023f4:	e069      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	220c      	movs	r2, #12
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00b      	beq.n	8002418 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002400:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	220c      	movs	r2, #12
 8002406:	4013      	ands	r3, r2
 8002408:	2b08      	cmp	r3, #8
 800240a:	d11c      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
 800240c:	4b73      	ldr	r3, [pc, #460]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	025b      	lsls	r3, r3, #9
 8002414:	4013      	ands	r3, r2
 8002416:	d116      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e24b      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22f8      	movs	r2, #248	; 0xf8
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00da      	lsls	r2, r3, #3
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002444:	e041      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fdc5 	bl	8000fe8 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fdc0 	bl	8000fe8 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e227      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d0f1      	beq.n	8002464 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22f8      	movs	r2, #248	; 0xf8
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00da      	lsls	r2, r3, #3
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fda0 	bl	8000fe8 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fd9b 	bl	8000fe8 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e202      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f1      	bne.n	80024ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	d036      	beq.n	8002542 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d019      	beq.n	8002510 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e0:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fd7e 	bl	8000fe8 <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fd79 	bl	8000fe8 <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1e0      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d0f1      	beq.n	80024f2 <HAL_RCC_OscConfig+0x242>
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fd64 	bl	8000fe8 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fd5f 	bl	8000fe8 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1c6      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d1f1      	bne.n	8002526 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x29e>
 800254c:	e0b4      	b.n	80026b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	201f      	movs	r0, #31
 8002550:	183b      	adds	r3, r7, r0
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	4013      	ands	r3, r2
 8002560:	d110      	bne.n	8002584 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0549      	lsls	r1, r1, #21
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	055b      	lsls	r3, r3, #21
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800257e:	183b      	adds	r3, r7, r0
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d11a      	bne.n	80025c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_RCC_OscConfig+0x338>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0049      	lsls	r1, r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fd23 	bl	8000fe8 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fd1e 	bl	8000fe8 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e185      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x338>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10e      	bne.n	80025ec <HAL_RCC_OscConfig+0x33c>
 80025ce:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	4b02      	ldr	r3, [pc, #8]	; (80025dc <HAL_RCC_OscConfig+0x32c>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	621a      	str	r2, [r3, #32]
 80025da:	e035      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	fffeffff 	.word	0xfffeffff
 80025e4:	fffbffff 	.word	0xfffbffff
 80025e8:	40007000 	.word	0x40007000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x35e>
 80025f4:	4bb6      	ldr	r3, [pc, #728]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	4bb5      	ldr	r3, [pc, #724]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	438a      	bics	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	4bb3      	ldr	r3, [pc, #716]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	4bb2      	ldr	r3, [pc, #712]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002606:	2104      	movs	r1, #4
 8002608:	438a      	bics	r2, r1
 800260a:	621a      	str	r2, [r3, #32]
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x380>
 8002616:	4bae      	ldr	r3, [pc, #696]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	4bad      	ldr	r3, [pc, #692]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800261c:	2104      	movs	r1, #4
 800261e:	430a      	orrs	r2, r1
 8002620:	621a      	str	r2, [r3, #32]
 8002622:	4bab      	ldr	r3, [pc, #684]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	4baa      	ldr	r3, [pc, #680]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002628:	2101      	movs	r1, #1
 800262a:	430a      	orrs	r2, r1
 800262c:	621a      	str	r2, [r3, #32]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x398>
 8002630:	4ba7      	ldr	r3, [pc, #668]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	4ba6      	ldr	r3, [pc, #664]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	621a      	str	r2, [r3, #32]
 800263c:	4ba4      	ldr	r3, [pc, #656]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002642:	2104      	movs	r1, #4
 8002644:	438a      	bics	r2, r1
 8002646:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe fcca 	bl	8000fe8 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fcc5 	bl	8000fe8 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a9b      	ldr	r2, [pc, #620]	; (80028d4 <HAL_RCC_OscConfig+0x624>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e12b      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b98      	ldr	r3, [pc, #608]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x3aa>
 8002678:	e013      	b.n	80026a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fcb5 	bl	8000fe8 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	e009      	b.n	8002698 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fcb0 	bl	8000fe8 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a91      	ldr	r2, [pc, #580]	; (80028d4 <HAL_RCC_OscConfig+0x624>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e116      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b8d      	ldr	r3, [pc, #564]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a2:	231f      	movs	r3, #31
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	4b87      	ldr	r3, [pc, #540]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026b2:	4989      	ldr	r1, [pc, #548]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	4013      	ands	r3, r2
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12a      	bne.n	8002720 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026ca:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026d0:	2104      	movs	r1, #4
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026d6:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026da:	4b7d      	ldr	r3, [pc, #500]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fc81 	bl	8000fe8 <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026ec:	f7fe fc7c 	bl	8000fe8 <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0e3      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026fe:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	d0f1      	beq.n	80026ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002708:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	22f8      	movs	r2, #248	; 0xf8
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
 800271e:	e034      	b.n	800278a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	3305      	adds	r3, #5
 8002726:	d111      	bne.n	800274c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	22f8      	movs	r2, #248	; 0xf8
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	00da      	lsls	r2, r3, #3
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	e01e      	b.n	800278a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800274c:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800274e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002750:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002752:	2104      	movs	r1, #4
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002758:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800275a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275c:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fc40 	bl	8000fe8 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800276e:	f7fe fc3b 	bl	8000fe8 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0a2      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d100      	bne.n	8002794 <HAL_RCC_OscConfig+0x4e4>
 8002792:	e097      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	220c      	movs	r2, #12
 800279a:	4013      	ands	r3, r2
 800279c:	2b08      	cmp	r3, #8
 800279e:	d100      	bne.n	80027a2 <HAL_RCC_OscConfig+0x4f2>
 80027a0:	e06b      	b.n	800287a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d14c      	bne.n	8002844 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027b0:	494a      	ldr	r1, [pc, #296]	; (80028dc <HAL_RCC_OscConfig+0x62c>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe fc17 	bl	8000fe8 <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fc12 	bl	8000fe8 <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e079      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	049b      	lsls	r3, r3, #18
 80027da:	4013      	ands	r3, r2
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027de:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	220f      	movs	r2, #15
 80027e4:	4393      	bics	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x630>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	431a      	orrs	r2, r3
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280c:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0449      	lsls	r1, r1, #17
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fbe5 	bl	8000fe8 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fbe0 	bl	8000fe8 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e047      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	049b      	lsls	r3, r3, #18
 800283e:	4013      	ands	r3, r2
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x574>
 8002842:	e03f      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800284a:	4924      	ldr	r1, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x62c>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fbca 	bl	8000fe8 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fbc5 	bl	8000fe8 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e02c      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	049b      	lsls	r3, r3, #18
 8002874:	4013      	ands	r3, r2
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x5aa>
 8002878:	e024      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01f      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x620>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	220f      	movs	r2, #15
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	23f0      	movs	r3, #240	; 0xf0
 80028b4:	039b      	lsls	r3, r3, #14
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b008      	add	sp, #32
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	40021000 	.word	0x40021000
 80028d4:	00001388 	.word	0x00001388
 80028d8:	efffffff 	.word	0xefffffff
 80028dc:	feffffff 	.word	0xfeffffff
 80028e0:	ffc2ffff 	.word	0xffc2ffff

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b3      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d911      	bls.n	800292a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4393      	bics	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e09a      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d015      	beq.n	8002960 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d006      	beq.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002944:	21e0      	movs	r1, #224	; 0xe0
 8002946:	00c9      	lsls	r1, r1, #3
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	22f0      	movs	r2, #240	; 0xf0
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	4013      	ands	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06e      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	049b      	lsls	r3, r3, #18
 8002992:	4013      	ands	r3, r2
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e062      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e05b      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	4393      	bics	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fb14 	bl	8000fe8 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	e009      	b.n	80029da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7fe fb0f 	bl	8000fe8 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_RCC_ClockConfig+0x18c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e042      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	220c      	movs	r2, #12
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1ec      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d211      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCC_ClockConfig+0x184>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_RCC_ClockConfig+0x190>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a3c:	f000 f820 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a40:	0001      	movs	r1, r0
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_ClockConfig+0x188>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	220f      	movs	r2, #15
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x194>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	000a      	movs	r2, r1
 8002a52:	40da      	lsrs	r2, r3
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x198>)
 8002a56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fa7f 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	00001388 	.word	0x00001388
 8002a74:	fffff8ff 	.word	0xfffff8ff
 8002a78:	08003b00 	.word	0x08003b00
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08f      	sub	sp, #60	; 0x3c
 8002a84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a86:	2314      	movs	r3, #20
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a8e:	c313      	stmia	r3!, {r0, r1, r4}
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	220c      	movs	r2, #12
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d002      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x4a>
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x50>
 8002ac8:	e02d      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2214      	movs	r2, #20
 8002ada:	18ba      	adds	r2, r7, r2
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	1d3a      	adds	r2, r7, #4
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	4013      	ands	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afa:	4812      	ldr	r0, [pc, #72]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afc:	f7fd fb04 	bl	8000108 <__udivsi3>
 8002b00:	0003      	movs	r3, r0
 8002b02:	001a      	movs	r2, r3
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	4353      	muls	r3, r2
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	e009      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	000a      	movs	r2, r1
 8002b10:	0152      	lsls	r2, r2, #5
 8002b12:	1a52      	subs	r2, r2, r1
 8002b14:	0193      	lsls	r3, r2, #6
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	185b      	adds	r3, r3, r1
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b00f      	add	sp, #60	; 0x3c
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	08003ae0 	.word	0x08003ae0
 8002b3c:	08003af0 	.word	0x08003af0
 8002b40:	40021000 	.word	0x40021000
 8002b44:	007a1200 	.word	0x007a1200

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	025b      	lsls	r3, r3, #9
 8002b60:	4013      	ands	r3, r2
 8002b62:	d100      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b64:	e08e      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2017      	movs	r0, #23
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	4013      	ands	r3, r2
 8002b78:	d110      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0549      	lsls	r1, r1, #21
 8002b84:	430a      	orrs	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
 8002b88:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	055b      	lsls	r3, r3, #21
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d11a      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba8:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	0049      	lsls	r1, r1, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fa17 	bl	8000fe8 <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fa12 	bl	8000fe8 <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bde:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d034      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	23c0      	movs	r3, #192	; 0xc0
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d02c      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0249      	lsls	r1, r1, #9
 8002c14:	430a      	orrs	r2, r1
 8002c16:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c1e:	4936      	ldr	r1, [pc, #216]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe f9d9 	bl	8000fe8 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e009      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f9d4 	bl	8000fe8 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e048      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	2202      	movs	r2, #2
 8002c56:	4013      	ands	r3, r2
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c6e:	2317      	movs	r3, #23
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7e:	4920      	ldr	r1, [pc, #128]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	2203      	movs	r2, #3
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	fffffcff 	.word	0xfffffcff
 8002cf8:	fffeffff 	.word	0xfffeffff
 8002cfc:	00001388 	.word	0x00001388
 8002d00:	efffffff 	.word	0xefffffff

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e042      	b.n	8002d9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223d      	movs	r2, #61	; 0x3d
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	223c      	movs	r2, #60	; 0x3c
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe f83f 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223d      	movs	r2, #61	; 0x3d
 8002d36:	2102      	movs	r1, #2
 8002d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f000 fad7 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2246      	movs	r2, #70	; 0x46
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223e      	movs	r2, #62	; 0x3e
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223f      	movs	r2, #63	; 0x3f
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2241      	movs	r2, #65	; 0x41
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2242      	movs	r2, #66	; 0x42
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2243      	movs	r2, #67	; 0x43
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2244      	movs	r2, #68	; 0x44
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2245      	movs	r2, #69	; 0x45
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223d      	movs	r2, #61	; 0x3d
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e042      	b.n	8002e3c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	223d      	movs	r2, #61	; 0x3d
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	; 0x3c
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f839 	bl	8002e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	223d      	movs	r2, #61	; 0x3d
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	0019      	movs	r1, r3
 8002de4:	0010      	movs	r0, r2
 8002de6:	f000 fa87 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2246      	movs	r2, #70	; 0x46
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223e      	movs	r2, #62	; 0x3e
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223f      	movs	r2, #63	; 0x3f
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2241      	movs	r2, #65	; 0x41
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2242      	movs	r2, #66	; 0x42
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2243      	movs	r2, #67	; 0x43
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2244      	movs	r2, #68	; 0x44
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2245      	movs	r2, #69	; 0x45
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223d      	movs	r2, #61	; 0x3d
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x22>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	223e      	movs	r2, #62	; 0x3e
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	4193      	sbcs	r3, r2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e01f      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x62>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d108      	bne.n	8002e8e <HAL_TIM_PWM_Start+0x3a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	223f      	movs	r2, #63	; 0x3f
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	4193      	sbcs	r3, r2
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	e013      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x62>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d108      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x52>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	4193      	sbcs	r3, r2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e007      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x62>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2241      	movs	r2, #65	; 0x41
 8002eaa:	5c9b      	ldrb	r3, [r3, r2]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	4193      	sbcs	r3, r2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e074      	b.n	8002fa8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_PWM_Start+0x7a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223e      	movs	r2, #62	; 0x3e
 8002ec8:	2102      	movs	r1, #2
 8002eca:	5499      	strb	r1, [r3, r2]
 8002ecc:	e013      	b.n	8002ef6 <HAL_TIM_PWM_Start+0xa2>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d104      	bne.n	8002ede <HAL_TIM_PWM_Start+0x8a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	2102      	movs	r1, #2
 8002eda:	5499      	strb	r1, [r3, r2]
 8002edc:	e00b      	b.n	8002ef6 <HAL_TIM_PWM_Start+0xa2>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0x9a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]
 8002eec:	e003      	b.n	8002ef6 <HAL_TIM_PWM_Start+0xa2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2241      	movs	r2, #65	; 0x41
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fd10 	bl	8003924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_TIM_PWM_Start+0x15c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_TIM_PWM_Start+0xd8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_TIM_PWM_Start+0x160>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_TIM_PWM_Start+0xd8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_TIM_PWM_Start+0x164>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_PWM_Start+0xd8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <HAL_TIM_PWM_Start+0x168>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIM_PWM_Start+0xdc>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_TIM_PWM_Start+0xde>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	0209      	lsls	r1, r1, #8
 8002f44:	430a      	orrs	r2, r1
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_TIM_PWM_Start+0x15c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00f      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x11e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d009      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x11e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_TIM_PWM_Start+0x16c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x11e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_TIM_PWM_Start+0x160>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2207      	movs	r2, #7
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d010      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	e007      	b.n	8002fa6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	40000400 	.word	0x40000400

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2317      	movs	r3, #23
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	223c      	movs	r2, #60	; 0x3c
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0ad      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	223c      	movs	r2, #60	; 0x3c
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d100      	bne.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ff4:	e076      	b.n	80030e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d900      	bls.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002ffc:	e095      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d04e      	beq.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d900      	bls.n	800300c <HAL_TIM_PWM_ConfigChannel+0x48>
 800300a:	e08e      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x166>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d021      	beq.n	800305c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003018:	e087      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f9e8 	bl	80033f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2108      	movs	r1, #8
 8003034:	430a      	orrs	r2, r1
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2104      	movs	r1, #4
 8003044:	438a      	bics	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e06b      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fa4f 	bl	8003508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	0109      	lsls	r1, r1, #4
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4931      	ldr	r1, [pc, #196]	; (800314c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003088:	400a      	ands	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	619a      	str	r2, [r3, #24]
      break;
 80030a0:	e048      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	0011      	movs	r1, r2
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fab0 	bl	8003610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2108      	movs	r1, #8
 80030bc:	430a      	orrs	r2, r1
 80030be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2104      	movs	r1, #4
 80030cc:	438a      	bics	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69d9      	ldr	r1, [r3, #28]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	61da      	str	r2, [r3, #28]
      break;
 80030e2:	e027      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	0011      	movs	r1, r2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f000 fb15 	bl	800371c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0109      	lsls	r1, r1, #4
 8003100:	430a      	orrs	r2, r1
 8003102:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	490f      	ldr	r1, [pc, #60]	; (800314c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003110:	400a      	ands	r2, r1
 8003112:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69d9      	ldr	r1, [r3, #28]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	021a      	lsls	r2, r3, #8
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	61da      	str	r2, [r3, #28]
      break;
 8003128:	e004      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800312a:	2317      	movs	r3, #23
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	223c      	movs	r2, #60	; 0x3c
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

  return status;
 800313c:	2317      	movs	r3, #23
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	781b      	ldrb	r3, [r3, #0]
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b006      	add	sp, #24
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	fffffbff 	.word	0xfffffbff

08003150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	230f      	movs	r3, #15
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	223c      	movs	r2, #60	; 0x3c
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIM_ConfigClockSource+0x20>
 800316c:	2302      	movs	r3, #2
 800316e:	e0bc      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x19a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	223c      	movs	r2, #60	; 0x3c
 8003174:	2101      	movs	r1, #1
 8003176:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	223d      	movs	r2, #61	; 0x3d
 800317c:	2102      	movs	r1, #2
 800317e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2277      	movs	r2, #119	; 0x77
 800318c:	4393      	bics	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0192      	lsls	r2, r2, #6
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d040      	beq.n	800322e <HAL_TIM_ConfigClockSource+0xde>
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0192      	lsls	r2, r2, #6
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d900      	bls.n	80031b6 <HAL_TIM_ConfigClockSource+0x66>
 80031b4:	e088      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	0152      	lsls	r2, r2, #5
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d100      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x70>
 80031be:	e088      	b.n	80032d2 <HAL_TIM_ConfigClockSource+0x182>
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	0152      	lsls	r2, r2, #5
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d900      	bls.n	80031ca <HAL_TIM_ConfigClockSource+0x7a>
 80031c8:	e07e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031ca:	2b70      	cmp	r3, #112	; 0x70
 80031cc:	d018      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xb0>
 80031ce:	d900      	bls.n	80031d2 <HAL_TIM_ConfigClockSource+0x82>
 80031d0:	e07a      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031d2:	2b60      	cmp	r3, #96	; 0x60
 80031d4:	d04f      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x126>
 80031d6:	d900      	bls.n	80031da <HAL_TIM_ConfigClockSource+0x8a>
 80031d8:	e076      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031da:	2b50      	cmp	r3, #80	; 0x50
 80031dc:	d03b      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x106>
 80031de:	d900      	bls.n	80031e2 <HAL_TIM_ConfigClockSource+0x92>
 80031e0:	e072      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d057      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x146>
 80031e6:	d900      	bls.n	80031ea <HAL_TIM_ConfigClockSource+0x9a>
 80031e8:	e06e      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031ea:	2b30      	cmp	r3, #48	; 0x30
 80031ec:	d063      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x166>
 80031ee:	d86b      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d060      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x166>
 80031f4:	d868      	bhi.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d05d      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x166>
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d05b      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x166>
 80031fe:	e063      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f000 fb68 	bl	80038e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2277      	movs	r2, #119	; 0x77
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
      break;
 800322c:	e052      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f000 fb51 	bl	80038e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	01c9      	lsls	r1, r1, #7
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
      break;
 8003254:	e03e      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	001a      	movs	r2, r3
 8003264:	f000 fac4 	bl	80037f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2150      	movs	r1, #80	; 0x50
 800326e:	0018      	movs	r0, r3
 8003270:	f000 fb1e 	bl	80038b0 <TIM_ITRx_SetConfig>
      break;
 8003274:	e02e      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	001a      	movs	r2, r3
 8003284:	f000 fae2 	bl	800384c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2160      	movs	r1, #96	; 0x60
 800328e:	0018      	movs	r0, r3
 8003290:	f000 fb0e 	bl	80038b0 <TIM_ITRx_SetConfig>
      break;
 8003294:	e01e      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	001a      	movs	r2, r3
 80032a4:	f000 faa4 	bl	80037f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2140      	movs	r1, #64	; 0x40
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fafe 	bl	80038b0 <TIM_ITRx_SetConfig>
      break;
 80032b4:	e00e      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f000 faf5 	bl	80038b0 <TIM_ITRx_SetConfig>
      break;
 80032c6:	e005      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032c8:	230f      	movs	r3, #15
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
      break;
 80032d0:	e000      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	223d      	movs	r2, #61	; 0x3d
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	223c      	movs	r2, #60	; 0x3c
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

  return status;
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	ffff00ff 	.word	0xffff00ff

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a34      	ldr	r2, [pc, #208]	; (80033dc <TIM_Base_SetConfig+0xe4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d008      	beq.n	8003322 <TIM_Base_SetConfig+0x2a>
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	05db      	lsls	r3, r3, #23
 8003316:	429a      	cmp	r2, r3
 8003318:	d003      	beq.n	8003322 <TIM_Base_SetConfig+0x2a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <TIM_Base_SetConfig+0xe8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d108      	bne.n	8003334 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2270      	movs	r2, #112	; 0x70
 8003326:	4393      	bics	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <TIM_Base_SetConfig+0xe4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d018      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	429a      	cmp	r2, r3
 8003344:	d013      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <TIM_Base_SetConfig+0xe8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00f      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a24      	ldr	r2, [pc, #144]	; (80033e4 <TIM_Base_SetConfig+0xec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00b      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <TIM_Base_SetConfig+0xf0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a22      	ldr	r2, [pc, #136]	; (80033ec <TIM_Base_SetConfig+0xf4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <TIM_Base_SetConfig+0x76>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <TIM_Base_SetConfig+0xf8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d108      	bne.n	8003380 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <TIM_Base_SetConfig+0xfc>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4393      	bics	r3, r2
 8003386:	001a      	movs	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <TIM_Base_SetConfig+0xe4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0xce>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <TIM_Base_SetConfig+0xf0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0xce>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <TIM_Base_SetConfig+0xf4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0xce>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <TIM_Base_SetConfig+0xf8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d103      	bne.n	80033ce <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	615a      	str	r2, [r3, #20]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b004      	add	sp, #16
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40002000 	.word	0x40002000
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	fffffcff 	.word	0xfffffcff

080033f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	2201      	movs	r2, #1
 8003408:	4393      	bics	r3, r2
 800340a:	001a      	movs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2270      	movs	r2, #112	; 0x70
 8003426:	4393      	bics	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2203      	movs	r2, #3
 800342e:	4393      	bics	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2202      	movs	r2, #2
 8003440:	4393      	bics	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <TIM_OC1_SetConfig+0xf8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_OC1_SetConfig+0x76>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <TIM_OC1_SetConfig+0xfc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_OC1_SetConfig+0x76>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <TIM_OC1_SetConfig+0x100>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_OC1_SetConfig+0x76>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a24      	ldr	r2, [pc, #144]	; (80034fc <TIM_OC1_SetConfig+0x104>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10c      	bne.n	8003488 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2208      	movs	r2, #8
 8003472:	4393      	bics	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2204      	movs	r2, #4
 8003484:	4393      	bics	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <TIM_OC1_SetConfig+0xf8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_OC1_SetConfig+0xb0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <TIM_OC1_SetConfig+0xfc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_OC1_SetConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <TIM_OC1_SetConfig+0x100>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC1_SetConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <TIM_OC1_SetConfig+0x104>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <TIM_OC1_SetConfig+0x108>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4a14      	ldr	r2, [pc, #80]	; (8003504 <TIM_OC1_SetConfig+0x10c>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b006      	add	sp, #24
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800
 8003500:	fffffeff 	.word	0xfffffeff
 8003504:	fffffdff 	.word	0xfffffdff

08003508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	2210      	movs	r2, #16
 8003518:	4393      	bics	r3, r2
 800351a:	001a      	movs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <TIM_OC2_SetConfig+0xe8>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <TIM_OC2_SetConfig+0xec>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2220      	movs	r2, #32
 8003552:	4393      	bics	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <TIM_OC2_SetConfig+0xf0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	4393      	bics	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4393      	bics	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <TIM_OC2_SetConfig+0xf0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <TIM_OC2_SetConfig+0xf4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_OC2_SetConfig+0xf8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC2_SetConfig+0x9e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_OC2_SetConfig+0xfc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <TIM_OC2_SetConfig+0x100>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <TIM_OC2_SetConfig+0x104>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b006      	add	sp, #24
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	ffff8fff 	.word	0xffff8fff
 80035f4:	fffffcff 	.word	0xfffffcff
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800
 8003608:	fffffbff 	.word	0xfffffbff
 800360c:	fffff7ff 	.word	0xfffff7ff

08003610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2270      	movs	r2, #112	; 0x70
 800363c:	4393      	bics	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2203      	movs	r2, #3
 8003644:	4393      	bics	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <TIM_OC3_SetConfig+0xe8>)
 8003656:	4013      	ands	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <TIM_OC3_SetConfig+0xec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10d      	bne.n	800368a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <TIM_OC3_SetConfig+0xf0>)
 8003672:	4013      	ands	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <TIM_OC3_SetConfig+0xf4>)
 8003686:	4013      	ands	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <TIM_OC3_SetConfig+0xec>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00b      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <TIM_OC3_SetConfig+0xf8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <TIM_OC3_SetConfig+0xfc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_OC3_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <TIM_OC3_SetConfig+0x100>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d113      	bne.n	80036d2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_OC3_SetConfig+0x104>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <TIM_OC3_SetConfig+0x108>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	fffffeff 	.word	0xfffffeff
 80036f8:	fffffdff 	.word	0xfffffdff
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	fffff7ff 	.word	0xfffff7ff
 8003704:	fffffbff 	.word	0xfffffbff
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	ffffefff 	.word	0xffffefff
 8003718:	ffffdfff 	.word	0xffffdfff

0800371c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a28      	ldr	r2, [pc, #160]	; (80037cc <TIM_OC4_SetConfig+0xb0>)
 800372c:	401a      	ands	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <TIM_OC4_SetConfig+0xb4>)
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <TIM_OC4_SetConfig+0xb8>)
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <TIM_OC4_SetConfig+0xbc>)
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	031b      	lsls	r3, r3, #12
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a19      	ldr	r2, [pc, #100]	; (80037dc <TIM_OC4_SetConfig+0xc0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_OC4_SetConfig+0x78>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <TIM_OC4_SetConfig+0xc4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_OC4_SetConfig+0x78>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <TIM_OC4_SetConfig+0xc8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC4_SetConfig+0x78>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <TIM_OC4_SetConfig+0xcc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d109      	bne.n	80037a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <TIM_OC4_SetConfig+0xd0>)
 8003798:	4013      	ands	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	ffffefff 	.word	0xffffefff
 80037d0:	ffff8fff 	.word	0xffff8fff
 80037d4:	fffffcff 	.word	0xfffffcff
 80037d8:	ffffdfff 	.word	0xffffdfff
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40014400 	.word	0x40014400
 80037e8:	40014800 	.word	0x40014800
 80037ec:	ffffbfff 	.word	0xffffbfff

080037f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	2201      	movs	r2, #1
 8003808:	4393      	bics	r3, r2
 800380a:	001a      	movs	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	22f0      	movs	r2, #240	; 0xf0
 800381a:	4393      	bics	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	220a      	movs	r2, #10
 800382c:	4393      	bics	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	621a      	str	r2, [r3, #32]
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b006      	add	sp, #24
 800384a:	bd80      	pop	{r7, pc}

0800384c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2210      	movs	r2, #16
 800385e:	4393      	bics	r3, r2
 8003860:	001a      	movs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <TIM_TI2_ConfigInputStage+0x60>)
 8003876:	4013      	ands	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	22a0      	movs	r2, #160	; 0xa0
 8003888:	4393      	bics	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b006      	add	sp, #24
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	ffff0fff 	.word	0xffff0fff

080038b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2270      	movs	r2, #112	; 0x70
 80038c4:	4393      	bics	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	2207      	movs	r2, #7
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4a09      	ldr	r2, [pc, #36]	; (8003920 <TIM_ETR_SetConfig+0x3c>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	021a      	lsls	r2, r3, #8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	431a      	orrs	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}
 8003920:	ffff00ff 	.word	0xffff00ff

08003924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	221f      	movs	r2, #31
 8003934:	4013      	ands	r3, r2
 8003936:	2201      	movs	r2, #1
 8003938:	409a      	lsls	r2, r3
 800393a:	0013      	movs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	43d2      	mvns	r2, r2
 8003946:	401a      	ands	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	211f      	movs	r1, #31
 8003954:	400b      	ands	r3, r1
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4099      	lsls	r1, r3
 800395a:	000b      	movs	r3, r1
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b006      	add	sp, #24
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223c      	movs	r2, #60	; 0x3c
 800397a:	5c9b      	ldrb	r3, [r3, r2]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e047      	b.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	223c      	movs	r2, #60	; 0x3c
 8003988:	2101      	movs	r1, #1
 800398a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	223d      	movs	r2, #61	; 0x3d
 8003990:	2102      	movs	r1, #2
 8003992:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2270      	movs	r2, #112	; 0x70
 80039a8:	4393      	bics	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00f      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d009      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4393      	bics	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	223d      	movs	r2, #61	; 0x3d
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	223c      	movs	r2, #60	; 0x3c
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40014000 	.word	0x40014000

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	4d0c      	ldr	r5, [pc, #48]	; (8003a60 <__libc_init_array+0x38>)
 8003a2e:	4c0d      	ldr	r4, [pc, #52]	; (8003a64 <__libc_init_array+0x3c>)
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	42a6      	cmp	r6, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	2600      	movs	r6, #0
 8003a3a:	f000 f821 	bl	8003a80 <_init>
 8003a3e:	4d0a      	ldr	r5, [pc, #40]	; (8003a68 <__libc_init_array+0x40>)
 8003a40:	4c0a      	ldr	r4, [pc, #40]	; (8003a6c <__libc_init_array+0x44>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	42a6      	cmp	r6, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	00b3      	lsls	r3, r6, #2
 8003a4e:	58eb      	ldr	r3, [r5, r3]
 8003a50:	4798      	blx	r3
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	00b3      	lsls	r3, r6, #2
 8003a58:	58eb      	ldr	r3, [r5, r3]
 8003a5a:	4798      	blx	r3
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	08003b10 	.word	0x08003b10
 8003a64:	08003b10 	.word	0x08003b10
 8003a68:	08003b10 	.word	0x08003b10
 8003a6c:	08003b14 	.word	0x08003b14

08003a70 <memset>:
 8003a70:	0003      	movs	r3, r0
 8003a72:	1882      	adds	r2, r0, r2
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	7019      	strb	r1, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
